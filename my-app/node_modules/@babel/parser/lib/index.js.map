{"version":3,"file":"index.js","sources":["../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-codes.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../src/tokenizer/types.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/util/whitespace.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/util/production-parameter.js","../src/parser/util.js","../src/parser/node.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n\n    // this.index = index;\n    // Object.defineProperty(this, \"index\", { enumerable: false, value: index });\n    indexes.set(this, index);\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\nexport const indexes: WeakMap<Position, number> = new WeakMap();\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column } = position;\n  return new Position(\n    line,\n    column + columnOffset,\n    indexes.get(position) + columnOffset,\n  );\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField: \"Unexpected private name.\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { type Position, indexes } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\nimport { type Node } from \"../types\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype Origin = {| node: Node |} | {| at: Position |};\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"placeholders\"\n  | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (ErrorTemplate, Origin, ...any) => void;\nexport type ErrorData = {| message: ErrorTemplate, loc: Position |};\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  raise(\n    { code, reasonCode, template }: ErrorTemplate,\n    origin: Origin,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(\n      origin.node ? origin.node.loc.start : origin.at,\n      { code, reasonCode },\n      template,\n      ...params,\n    );\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    loc: Position,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n    const pos: number = indexes.get(loc);\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    loc: Position,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const pos = indexes.get(loc);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        this.toAssignable(node.value, isLHS);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { node: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { node: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX openning tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token. When the\n  // proposal settles on a token, the others can be merged with tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(Errors.VarRedeclaration, { at: loc }, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ErrorData, ParsingError } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorData> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  indexes,\n  Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (loc?: ?Position, type?: TokenType) => empty;\n  +expectPlugin: (name: string, loc?: Position) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(({ message, loc }) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(message, { at: loc }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShift, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      { at: this.state.curPosition() },\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          // (pos + 1) + 1 - start\n          this.raise(Errors.DuplicateRegExpFlags, {\n            at: createPositionWithColumnOffset(startLoc, pos + 2 - start),\n          });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, {\n          at: createPositionWithColumnOffset(startLoc, pos + 2 - start),\n        });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(\n            Errors.InvalidDigit,\n            { at: this.state.curPosition() },\n            radix,\n          );\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        { at: createPositionWithColumnOffset(startLoc, 2) },\n        radix,\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(indexes.get(startLoc), this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads tempalte continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(message: ErrorTemplate, loc: Position) {\n    // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n    const index: number = indexes.get(loc);\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(message, { at: loc });\n    } else {\n      this.state.strictErrors.set(index, { loc, message });\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            Errors.StrictNumericEscape,\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            createPositionWithColumnOffset(this.state.curPosition(), -1),\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n        this.state.pos = indexes.get(codeLoc) - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        Errors.InvalidEscapedReservedWord,\n        { at: this.state.startLoc },\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(Errors.PrivateNameRedeclaration, { at: loc }, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorData, ErrorTemplate, raiseFunction } from \"../parser/error\";\nimport { indexes, Position } from \"./location\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, ErrorData> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(message: ErrorTemplate, loc: Position) {\n    // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n    this.errors.set(indexes.get(loc), { message, loc });\n  }\n  clearDeclarationError(loc: Position) {\n    // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n    this.errors.delete(indexes.get(loc));\n  }\n  iterateErrors(iterator: (data: ErrorData) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    loc: Position,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(template, { at: loc });\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(template, { at: loc });\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(template, loc);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(({ message, loc }) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(message, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { indexes, type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport type { PluginConfig } from \"./base\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(token: TokenType, template?: ErrorTemplate): void {\n    if (!this.eatContextual(token)) {\n      if (template != null) {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        throw this.raise(template, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(indexes.get(this.state.lastTokEndLoc), this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n    if (this.state.start > indexes.get(this.state.lastTokEndLoc)) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        {\n          code: ErrorCodes.SyntaxError,\n          reasonCode: \"UnexpectedSpace\",\n          template: message,\n        },\n        { at: this.state.lastTokEndLoc },\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      );\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(loc?: ?Position, type?: ?TokenType): empty {\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(\n      {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template:\n          type != null\n            ? `Unexpected token, expected \"${tokenLabelName(type)}\"`\n            : \"Unexpected token\",\n      },\n      { at: loc != null ? loc : this.state.startLoc },\n    );\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs: Array<PluginConfig>): Array<string> {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig: PluginConfig, loc?: ?Position): true {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(\n        loc != null ? loc : this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs([pluginConfig]) },\n        `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(\n          pluginConfig,\n        )}.`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs: Array<PluginConfig>): void {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(\n        this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs) },\n        `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs\n          .map(c => JSON.stringify(c))\n          .join(\", \")}.`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssignLoc, doubleProtoLoc, optionalParametersLoc } =\n      refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { indexes, type Position, SourceLocation } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = indexes.get(endLoc);\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = node.end;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n    node.end = indexes.get(endLoc);\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = node.end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { indexes, Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > indexes.get(moduloLoc) + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              node: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            { at: this.state.startLoc },\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        { at: startLoc },\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { node: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { node: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              node: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { node: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { node: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { node: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            node: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(\n          Errors.InvalidIdentifier,\n          { at: this.state.curPosition() },\n          fullWord,\n        );\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            node: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { node: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { node: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { node: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { node: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { node: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              Errors.ImportBindingIsString,\n              { node: specifier },\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          node: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { node: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          node: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        { at: loc },\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      loc: Position,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        { at: loc },\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      return this.raise(\n        explicitType === \"boolean\" ||\n          explicitType === \"number\" ||\n          explicitType === \"string\"\n          ? FlowErrors.EnumInvalidMemberInitializerPrimaryType\n          : explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerUnknownType,\n        { at: loc },\n        enumName,\n        memberName,\n        explicitType,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumNumberMemberNotInitialized,\n        { at: loc },\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        { node },\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(\n            FlowErrors.EnumInvalidMemberName,\n            { node: id },\n            memberName,\n            // suggestion\n            memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          );\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(\n            FlowErrors.EnumDuplicateMemberName,\n            { node: id },\n            memberName,\n            enumName,\n          );\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(tt._of)) {\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(\n              FlowErrors.EnumInconsistentMemberValues,\n              { at: nameLoc },\n              enumName,\n            );\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport { indexes, type Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(\n                {\n                  code: ErrorCodes.SyntaxError,\n                  reasonCode: \"UnexpectedToken\",\n                  template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n                },\n                { at: this.state.curPosition() },\n              );\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n        indexes.get(this.state.lastTokEndLoc),\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              node: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            node: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            JsxErrors.MissingClosingTagElement,\n            // $FlowIgnore\n            { node: closingElement },\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              JsxErrors.MissingClosingTagElement,\n              // $FlowIgnore\n              { node: closingElement },\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    ReservedArrowTypeParam:\n      \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n    ReservedTypeAssertion:\n      \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    TypeModifierIsUsedInTypeExports:\n      \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n    TypeModifierIsUsedInTypeImports:\n      \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(\n            TSErrors.InvalidModifiersOrder,\n            { at: loc },\n            before,\n            after,\n          );\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, { at: loc }, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc }, modifier);\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          // $FlowIgnore\n          this.raise(errorTemplate, { at: startLoc }, modifier);\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              TSErrors.UnsupportedSignatureParameterKind,\n              { node: pattern },\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              node: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            node: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            node: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { node: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          { at: this.state.lastTokStartLoc },\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(\n          TSErrors.EmptyHeritageClauseType,\n          { at: originalStartLoc },\n          descriptor,\n        );\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          node: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(tt._enum);\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          default: {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n              );\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || tokenIsIdentifier(this.state.type)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { node: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            node: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      if (this.match(tt.lt)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorLoc = this.state.curPosition();\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.match(tt.lt)) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: Position, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          node: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt._enum) {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.next(); // eat 'const'\n          this.expectContextual(tt._enum);\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { node: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            TSErrors.IndexSignatureHasAccessibility,\n            { node: member },\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { node: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { node: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          node: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { node: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { node: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { node: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (tokenIsIdentifier(this.state.type)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          { at: this.state.startLoc },\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          TSErrors.PrivateElementHasAccessibility,\n          { node },\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          node: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { node: method }, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(Errors.InvalidLhs, { node: expr }, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.match(tt.lt)) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                node: expr,\n              });\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.match(tt.lt)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            node,\n          });\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            TSErrors.AbstractMethodHasImplementation,\n            { node: method },\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = this.parseIdentifier();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = this.parseIdentifier();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = this.parseIdentifier();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n      }\n    }\n  };\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"placeholders\",\n);\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  /*:: ObjectMember, */\n  /*:: TsNamedTypeElementBase, */\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            Errors.InvalidParenthesizedAssignment,\n            node.loc.start,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { node: prop.key },\n      );\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, { node: prop });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, { node: elt });\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            { node: expr },\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(Errors.ParamDupe, { node: expr });\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(Errors.LetInLexicalBinding, { node: expr });\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.loc.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(Errors.InvalidPropertyBindingPattern, {\n            node: expr,\n          });\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          { node: expr },\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        node: node.argument,\n      });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  indexes,\n  Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { node: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { node: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n          indexes.get(refExpressionErrors.doubleProtoLoc) >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n          indexes.get(refExpressionErrors.shorthandAssignLoc) >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, { node: left }, value);\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(\n                  Errors.PipeBodyIsTighter,\n                  { at: this.state.startLoc },\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        Errors.PipeUnparenthesizedBody,\n        { at: startLoc },\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        node: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startLoc, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      indexes.get(this.state.lastTokEndLoc) === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          Errors.ImportCallArity,\n          { node },\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { node: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { node: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          Errors.PrivateInExpectedIn,\n          { at: this.state.startLoc },\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types),\n  // and if the Hack-pipes proposal is active with ^ or % as its topicToken,\n  // then the ^ or % could be the topic token (e.g., in x |> ^==y or x |> ^===y),\n  // and so we reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”,\n      // so that the following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(\n        Errors.PipeTopicUnconfiguredToken,\n        { at: startLoc },\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        Errors.UnsupportedMetaProperty,\n        { node: node.property },\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(SourceTypeModuleErrors.ImportMetaOutsideModule, {\n          node: id,\n        });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        val,\n        startPos,\n        // $FlowIgnore[incompatible-type] We know this exists, so it can't be undefined.\n        indexes.get(this.state.lastTokEndLoc),\n      );\n\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { node: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { node: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { node: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(\n            Errors.AccessorIsGenerator,\n            { at: this.state.curPosition() },\n            keyName,\n          );\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { node: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { node: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            this.raise(Errors.UnexpectedPrivateField, {\n              // FIXME: explain\n              at: createPositionWithColumnOffset(this.state.startLoc, 1),\n            });\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorOrigin =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? { at: node.key.loc.end }\n                : { node };\n\n            this.raise(Errors.IllegalLanguageModeDirective, errorOrigin);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(\n          Errors.UnexpectedToken,\n          { at: this.state.curPosition() },\n          \",\",\n        );\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(\n        Errors.AwaitBindingIdentifier,\n        startLoc,\n      );\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, { at: startLoc }, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, { at: startLoc }, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name, loc] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at: loc }, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(SourceTypeModuleErrors.ImportOutsideModule, { node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        Errors.IllegalBreakContinue,\n        { node },\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { node: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { node: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, { node: expr }, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        Errors.ForInOfLoopInitializer,\n        { node: init },\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, { node: init }, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              Errors.DeclarationMissingInitializer,\n              { at: this.state.lastTokEndLoc },\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            { at: this.state.lastTokEndLoc },\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { node: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          node: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { node: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { node: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { node: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { node: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { node: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { node: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              node: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                Errors.ExportBindingIsString,\n                { node: specifier },\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        { node },\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          Errors.ModuleExportNameHasLoneSurrogate,\n          { node: result },\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { at: this.state.startLoc },\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          Errors.ModuleAttributeDifferentFromType,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          Errors.ImportBindingIsString,\n          { node: specifier },\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["Position","constructor","line","col","index","column","indexes","set","SourceLocation","start","end","filename","identifierName","WeakMap","createPositionWithColumnOffset","position","columnOffset","get","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","pluginConfig","plugins","has","pluginName","pluginOptions","actualOptions","key","Object","keys","getPluginOption","plugin","name","setTrailingComments","node","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","addComment","comment","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","code","templates","forEach","template","ParserError","raise","origin","raiseWithData","at","raiseOverwrite","pos","message","replace","_","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","superClass","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","value","bigInt","BigInt","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","parseBlockBody","args","directiveStatements","directives","map","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","toAssignableObjectExpressionProp","Errors","finishCallExpression","optional","callee","source","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","token","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","endLoc","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokEndLoc","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","clone","skipArrays","val","Array","isArray","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","tokens","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","next2","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","unexpected","containsInvalid","inTemplate","codePos","substr","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","classScope","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","enumerable","defineProperty","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","getPluginNamesFromConfigs","pluginConfigs","c","missingPlugin","JSON","stringify","expectOnePlugin","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","parse","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStartLoc","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","kindKey","parseModuleExportName","PlaceholderErrors","ClassNameIsRequired","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposal","proposalList","tupleSyntaxIsHash","syntaxType","topicToken","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","last","isLast","checkToRestConversion","arg","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","pipeProposal","parseTopicReference","lookaheadCh","codePointAt","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorOrigin","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithAsync","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}