{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"controls\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\"];\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport getMiniDecimal, { toFixed } from './utils/MiniDecimal';\nimport StepHandler from './StepHandler';\nimport { getNumberPrecision, num2str, validateNumber } from './utils/numberUtil';\nimport useCursor from './hooks/useCursor';\nimport useUpdateEffect from './hooks/useUpdateEffect';\nimport useFrame from './hooks/useFrame';\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      min = props.min,\n      max = props.max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      upHandler = props.upHandler,\n      downHandler = props.downHandler,\n      keyboard = props.keyboard,\n      _props$controls = props.controls,\n      controls = _props$controls === void 0 ? true : _props$controls,\n      stringMode = props.stringMode,\n      parser = props.parser,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      onPressEnter = props.onPressEnter,\n      onStep = props.onStep,\n      inputProps = _objectWithoutProperties(props, _excluded);\n\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focus = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = React.useState(function () {\n    return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      decimalValue = _React$useState4[0],\n      setDecimalValue = _React$useState4[1];\n\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n\n    if (precision >= 0) {\n      return precision;\n    }\n\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n\n    if (parser) {\n      return parser(numStr);\n    }\n\n    var parsedStr = numStr;\n\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var inputValueRef = React.useRef('');\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n\n    var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = React.useState(function () {\n    var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n\n    if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n      return Number.isNaN(initValue) ? '' : initValue;\n    }\n\n    return mergedFormatter(decimalValue.toString(), false);\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      inputValue = _React$useState6[0],\n      setInternalInputValue = _React$useState6[1];\n\n  inputValueRef.current = inputValue; // Should always be string\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  } // >>> Max & Min limit\n\n\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n      _useCursor2 = _slicedToArray(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n      } // Trigger event\n\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n\n      return updateValue;\n    }\n\n    return decimalValue;\n  }; // ========================== User Input ==========================\n\n\n  var onNextPromise = useFrame(); // >>> Collect input value\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue incase input can not parse as number\n\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    } // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr); // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n\n      if (!parser) {\n        nextInputStr = inputStr.replace(/。/g, '.');\n      }\n\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  }; // >>> Composition\n\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  }; // ============================= Step =============================\n\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current; // Ignore step since out of range\n\n\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(step);\n\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n\n\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = decimalValue;\n    }\n\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which;\n    userTypingRef.current = true;\n\n    if (which === KeyCode.ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n\n    if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n      onInternalStep(KeyCode.UP === which);\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n  }; // >>> Focus & Blur\n\n\n  var onBlur = function onBlur() {\n    flushInputValue(false);\n    setFocus(false);\n    userTypingRef.current = false;\n  }; // ========================== Controlled ==========================\n  // Input by precision\n\n\n  useUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]); // Input by value\n\n  useUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue)); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd\n  }, controls && /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-input-number/es/InputNumber.js"],"names":["_extends","_defineProperty","_typeof","_slicedToArray","_objectWithoutProperties","_excluded","React","classNames","KeyCode","composeRef","getMiniDecimal","toFixed","StepHandler","getNumberPrecision","num2str","validateNumber","useCursor","useUpdateEffect","useFrame","getDecimalValue","stringMode","decimalValue","isEmpty","toString","toNumber","getDecimalIfValidate","value","decimal","isInvalidate","InputNumber","forwardRef","props","ref","_classNames","_props$prefixCls","prefixCls","className","style","min","max","_props$step","step","defaultValue","disabled","readOnly","upHandler","downHandler","keyboard","_props$controls","controls","parser","formatter","precision","decimalSeparator","onChange","onInput","onPressEnter","onStep","inputProps","inputClassName","concat","inputRef","useRef","_React$useState","useState","_React$useState2","focus","setFocus","userTypingRef","compositionRef","_React$useState3","_React$useState4","setDecimalValue","setUncontrolledDecimalValue","newDecimal","undefined","getPrecision","useCallback","numStr","userTyping","Math","mergedParser","num","String","parsedStr","replace","inputValueRef","mergedFormatter","number","input","current","str","mergedPrecision","separatorStr","_React$useState5","initValue","includes","Number","isNaN","_React$useState6","inputValue","setInternalInputValue","setInputValue","newValue","maxDecimal","useMemo","minDecimal","upDisabled","lessEquals","downDisabled","_useCursor","_useCursor2","recordCursor","restoreCursor","getRangeValue","target","isInRange","triggerValueUpdate","updateValue","isRangeValidate","equals","onNextPromise","collectInputValue","inputStr","finalValue","finalDecimal","nextInputStr","onCompositionStart","onCompositionEnd","onInternalInput","e","onInternalStep","up","_inputRef$current","stepDecimal","negate","add","updatedValue","offset","type","flushInputValue","parsedValue","formatValue","onKeyDown","event","which","ENTER","UP","DOWN","preventDefault","onKeyUp","onBlur","currentParsedValue","createElement","onFocus","upNode","downNode","autoComplete","role","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"controls\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\"];\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport getMiniDecimal, { toFixed } from './utils/MiniDecimal';\nimport StepHandler from './StepHandler';\nimport { getNumberPrecision, num2str, validateNumber } from './utils/numberUtil';\nimport useCursor from './hooks/useCursor';\nimport useUpdateEffect from './hooks/useUpdateEffect';\nimport useFrame from './hooks/useFrame';\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      min = props.min,\n      max = props.max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      upHandler = props.upHandler,\n      downHandler = props.downHandler,\n      keyboard = props.keyboard,\n      _props$controls = props.controls,\n      controls = _props$controls === void 0 ? true : _props$controls,\n      stringMode = props.stringMode,\n      parser = props.parser,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      onPressEnter = props.onPressEnter,\n      onStep = props.onStep,\n      inputProps = _objectWithoutProperties(props, _excluded);\n\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focus = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = React.useState(function () {\n    return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      decimalValue = _React$useState4[0],\n      setDecimalValue = _React$useState4[1];\n\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n\n    if (precision >= 0) {\n      return precision;\n    }\n\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n\n    if (parser) {\n      return parser(numStr);\n    }\n\n    var parsedStr = numStr;\n\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var inputValueRef = React.useRef('');\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n\n    var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = React.useState(function () {\n    var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n\n    if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n      return Number.isNaN(initValue) ? '' : initValue;\n    }\n\n    return mergedFormatter(decimalValue.toString(), false);\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      inputValue = _React$useState6[0],\n      setInternalInputValue = _React$useState6[1];\n\n  inputValueRef.current = inputValue; // Should always be string\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  } // >>> Max & Min limit\n\n\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n      _useCursor2 = _slicedToArray(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n      } // Trigger event\n\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n\n      return updateValue;\n    }\n\n    return decimalValue;\n  }; // ========================== User Input ==========================\n\n\n  var onNextPromise = useFrame(); // >>> Collect input value\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue incase input can not parse as number\n\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    } // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr); // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n\n      if (!parser) {\n        nextInputStr = inputStr.replace(/。/g, '.');\n      }\n\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  }; // >>> Composition\n\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  }; // ============================= Step =============================\n\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current;\n\n    // Ignore step since out of range\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(step);\n\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n\n\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = decimalValue;\n    }\n\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which;\n    userTypingRef.current = true;\n\n    if (which === KeyCode.ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n\n    if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n      onInternalStep(KeyCode.UP === which);\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n  }; // >>> Focus & Blur\n\n\n  var onBlur = function onBlur() {\n    flushInputValue(false);\n    setFocus(false);\n    userTypingRef.current = false;\n  }; // ========================== Controlled ==========================\n  // Input by precision\n\n\n  useUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]); // Input by value\n\n  useUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue)); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd\n  }, controls && /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;"]},"metadata":{},"sourceType":"module"}