{"ast":null,"code":"/**\n * @param {{ protocol?: string, auth?: string, hostname?: string, port?: string, pathname?: string, search?: string, hash?: string, slashes?: boolean }} objURL\n * @returns {string}\n */\nfunction format(objURL) {\n  var protocol = objURL.protocol || \"\";\n\n  if (protocol && protocol.substr(-1) !== \":\") {\n    protocol += \":\";\n  }\n\n  var auth = objURL.auth || \"\";\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, \":\");\n    auth += \"@\";\n  }\n\n  var host = \"\";\n\n  if (objURL.hostname) {\n    host = auth + (objURL.hostname.indexOf(\":\") === -1 ? objURL.hostname : \"[\".concat(objURL.hostname, \"]\"));\n\n    if (objURL.port) {\n      host += \":\".concat(objURL.port);\n    }\n  }\n\n  var pathname = objURL.pathname || \"\";\n\n  if (objURL.slashes) {\n    host = \"//\".concat(host || \"\");\n\n    if (pathname && pathname.charAt(0) !== \"/\") {\n      pathname = \"/\".concat(pathname);\n    }\n  } else if (!host) {\n    host = \"\";\n  }\n\n  var search = objURL.search || \"\";\n\n  if (search && search.charAt(0) !== \"?\") {\n    search = \"?\".concat(search);\n  }\n\n  var hash = objURL.hash || \"\";\n\n  if (hash && hash.charAt(0) !== \"#\") {\n    hash = \"#\".concat(hash);\n  }\n\n  pathname = pathname.replace(/[?#]/g,\n  /**\n   * @param {string} match\n   * @returns {string}\n   */\n  function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace(\"#\", \"%23\");\n  return \"\".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);\n}\n/**\n * @param {URL & { fromCurrentScript?: boolean }} parsedURL\n * @returns {string}\n */\n\n\nfunction createSocketURL(parsedURL) {\n  var hostname = parsedURL.hostname; // Node.js module parses it as `::`\n  // `new URL(urlString, [baseURLString])` parses it as '[::]'\n\n  var isInAddrAny = hostname === \"0.0.0.0\" || hostname === \"::\" || hostname === \"[::]\"; // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n\n  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf(\"http\") === 0) {\n    hostname = self.location.hostname;\n  }\n\n  var socketURLProtocol = parsedURL.protocol || self.location.protocol; // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.\n\n  if (socketURLProtocol === \"auto:\" || hostname && isInAddrAny && self.location.protocol === \"https:\") {\n    socketURLProtocol = self.location.protocol;\n  }\n\n  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, \"ws\");\n  var socketURLAuth = \"\"; // `new URL(urlString, [baseURLstring])` doesn't have `auth` property\n  // Parse authentication credentials in case we need them\n\n  if (parsedURL.username) {\n    socketURLAuth = parsedURL.username; // Since HTTP basic authentication does not allow empty username,\n    // we only include password if the username is not empty.\n\n    if (parsedURL.password) {\n      // Result: <username>:<password>\n      socketURLAuth = socketURLAuth.concat(\":\", parsedURL.password);\n    }\n  } // In case the host is a raw IPv6 address, it can be enclosed in\n  // the brackets as the brackets are needed in the final URL string.\n  // Need to remove those as url.format blindly adds its own set of brackets\n  // if the host string contains colons. That would lead to non-working\n  // double brackets (e.g. [[::]]) host\n  //\n  // All of these web socket url params are optionally passed in through resourceQuery,\n  // so we need to fall back to the default if they are not provided\n\n\n  var socketURLHostname = (hostname || self.location.hostname || \"localhost\").replace(/^\\[(.*)\\]$/, \"$1\");\n  var socketURLPort = parsedURL.port;\n\n  if (!socketURLPort || socketURLPort === \"0\") {\n    socketURLPort = self.location.port;\n  } // If path is provided it'll be passed in via the resourceQuery as a\n  // query param so it has to be parsed out of the querystring in order for the\n  // client to open the socket to the correct location.\n\n\n  var socketURLPathname = \"/ws\";\n\n  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {\n    socketURLPathname = parsedURL.pathname;\n  }\n\n  return format({\n    protocol: socketURLProtocol,\n    auth: socketURLAuth,\n    hostname: socketURLHostname,\n    port: socketURLPort,\n    pathname: socketURLPathname,\n    slashes: true\n  });\n}\n\nexport default createSocketURL;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/webpack-dev-server/client/utils/createSocketURL.js"],"names":["format","objURL","protocol","substr","auth","encodeURIComponent","replace","host","hostname","indexOf","concat","port","pathname","slashes","charAt","search","hash","match","createSocketURL","parsedURL","isInAddrAny","self","location","socketURLProtocol","socketURLAuth","username","password","socketURLHostname","socketURLPort","socketURLPathname","fromCurrentScript"],"mappings":"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","sourcesContent":["/**\n * @param {{ protocol?: string, auth?: string, hostname?: string, port?: string, pathname?: string, search?: string, hash?: string, slashes?: boolean }} objURL\n * @returns {string}\n */\nfunction format(objURL) {\n  var protocol = objURL.protocol || \"\";\n\n  if (protocol && protocol.substr(-1) !== \":\") {\n    protocol += \":\";\n  }\n\n  var auth = objURL.auth || \"\";\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, \":\");\n    auth += \"@\";\n  }\n\n  var host = \"\";\n\n  if (objURL.hostname) {\n    host = auth + (objURL.hostname.indexOf(\":\") === -1 ? objURL.hostname : \"[\".concat(objURL.hostname, \"]\"));\n\n    if (objURL.port) {\n      host += \":\".concat(objURL.port);\n    }\n  }\n\n  var pathname = objURL.pathname || \"\";\n\n  if (objURL.slashes) {\n    host = \"//\".concat(host || \"\");\n\n    if (pathname && pathname.charAt(0) !== \"/\") {\n      pathname = \"/\".concat(pathname);\n    }\n  } else if (!host) {\n    host = \"\";\n  }\n\n  var search = objURL.search || \"\";\n\n  if (search && search.charAt(0) !== \"?\") {\n    search = \"?\".concat(search);\n  }\n\n  var hash = objURL.hash || \"\";\n\n  if (hash && hash.charAt(0) !== \"#\") {\n    hash = \"#\".concat(hash);\n  }\n\n  pathname = pathname.replace(/[?#]/g,\n  /**\n   * @param {string} match\n   * @returns {string}\n   */\n  function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace(\"#\", \"%23\");\n  return \"\".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);\n}\n/**\n * @param {URL & { fromCurrentScript?: boolean }} parsedURL\n * @returns {string}\n */\n\n\nfunction createSocketURL(parsedURL) {\n  var hostname = parsedURL.hostname; // Node.js module parses it as `::`\n  // `new URL(urlString, [baseURLString])` parses it as '[::]'\n\n  var isInAddrAny = hostname === \"0.0.0.0\" || hostname === \"::\" || hostname === \"[::]\"; // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n\n  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf(\"http\") === 0) {\n    hostname = self.location.hostname;\n  }\n\n  var socketURLProtocol = parsedURL.protocol || self.location.protocol; // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.\n\n  if (socketURLProtocol === \"auto:\" || hostname && isInAddrAny && self.location.protocol === \"https:\") {\n    socketURLProtocol = self.location.protocol;\n  }\n\n  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, \"ws\");\n  var socketURLAuth = \"\"; // `new URL(urlString, [baseURLstring])` doesn't have `auth` property\n  // Parse authentication credentials in case we need them\n\n  if (parsedURL.username) {\n    socketURLAuth = parsedURL.username; // Since HTTP basic authentication does not allow empty username,\n    // we only include password if the username is not empty.\n\n    if (parsedURL.password) {\n      // Result: <username>:<password>\n      socketURLAuth = socketURLAuth.concat(\":\", parsedURL.password);\n    }\n  } // In case the host is a raw IPv6 address, it can be enclosed in\n  // the brackets as the brackets are needed in the final URL string.\n  // Need to remove those as url.format blindly adds its own set of brackets\n  // if the host string contains colons. That would lead to non-working\n  // double brackets (e.g. [[::]]) host\n  //\n  // All of these web socket url params are optionally passed in through resourceQuery,\n  // so we need to fall back to the default if they are not provided\n\n\n  var socketURLHostname = (hostname || self.location.hostname || \"localhost\").replace(/^\\[(.*)\\]$/, \"$1\");\n  var socketURLPort = parsedURL.port;\n\n  if (!socketURLPort || socketURLPort === \"0\") {\n    socketURLPort = self.location.port;\n  } // If path is provided it'll be passed in via the resourceQuery as a\n  // query param so it has to be parsed out of the querystring in order for the\n  // client to open the socket to the correct location.\n\n\n  var socketURLPathname = \"/ws\";\n\n  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {\n    socketURLPathname = parsedURL.pathname;\n  }\n\n  return format({\n    protocol: socketURLProtocol,\n    auth: socketURLAuth,\n    hostname: socketURLHostname,\n    port: socketURLPort,\n    pathname: socketURLPathname,\n    slashes: true\n  });\n}\n\nexport default createSocketURL;"]},"metadata":{},"sourceType":"module"}