{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport padStart from 'lodash/padStart'; // Countdown\n\nvar timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1] // million seconds\n];\nexport function formatTimeStr(duration, format) {\n  var leftDuration = duration;\n  var escapeRegex = /\\[[^\\]]*]/g;\n  var keepList = (format.match(escapeRegex) || []).map(function (str) {\n    return str.slice(1, -1);\n  });\n  var templateText = format.replace(escapeRegex, '[]');\n  var replacedText = timeUnits.reduce(function (current, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        unit = _ref2[1];\n\n    if (current.indexOf(name) !== -1) {\n      var value = Math.floor(leftDuration / unit);\n      leftDuration -= value * unit;\n      return current.replace(new RegExp(\"\".concat(name, \"+\"), 'g'), function (match) {\n        var len = match.length;\n        return padStart(value.toString(), len, '0');\n      });\n    }\n\n    return current;\n  }, templateText);\n  var index = 0;\n  return replacedText.replace(escapeRegex, function () {\n    var match = keepList[index];\n    index += 1;\n    return match;\n  });\n}\nexport function formatCountdown(value, config) {\n  var _config$format = config.format,\n      format = _config$format === void 0 ? '' : _config$format;\n  var target = new Date(value).getTime();\n  var current = Date.now();\n  var diff = Math.max(target - current, 0);\n  return formatTimeStr(diff, format);\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/antd/es/statistic/utils.js"],"names":["_slicedToArray","padStart","timeUnits","formatTimeStr","duration","format","leftDuration","escapeRegex","keepList","match","map","str","slice","templateText","replace","replacedText","reduce","current","_ref","_ref2","name","unit","indexOf","value","Math","floor","RegExp","concat","len","length","toString","index","formatCountdown","config","_config$format","target","Date","getTime","now","diff","max"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport padStart from 'lodash/padStart'; // Countdown\n\nvar timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1] // million seconds\n];\nexport function formatTimeStr(duration, format) {\n  var leftDuration = duration;\n  var escapeRegex = /\\[[^\\]]*]/g;\n  var keepList = (format.match(escapeRegex) || []).map(function (str) {\n    return str.slice(1, -1);\n  });\n  var templateText = format.replace(escapeRegex, '[]');\n  var replacedText = timeUnits.reduce(function (current, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        unit = _ref2[1];\n\n    if (current.indexOf(name) !== -1) {\n      var value = Math.floor(leftDuration / unit);\n      leftDuration -= value * unit;\n      return current.replace(new RegExp(\"\".concat(name, \"+\"), 'g'), function (match) {\n        var len = match.length;\n        return padStart(value.toString(), len, '0');\n      });\n    }\n\n    return current;\n  }, templateText);\n  var index = 0;\n  return replacedText.replace(escapeRegex, function () {\n    var match = keepList[index];\n    index += 1;\n    return match;\n  });\n}\nexport function formatCountdown(value, config) {\n  var _config$format = config.format,\n      format = _config$format === void 0 ? '' : _config$format;\n  var target = new Date(value).getTime();\n  var current = Date.now();\n  var diff = Math.max(target - current, 0);\n  return formatTimeStr(diff, format);\n}"]},"metadata":{},"sourceType":"module"}