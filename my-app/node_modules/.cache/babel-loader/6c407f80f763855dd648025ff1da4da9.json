{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default function useSyncState(defaultState, onChange) {\n  var stateRef = React.useRef(defaultState);\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  function setState(updater) {\n    var newValue = typeof updater === 'function' ? updater(stateRef.current) : updater;\n\n    if (newValue !== stateRef.current) {\n      onChange(newValue, stateRef.current);\n    }\n\n    stateRef.current = newValue;\n    forceUpdate({});\n  }\n\n  return [stateRef.current, setState];\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-tabs/es/hooks/useSyncState.js"],"names":["_slicedToArray","React","useSyncState","defaultState","onChange","stateRef","useRef","_React$useState","useState","_React$useState2","forceUpdate","setState","updater","newValue","current"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,eAAe,SAASC,YAAT,CAAsBC,YAAtB,EAAoCC,QAApC,EAA8C;AAC3D,MAAIC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAaH,YAAb,CAAf;;AAEA,MAAII,eAAe,GAAGN,KAAK,CAACO,QAAN,CAAe,EAAf,CAAtB;AAAA,MACIC,gBAAgB,GAAGT,cAAc,CAACO,eAAD,EAAkB,CAAlB,CADrC;AAAA,MAEIG,WAAW,GAAGD,gBAAgB,CAAC,CAAD,CAFlC;;AAIA,WAASE,QAAT,CAAkBC,OAAlB,EAA2B;AACzB,QAAIC,QAAQ,GAAG,OAAOD,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAACP,QAAQ,CAACS,OAAV,CAAvC,GAA4DF,OAA3E;;AAEA,QAAIC,QAAQ,KAAKR,QAAQ,CAACS,OAA1B,EAAmC;AACjCV,MAAAA,QAAQ,CAACS,QAAD,EAAWR,QAAQ,CAACS,OAApB,CAAR;AACD;;AAEDT,IAAAA,QAAQ,CAACS,OAAT,GAAmBD,QAAnB;AACAH,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD;;AAED,SAAO,CAACL,QAAQ,CAACS,OAAV,EAAmBH,QAAnB,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default function useSyncState(defaultState, onChange) {\n  var stateRef = React.useRef(defaultState);\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  function setState(updater) {\n    var newValue = typeof updater === 'function' ? updater(stateRef.current) : updater;\n\n    if (newValue !== stateRef.current) {\n      onChange(newValue, stateRef.current);\n    }\n\n    stateRef.current = newValue;\n    forceUpdate({});\n  }\n\n  return [stateRef.current, setState];\n}"]},"metadata":{},"sourceType":"module"}