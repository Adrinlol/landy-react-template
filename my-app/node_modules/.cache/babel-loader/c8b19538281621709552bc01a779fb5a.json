{"ast":null,"code":"import { supportBigInt } from './supportUtil';\n/**\n * Format string number to readable number\n */\n\nexport function trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith('-');\n\n  if (negative) {\n    str = str.slice(1);\n  }\n\n  str = str // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1') // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '') // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n\n  if (str.startsWith('.')) {\n    str = \"0\".concat(str);\n  }\n\n  var trimStr = str || '0';\n  var splitNumber = trimStr.split('.');\n  var integerStr = splitNumber[0] || '0';\n  var decimalStr = splitNumber[1] || '0';\n\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n\n  var negativeStr = negative ? '-' : '';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: \"\".concat(negativeStr).concat(trimStr)\n  };\n}\nexport function isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\n\nexport function getNumberPrecision(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n\n    if (decimalMatch === null || decimalMatch === void 0 ? void 0 : decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n\n    return precision;\n  }\n\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\n\nexport function num2str(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n\n  return trimNumber(numStr).fullStr;\n}\nexport function validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  } // Empty\n\n\n  if (!num) {\n    return false;\n  }\n\n  return (// Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) || // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) || // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-input-number/es/utils/numberUtil.js"],"names":["supportBigInt","trimNumber","numStr","str","trim","negative","startsWith","slice","replace","concat","trimStr","splitNumber","split","integerStr","decimalStr","negativeStr","fullStr","isE","number","String","Number","isNaN","includes","getNumberPrecision","precision","indexOf","decimalMatch","match","length","validateNumber","num2str","MAX_SAFE_INTEGER","BigInt","toString","MIN_SAFE_INTEGER","toFixed","num","test"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACjC,MAAIC,GAAG,GAAGD,MAAM,CAACE,IAAP,EAAV;AACA,MAAIC,QAAQ,GAAGF,GAAG,CAACG,UAAJ,CAAe,GAAf,CAAf;;AAEA,MAAID,QAAJ,EAAc;AACZF,IAAAA,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAN;AACD;;AAEDJ,EAAAA,GAAG,GAAGA,GAAG,CAAC;AAAD,GACRK,OADK,CACG,gBADH,EACqB,IADrB,EAC2B;AAD3B,GAELA,OAFK,CAEG,OAFH,EAEY,EAFZ,EAEgB;AAFhB,GAGLA,OAHK,CAGG,KAHH,EAGU,EAHV,CAAN;;AAKA,MAAIL,GAAG,CAACG,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AACvBH,IAAAA,GAAG,GAAG,IAAIM,MAAJ,CAAWN,GAAX,CAAN;AACD;;AAED,MAAIO,OAAO,GAAGP,GAAG,IAAI,GAArB;AACA,MAAIQ,WAAW,GAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAlB;AACA,MAAIC,UAAU,GAAGF,WAAW,CAAC,CAAD,CAAX,IAAkB,GAAnC;AACA,MAAIG,UAAU,GAAGH,WAAW,CAAC,CAAD,CAAX,IAAkB,GAAnC;;AAEA,MAAIE,UAAU,KAAK,GAAf,IAAsBC,UAAU,KAAK,GAAzC,EAA8C;AAC5CT,IAAAA,QAAQ,GAAG,KAAX;AACD;;AAED,MAAIU,WAAW,GAAGV,QAAQ,GAAG,GAAH,GAAS,EAAnC;AACA,SAAO;AACLA,IAAAA,QAAQ,EAAEA,QADL;AAELU,IAAAA,WAAW,EAAEA,WAFR;AAGLL,IAAAA,OAAO,EAAEA,OAHJ;AAILG,IAAAA,UAAU,EAAEA,UAJP;AAKLC,IAAAA,UAAU,EAAEA,UALP;AAMLE,IAAAA,OAAO,EAAE,GAAGP,MAAH,CAAUM,WAAV,EAAuBN,MAAvB,CAA8BC,OAA9B;AANJ,GAAP;AAQD;AACD,OAAO,SAASO,GAAT,CAAaC,MAAb,EAAqB;AAC1B,MAAIf,GAAG,GAAGgB,MAAM,CAACD,MAAD,CAAhB;AACA,SAAO,CAACE,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACjB,GAAD,CAAnB,CAAD,IAA8BA,GAAG,CAACmB,QAAJ,CAAa,GAAb,CAArC;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BL,MAA5B,EAAoC;AACzC,MAAIhB,MAAM,GAAGiB,MAAM,CAACD,MAAD,CAAnB;;AAEA,MAAID,GAAG,CAACC,MAAD,CAAP,EAAiB;AACf,QAAIM,SAAS,GAAGJ,MAAM,CAAClB,MAAM,CAACK,KAAP,CAAaL,MAAM,CAACuB,OAAP,CAAe,IAAf,IAAuB,CAApC,CAAD,CAAtB;AACA,QAAIC,YAAY,GAAGxB,MAAM,CAACyB,KAAP,CAAa,SAAb,CAAnB;;AAEA,QAAID,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAAC,CAAD,CAA5E,EAAiF;AAC/EF,MAAAA,SAAS,IAAIE,YAAY,CAAC,CAAD,CAAZ,CAAgBE,MAA7B;AACD;;AAED,WAAOJ,SAAP;AACD;;AAED,SAAOtB,MAAM,CAACoB,QAAP,CAAgB,GAAhB,KAAwBO,cAAc,CAAC3B,MAAD,CAAtC,GAAiDA,MAAM,CAAC0B,MAAP,GAAgB1B,MAAM,CAACuB,OAAP,CAAe,GAAf,CAAhB,GAAsC,CAAvF,GAA2F,CAAlG;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASK,OAAT,CAAiBZ,MAAjB,EAAyB;AAC9B,MAAIhB,MAAM,GAAGiB,MAAM,CAACD,MAAD,CAAnB;;AAEA,MAAID,GAAG,CAACC,MAAD,CAAP,EAAiB;AACf,QAAIA,MAAM,GAAGE,MAAM,CAACW,gBAApB,EAAsC;AACpC,aAAOZ,MAAM,CAACnB,aAAa,KAAKgC,MAAM,CAACd,MAAD,CAAN,CAAee,QAAf,EAAL,GAAiCb,MAAM,CAACW,gBAAtD,CAAb;AACD;;AAED,QAAIb,MAAM,GAAGE,MAAM,CAACc,gBAApB,EAAsC;AACpC,aAAOf,MAAM,CAACnB,aAAa,KAAKgC,MAAM,CAACd,MAAD,CAAN,CAAee,QAAf,EAAL,GAAiCb,MAAM,CAACc,gBAAtD,CAAb;AACD;;AAEDhC,IAAAA,MAAM,GAAGgB,MAAM,CAACiB,OAAP,CAAeZ,kBAAkB,CAACrB,MAAD,CAAjC,CAAT;AACD;;AAED,SAAOD,UAAU,CAACC,MAAD,CAAV,CAAmBc,OAA1B;AACD;AACD,OAAO,SAASa,cAAT,CAAwBO,GAAxB,EAA6B;AAClC,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAO,CAAChB,MAAM,CAACC,KAAP,CAAae,GAAb,CAAR;AACD,GAHiC,CAGhC;;;AAGF,MAAI,CAACA,GAAL,EAAU;AACR,WAAO,KAAP;AACD;;AAED,SAAQ;AACN,4BAAwBC,IAAxB,CAA6BD,GAA7B,KAAqC;AACrC,sBAAkBC,IAAlB,CAAuBD,GAAvB,CADA,IAC+B;AAC/B,sBAAkBC,IAAlB,CAAuBD,GAAvB;AAHF;AAKD","sourcesContent":["import { supportBigInt } from './supportUtil';\n/**\n * Format string number to readable number\n */\n\nexport function trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith('-');\n\n  if (negative) {\n    str = str.slice(1);\n  }\n\n  str = str // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1') // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '') // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n\n  if (str.startsWith('.')) {\n    str = \"0\".concat(str);\n  }\n\n  var trimStr = str || '0';\n  var splitNumber = trimStr.split('.');\n  var integerStr = splitNumber[0] || '0';\n  var decimalStr = splitNumber[1] || '0';\n\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n\n  var negativeStr = negative ? '-' : '';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: \"\".concat(negativeStr).concat(trimStr)\n  };\n}\nexport function isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\n\nexport function getNumberPrecision(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n\n    if (decimalMatch === null || decimalMatch === void 0 ? void 0 : decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n\n    return precision;\n  }\n\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\n\nexport function num2str(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n\n  return trimNumber(numStr).fullStr;\n}\nexport function validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  } // Empty\n\n\n  if (!num) {\n    return false;\n  }\n\n  return (// Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) || // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) || // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}"]},"metadata":{},"sourceType":"module"}