{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\n\nfunction cuttable(node) {\n  var type = _typeof(node);\n\n  return type === 'string' || type === 'number';\n}\n\nfunction getNodesLen(nodeList) {\n  var totalLen = 0;\n  nodeList.forEach(function (node) {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\n\nfunction sliceNodes(nodeList, len) {\n  var currLen = 0;\n  var currentNodeList = [];\n\n  for (var i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n\n    var node = nodeList[i];\n    var canCut = cuttable(node);\n    var nodeLen = canCut ? String(node).length : 1;\n    var nextLen = currLen + nodeLen; // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n\n    if (nextLen > len) {\n      var restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n\n  return nodeList;\n}\n\nvar NONE = 0;\nvar PREPARE = 1;\nvar WALKING = 2;\nvar DONE_WITH_ELLIPSIS = 3;\nvar DONE_WITHOUT_ELLIPSIS = 4;\n\nvar Ellipsis = function Ellipsis(_ref) {\n  var enabledMeasure = _ref.enabledMeasure,\n      children = _ref.children,\n      text = _ref.text,\n      width = _ref.width,\n      rows = _ref.rows,\n      onEllipsis = _ref.onEllipsis;\n\n  var _React$useState = React.useState([0, 0, 0]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cutLength = _React$useState2[0],\n      setCutLength = _React$useState2[1];\n\n  var _React$useState3 = React.useState(NONE),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      walkingState = _React$useState4[0],\n      setWalkingState = _React$useState4[1];\n\n  var _cutLength = _slicedToArray(cutLength, 3),\n      startLen = _cutLength[0],\n      midLen = _cutLength[1],\n      endLen = _cutLength[2];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      singleRowHeight = _React$useState6[0],\n      setSingleRowHeight = _React$useState6[1];\n\n  var singleRowRef = React.useRef(null);\n  var midRowRef = React.useRef(null);\n  var nodeList = React.useMemo(function () {\n    return toArray(text);\n  }, [text]);\n  var totalLen = React.useMemo(function () {\n    return getNodesLen(nodeList);\n  }, [nodeList]);\n  var mergedChildren = React.useMemo(function () {\n    if (!enabledMeasure || walkingState !== DONE_WITH_ELLIPSIS) {\n      return children(nodeList, false);\n    }\n\n    return children(sliceNodes(nodeList, midLen), midLen < totalLen);\n  }, [enabledMeasure, walkingState, children, nodeList, midLen, totalLen]); // ======================== Walk ========================\n\n  React.useLayoutEffect(function () {\n    if (enabledMeasure && width && totalLen) {\n      setWalkingState(PREPARE);\n      setCutLength([0, Math.ceil(totalLen / 2), totalLen]);\n    }\n  }, [enabledMeasure, width, text, totalLen, rows]);\n  React.useLayoutEffect(function () {\n    var _a;\n\n    if (walkingState === PREPARE) {\n      setSingleRowHeight(((_a = singleRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0);\n    }\n  }, [walkingState]);\n  React.useLayoutEffect(function () {\n    var _a, _b;\n\n    if (singleRowHeight) {\n      if (walkingState === PREPARE) {\n        // Ignore if position is enough\n        var midHeight = ((_a = midRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;\n        var maxHeight = rows * singleRowHeight;\n\n        if (midHeight <= maxHeight) {\n          setWalkingState(DONE_WITHOUT_ELLIPSIS);\n          onEllipsis(false);\n        } else {\n          setWalkingState(WALKING);\n        }\n      } else if (walkingState === WALKING) {\n        if (startLen !== endLen) {\n          var _midHeight = ((_b = midRowRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0;\n\n          var _maxHeight = rows * singleRowHeight;\n\n          var nextStartLen = startLen;\n          var nextEndLen = endLen; // We reach the last round\n\n          if (startLen === endLen - 1) {\n            nextEndLen = startLen;\n          } else if (_midHeight <= _maxHeight) {\n            nextStartLen = midLen;\n          } else {\n            nextEndLen = midLen;\n          }\n\n          var nextMidLen = Math.ceil((nextStartLen + nextEndLen) / 2);\n          setCutLength([nextStartLen, nextMidLen, nextEndLen]);\n        } else {\n          setWalkingState(DONE_WITH_ELLIPSIS);\n          onEllipsis(true);\n        }\n      }\n    }\n  }, [walkingState, startLen, endLen, rows, singleRowHeight]); // ======================= Render =======================\n\n  var measureStyle = {\n    width: width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n\n  var renderMeasure = function renderMeasure(content, ref, style) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-hidden\": true,\n      ref: ref,\n      style: _extends({\n        position: 'fixed',\n        display: 'block',\n        left: 0,\n        top: 0,\n        zIndex: -9999,\n        visibility: 'hidden',\n        pointerEvents: 'none'\n      }, style)\n    }, content);\n  };\n\n  var renderMeasureSlice = function renderMeasureSlice(len, ref) {\n    var sliceNodeList = sliceNodes(nodeList, len);\n    return renderMeasure(children(sliceNodeList, true), ref, measureStyle);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mergedChildren, enabledMeasure && walkingState !== DONE_WITH_ELLIPSIS && walkingState !== DONE_WITHOUT_ELLIPSIS && /*#__PURE__*/React.createElement(React.Fragment, null, renderMeasure('lg', singleRowRef, {\n    width: 9999\n  }), walkingState === PREPARE ? renderMeasure(children(nodeList, false), midRowRef, measureStyle) : renderMeasureSlice(midLen, midRowRef)));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Ellipsis.displayName = 'Ellipsis';\n}\n\nexport default Ellipsis;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/antd/es/typography/Base/Ellipsis.js"],"names":["_extends","_slicedToArray","_typeof","React","toArray","cuttable","node","type","getNodesLen","nodeList","totalLen","forEach","String","length","sliceNodes","len","currLen","currentNodeList","i","canCut","nodeLen","nextLen","restLen","push","slice","NONE","PREPARE","WALKING","DONE_WITH_ELLIPSIS","DONE_WITHOUT_ELLIPSIS","Ellipsis","_ref","enabledMeasure","children","text","width","rows","onEllipsis","_React$useState","useState","_React$useState2","cutLength","setCutLength","_React$useState3","_React$useState4","walkingState","setWalkingState","_cutLength","startLen","midLen","endLen","_React$useState5","_React$useState6","singleRowHeight","setSingleRowHeight","singleRowRef","useRef","midRowRef","useMemo","mergedChildren","useLayoutEffect","Math","ceil","_a","current","offsetHeight","_b","midHeight","maxHeight","_midHeight","_maxHeight","nextStartLen","nextEndLen","nextMidLen","measureStyle","whiteSpace","margin","padding","renderMeasure","content","ref","style","createElement","position","display","left","top","zIndex","visibility","pointerEvents","renderMeasureSlice","sliceNodeList","Fragment","process","env","NODE_ENV","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\n\nfunction cuttable(node) {\n  var type = _typeof(node);\n\n  return type === 'string' || type === 'number';\n}\n\nfunction getNodesLen(nodeList) {\n  var totalLen = 0;\n  nodeList.forEach(function (node) {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\n\nfunction sliceNodes(nodeList, len) {\n  var currLen = 0;\n  var currentNodeList = [];\n\n  for (var i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n\n    var node = nodeList[i];\n    var canCut = cuttable(node);\n    var nodeLen = canCut ? String(node).length : 1;\n    var nextLen = currLen + nodeLen; // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n\n    if (nextLen > len) {\n      var restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n\n  return nodeList;\n}\n\nvar NONE = 0;\nvar PREPARE = 1;\nvar WALKING = 2;\nvar DONE_WITH_ELLIPSIS = 3;\nvar DONE_WITHOUT_ELLIPSIS = 4;\n\nvar Ellipsis = function Ellipsis(_ref) {\n  var enabledMeasure = _ref.enabledMeasure,\n      children = _ref.children,\n      text = _ref.text,\n      width = _ref.width,\n      rows = _ref.rows,\n      onEllipsis = _ref.onEllipsis;\n\n  var _React$useState = React.useState([0, 0, 0]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cutLength = _React$useState2[0],\n      setCutLength = _React$useState2[1];\n\n  var _React$useState3 = React.useState(NONE),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      walkingState = _React$useState4[0],\n      setWalkingState = _React$useState4[1];\n\n  var _cutLength = _slicedToArray(cutLength, 3),\n      startLen = _cutLength[0],\n      midLen = _cutLength[1],\n      endLen = _cutLength[2];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      singleRowHeight = _React$useState6[0],\n      setSingleRowHeight = _React$useState6[1];\n\n  var singleRowRef = React.useRef(null);\n  var midRowRef = React.useRef(null);\n  var nodeList = React.useMemo(function () {\n    return toArray(text);\n  }, [text]);\n  var totalLen = React.useMemo(function () {\n    return getNodesLen(nodeList);\n  }, [nodeList]);\n  var mergedChildren = React.useMemo(function () {\n    if (!enabledMeasure || walkingState !== DONE_WITH_ELLIPSIS) {\n      return children(nodeList, false);\n    }\n\n    return children(sliceNodes(nodeList, midLen), midLen < totalLen);\n  }, [enabledMeasure, walkingState, children, nodeList, midLen, totalLen]); // ======================== Walk ========================\n\n  React.useLayoutEffect(function () {\n    if (enabledMeasure && width && totalLen) {\n      setWalkingState(PREPARE);\n      setCutLength([0, Math.ceil(totalLen / 2), totalLen]);\n    }\n  }, [enabledMeasure, width, text, totalLen, rows]);\n  React.useLayoutEffect(function () {\n    var _a;\n\n    if (walkingState === PREPARE) {\n      setSingleRowHeight(((_a = singleRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0);\n    }\n  }, [walkingState]);\n  React.useLayoutEffect(function () {\n    var _a, _b;\n\n    if (singleRowHeight) {\n      if (walkingState === PREPARE) {\n        // Ignore if position is enough\n        var midHeight = ((_a = midRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;\n        var maxHeight = rows * singleRowHeight;\n\n        if (midHeight <= maxHeight) {\n          setWalkingState(DONE_WITHOUT_ELLIPSIS);\n          onEllipsis(false);\n        } else {\n          setWalkingState(WALKING);\n        }\n      } else if (walkingState === WALKING) {\n        if (startLen !== endLen) {\n          var _midHeight = ((_b = midRowRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0;\n\n          var _maxHeight = rows * singleRowHeight;\n\n          var nextStartLen = startLen;\n          var nextEndLen = endLen; // We reach the last round\n\n          if (startLen === endLen - 1) {\n            nextEndLen = startLen;\n          } else if (_midHeight <= _maxHeight) {\n            nextStartLen = midLen;\n          } else {\n            nextEndLen = midLen;\n          }\n\n          var nextMidLen = Math.ceil((nextStartLen + nextEndLen) / 2);\n          setCutLength([nextStartLen, nextMidLen, nextEndLen]);\n        } else {\n          setWalkingState(DONE_WITH_ELLIPSIS);\n          onEllipsis(true);\n        }\n      }\n    }\n  }, [walkingState, startLen, endLen, rows, singleRowHeight]); // ======================= Render =======================\n\n  var measureStyle = {\n    width: width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n\n  var renderMeasure = function renderMeasure(content, ref, style) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-hidden\": true,\n      ref: ref,\n      style: _extends({\n        position: 'fixed',\n        display: 'block',\n        left: 0,\n        top: 0,\n        zIndex: -9999,\n        visibility: 'hidden',\n        pointerEvents: 'none'\n      }, style)\n    }, content);\n  };\n\n  var renderMeasureSlice = function renderMeasureSlice(len, ref) {\n    var sliceNodeList = sliceNodes(nodeList, len);\n    return renderMeasure(children(sliceNodeList, true), ref, measureStyle);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mergedChildren, enabledMeasure && walkingState !== DONE_WITH_ELLIPSIS && walkingState !== DONE_WITHOUT_ELLIPSIS && /*#__PURE__*/React.createElement(React.Fragment, null, renderMeasure('lg', singleRowRef, {\n    width: 9999\n  }), walkingState === PREPARE ? renderMeasure(children(nodeList, false), midRowRef, measureStyle) : renderMeasureSlice(midLen, midRowRef)));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Ellipsis.displayName = 'Ellipsis';\n}\n\nexport default Ellipsis;"]},"metadata":{},"sourceType":"module"}