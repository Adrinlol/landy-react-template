{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport warning from \"rc-util/es/warning\";\nimport { isNil } from '../utils/valueUtil';\nexport default (function (treeData, fieldNames) {\n  return React.useMemo(function () {\n    var collection = convertDataToEntities(treeData, {\n      fieldNames: fieldNames,\n      initWrapper: function initWrapper(wrapper) {\n        return _objectSpread(_objectSpread({}, wrapper), {}, {\n          valueEntities: new Map()\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var val = entity.node[fieldNames.value]; // Check if exist same value\n\n        if (process.env.NODE_ENV !== 'production') {\n          var key = entity.node.key;\n          warning(!isNil(val), 'TreeNode `value` is invalidate: undefined');\n          warning(!wrapper.valueEntities.has(val), \"Same `value` exist in the tree: \".concat(val));\n          warning(!key || String(key) === String(val), \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(val, \".\"));\n        }\n\n        wrapper.valueEntities.set(val, entity);\n      }\n    });\n    return collection;\n  }, [treeData, fieldNames]);\n});","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-tree-select/es/hooks/useDataEntities.js"],"names":["_objectSpread","React","convertDataToEntities","warning","isNil","treeData","fieldNames","useMemo","collection","initWrapper","wrapper","valueEntities","Map","processEntity","entity","val","node","value","process","env","NODE_ENV","key","has","concat","String","set"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,0CAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,2BAAtC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,gBAAgB,UAAUC,QAAV,EAAoBC,UAApB,EAAgC;AAC9C,SAAOL,KAAK,CAACM,OAAN,CAAc,YAAY;AAC/B,QAAIC,UAAU,GAAGN,qBAAqB,CAACG,QAAD,EAAW;AAC/CC,MAAAA,UAAU,EAAEA,UADmC;AAE/CG,MAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBC,OAArB,EAA8B;AACzC,eAAOV,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKU,OAAL,CAAd,EAA6B,EAA7B,EAAiC;AACnDC,UAAAA,aAAa,EAAE,IAAIC,GAAJ;AADoC,SAAjC,CAApB;AAGD,OAN8C;AAO/CC,MAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,MAAvB,EAA+BJ,OAA/B,EAAwC;AACrD,YAAIK,GAAG,GAAGD,MAAM,CAACE,IAAP,CAAYV,UAAU,CAACW,KAAvB,CAAV,CADqD,CACZ;;AAEzC,YAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,cAAIC,GAAG,GAAGP,MAAM,CAACE,IAAP,CAAYK,GAAtB;AACAlB,UAAAA,OAAO,CAAC,CAACC,KAAK,CAACW,GAAD,CAAP,EAAc,2CAAd,CAAP;AACAZ,UAAAA,OAAO,CAAC,CAACO,OAAO,CAACC,aAAR,CAAsBW,GAAtB,CAA0BP,GAA1B,CAAF,EAAkC,mCAAmCQ,MAAnC,CAA0CR,GAA1C,CAAlC,CAAP;AACAZ,UAAAA,OAAO,CAAC,CAACkB,GAAD,IAAQG,MAAM,CAACH,GAAD,CAAN,KAAgBG,MAAM,CAACT,GAAD,CAA/B,EAAsC,uFAAuFQ,MAAvF,CAA8FF,GAA9F,EAAmG,WAAnG,EAAgHE,MAAhH,CAAuHR,GAAvH,EAA4H,GAA5H,CAAtC,CAAP;AACD;;AAEDL,QAAAA,OAAO,CAACC,aAAR,CAAsBc,GAAtB,CAA0BV,GAA1B,EAA+BD,MAA/B;AACD;AAlB8C,KAAX,CAAtC;AAoBA,WAAON,UAAP;AACD,GAtBM,EAsBJ,CAACH,QAAD,EAAWC,UAAX,CAtBI,CAAP;AAuBD,CAxBD","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport warning from \"rc-util/es/warning\";\nimport { isNil } from '../utils/valueUtil';\nexport default (function (treeData, fieldNames) {\n  return React.useMemo(function () {\n    var collection = convertDataToEntities(treeData, {\n      fieldNames: fieldNames,\n      initWrapper: function initWrapper(wrapper) {\n        return _objectSpread(_objectSpread({}, wrapper), {}, {\n          valueEntities: new Map()\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var val = entity.node[fieldNames.value]; // Check if exist same value\n\n        if (process.env.NODE_ENV !== 'production') {\n          var key = entity.node.key;\n          warning(!isNil(val), 'TreeNode `value` is invalidate: undefined');\n          warning(!wrapper.valueEntities.has(val), \"Same `value` exist in the tree: \".concat(val));\n          warning(!key || String(key) === String(val), \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(val, \".\"));\n        }\n\n        wrapper.valueEntities.set(val, entity);\n      }\n    });\n    return collection;\n  }, [treeData, fieldNames]);\n});"]},"metadata":{},"sourceType":"module"}