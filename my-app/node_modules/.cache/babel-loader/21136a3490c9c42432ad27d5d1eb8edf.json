{"ast":null,"code":"export function allPromiseFinish(promiseList) {\n  var hasError = false;\n  var count = promiseList.length;\n  var results = [];\n\n  if (!promiseList.length) {\n    return Promise.resolve([]);\n  }\n\n  return new Promise(function (resolve, reject) {\n    promiseList.forEach(function (promise, index) {\n      promise.catch(function (e) {\n        hasError = true;\n        return e;\n      }).then(function (result) {\n        count -= 1;\n        results[index] = result;\n\n        if (count > 0) {\n          return;\n        }\n\n        if (hasError) {\n          reject(results);\n        }\n\n        resolve(results);\n      });\n    });\n  });\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-field-form/es/utils/asyncUtil.js"],"names":["allPromiseFinish","promiseList","hasError","count","length","results","Promise","resolve","reject","forEach","promise","index","catch","e","then","result"],"mappings":"AAAA,OAAO,SAASA,gBAAT,CAA0BC,WAA1B,EAAuC;AAC5C,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,KAAK,GAAGF,WAAW,CAACG,MAAxB;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAI,CAACJ,WAAW,CAACG,MAAjB,EAAyB;AACvB,WAAOE,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED,SAAO,IAAID,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CP,IAAAA,WAAW,CAACQ,OAAZ,CAAoB,UAAUC,OAAV,EAAmBC,KAAnB,EAA0B;AAC5CD,MAAAA,OAAO,CAACE,KAAR,CAAc,UAAUC,CAAV,EAAa;AACzBX,QAAAA,QAAQ,GAAG,IAAX;AACA,eAAOW,CAAP;AACD,OAHD,EAGGC,IAHH,CAGQ,UAAUC,MAAV,EAAkB;AACxBZ,QAAAA,KAAK,IAAI,CAAT;AACAE,QAAAA,OAAO,CAACM,KAAD,CAAP,GAAiBI,MAAjB;;AAEA,YAAIZ,KAAK,GAAG,CAAZ,EAAe;AACb;AACD;;AAED,YAAID,QAAJ,EAAc;AACZM,UAAAA,MAAM,CAACH,OAAD,CAAN;AACD;;AAEDE,QAAAA,OAAO,CAACF,OAAD,CAAP;AACD,OAhBD;AAiBD,KAlBD;AAmBD,GApBM,CAAP;AAqBD","sourcesContent":["export function allPromiseFinish(promiseList) {\n  var hasError = false;\n  var count = promiseList.length;\n  var results = [];\n\n  if (!promiseList.length) {\n    return Promise.resolve([]);\n  }\n\n  return new Promise(function (resolve, reject) {\n    promiseList.forEach(function (promise, index) {\n      promise.catch(function (e) {\n        hasError = true;\n        return e;\n      }).then(function (result) {\n        count -= 1;\n        results[index] = result;\n\n        if (count > 0) {\n          return;\n        }\n\n        if (hasError) {\n          reject(results);\n        }\n\n        resolve(results);\n      });\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}