{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nvar settle = require('./../core/settle');\n\nvar cookies = require('./../helpers/cookies');\n\nvar buildURL = require('./../helpers/buildURL');\n\nvar buildFullPath = require('../core/buildFullPath');\n\nvar parseHeaders = require('./../helpers/parseHeaders');\n\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\n\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest(); // HTTP basic authentication\n\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS\n\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      } // Prepare the response\n\n\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n      settle(resolve, reject, response); // Clean up request\n\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        } // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n\n\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        } // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n\n\n        setTimeout(onloadend);\n      };\n    } // Handle browser request cancellation (as opposed to a manual cancellation)\n\n\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request\n\n      request = null;\n    }; // Handle low level network errors\n\n\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request)); // Clean up request\n\n      request = null;\n    }; // Handle timeout\n\n\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n\n      reject(createError(timeoutErrorMessage, config, config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', request)); // Clean up request\n\n      request = null;\n    }; // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n\n\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    } // Add headers to the request\n\n\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    } // Add withCredentials to request if needed\n\n\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    } // Add responseType to request if needed\n\n\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    } // Handle progress if needed\n\n\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    } // Not all browsers support upload events\n\n\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel); // Clean up request\n\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    } // Send the request\n\n\n    request.send(requestData);\n  });\n};","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/axios/lib/adapters/xhr.js"],"names":["utils","require","settle","cookies","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","module","exports","xhrAdapter","config","Promise","dispatchXhrRequest","resolve","reject","requestData","data","requestHeaders","headers","responseType","isFormData","request","XMLHttpRequest","auth","username","password","unescape","encodeURIComponent","Authorization","btoa","fullPath","baseURL","url","open","method","toUpperCase","params","paramsSerializer","timeout","onloadend","responseHeaders","getAllResponseHeaders","responseData","responseText","response","status","statusText","onreadystatechange","handleLoad","readyState","responseURL","indexOf","setTimeout","onabort","handleAbort","onerror","handleError","ontimeout","handleTimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","isStandardBrowserEnv","xsrfValue","withCredentials","xsrfCookieName","read","undefined","xsrfHeaderName","forEach","setRequestHeader","val","key","toLowerCase","isUndefined","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","then","onCanceled","cancel","abort","send"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,uBAAD,CAAtB;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,uBAAD,CAA3B;;AACA,IAAIK,YAAY,GAAGL,OAAO,CAAC,2BAAD,CAA1B;;AACA,IAAIM,eAAe,GAAGN,OAAO,CAAC,8BAAD,CAA7B;;AACA,IAAIO,WAAW,GAAGP,OAAO,CAAC,qBAAD,CAAzB;;AAEAQ,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAC3C,SAAO,IAAIC,OAAJ,CAAY,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,MAArC,EAA6C;AAC9D,QAAIC,WAAW,GAAGL,MAAM,CAACM,IAAzB;AACA,QAAIC,cAAc,GAAGP,MAAM,CAACQ,OAA5B;AACA,QAAIC,YAAY,GAAGT,MAAM,CAACS,YAA1B;;AAEA,QAAIrB,KAAK,CAACsB,UAAN,CAAiBL,WAAjB,CAAJ,EAAmC;AACjC,aAAOE,cAAc,CAAC,cAAD,CAArB,CADiC,CACM;AACxC;;AAED,QAAII,OAAO,GAAG,IAAIC,cAAJ,EAAd,CAT8D,CAW9D;;AACA,QAAIZ,MAAM,CAACa,IAAX,EAAiB;AACf,UAAIC,QAAQ,GAAGd,MAAM,CAACa,IAAP,CAAYC,QAAZ,IAAwB,EAAvC;AACA,UAAIC,QAAQ,GAAGf,MAAM,CAACa,IAAP,CAAYE,QAAZ,GAAuBC,QAAQ,CAACC,kBAAkB,CAACjB,MAAM,CAACa,IAAP,CAAYE,QAAb,CAAnB,CAA/B,GAA4E,EAA3F;AACAR,MAAAA,cAAc,CAACW,aAAf,GAA+B,WAAWC,IAAI,CAACL,QAAQ,GAAG,GAAX,GAAiBC,QAAlB,CAA9C;AACD;;AAED,QAAIK,QAAQ,GAAG3B,aAAa,CAACO,MAAM,CAACqB,OAAR,EAAiBrB,MAAM,CAACsB,GAAxB,CAA5B;AACAX,IAAAA,OAAO,CAACY,IAAR,CAAavB,MAAM,CAACwB,MAAP,CAAcC,WAAd,EAAb,EAA0CjC,QAAQ,CAAC4B,QAAD,EAAWpB,MAAM,CAAC0B,MAAlB,EAA0B1B,MAAM,CAAC2B,gBAAjC,CAAlD,EAAsG,IAAtG,EAnB8D,CAqB9D;;AACAhB,IAAAA,OAAO,CAACiB,OAAR,GAAkB5B,MAAM,CAAC4B,OAAzB;;AAEA,aAASC,SAAT,GAAqB;AACnB,UAAI,CAAClB,OAAL,EAAc;AACZ;AACD,OAHkB,CAInB;;;AACA,UAAImB,eAAe,GAAG,2BAA2BnB,OAA3B,GAAqCjB,YAAY,CAACiB,OAAO,CAACoB,qBAAR,EAAD,CAAjD,GAAqF,IAA3G;AACA,UAAIC,YAAY,GAAG,CAACvB,YAAD,IAAiBA,YAAY,KAAK,MAAlC,IAA6CA,YAAY,KAAK,MAA9D,GACjBE,OAAO,CAACsB,YADS,GACMtB,OAAO,CAACuB,QADjC;AAEA,UAAIA,QAAQ,GAAG;AACb5B,QAAAA,IAAI,EAAE0B,YADO;AAEbG,QAAAA,MAAM,EAAExB,OAAO,CAACwB,MAFH;AAGbC,QAAAA,UAAU,EAAEzB,OAAO,CAACyB,UAHP;AAIb5B,QAAAA,OAAO,EAAEsB,eAJI;AAKb9B,QAAAA,MAAM,EAAEA,MALK;AAMbW,QAAAA,OAAO,EAAEA;AANI,OAAf;AASArB,MAAAA,MAAM,CAACa,OAAD,EAAUC,MAAV,EAAkB8B,QAAlB,CAAN,CAjBmB,CAmBnB;;AACAvB,MAAAA,OAAO,GAAG,IAAV;AACD;;AAED,QAAI,eAAeA,OAAnB,EAA4B;AAC1B;AACAA,MAAAA,OAAO,CAACkB,SAAR,GAAoBA,SAApB;AACD,KAHD,MAGO;AACL;AACAlB,MAAAA,OAAO,CAAC0B,kBAAR,GAA6B,SAASC,UAAT,GAAsB;AACjD,YAAI,CAAC3B,OAAD,IAAYA,OAAO,CAAC4B,UAAR,KAAuB,CAAvC,EAA0C;AACxC;AACD,SAHgD,CAKjD;AACA;AACA;AACA;;;AACA,YAAI5B,OAAO,CAACwB,MAAR,KAAmB,CAAnB,IAAwB,EAAExB,OAAO,CAAC6B,WAAR,IAAuB7B,OAAO,CAAC6B,WAAR,CAAoBC,OAApB,CAA4B,OAA5B,MAAyC,CAAlE,CAA5B,EAAkG;AAChG;AACD,SAXgD,CAYjD;AACA;;;AACAC,QAAAA,UAAU,CAACb,SAAD,CAAV;AACD,OAfD;AAgBD,KApE6D,CAsE9D;;;AACAlB,IAAAA,OAAO,CAACgC,OAAR,GAAkB,SAASC,WAAT,GAAuB;AACvC,UAAI,CAACjC,OAAL,EAAc;AACZ;AACD;;AAEDP,MAAAA,MAAM,CAACR,WAAW,CAAC,iBAAD,EAAoBI,MAApB,EAA4B,cAA5B,EAA4CW,OAA5C,CAAZ,CAAN,CALuC,CAOvC;;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD,KATD,CAvE8D,CAkF9D;;;AACAA,IAAAA,OAAO,CAACkC,OAAR,GAAkB,SAASC,WAAT,GAAuB;AACvC;AACA;AACA1C,MAAAA,MAAM,CAACR,WAAW,CAAC,eAAD,EAAkBI,MAAlB,EAA0B,IAA1B,EAAgCW,OAAhC,CAAZ,CAAN,CAHuC,CAKvC;;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD,KAPD,CAnF8D,CA4F9D;;;AACAA,IAAAA,OAAO,CAACoC,SAAR,GAAoB,SAASC,aAAT,GAAyB;AAC3C,UAAIC,mBAAmB,GAAG,gBAAgBjD,MAAM,CAAC4B,OAAvB,GAAiC,aAA3D;;AACA,UAAI5B,MAAM,CAACiD,mBAAX,EAAgC;AAC9BA,QAAAA,mBAAmB,GAAGjD,MAAM,CAACiD,mBAA7B;AACD;;AACD7C,MAAAA,MAAM,CAACR,WAAW,CAChBqD,mBADgB,EAEhBjD,MAFgB,EAGhBA,MAAM,CAACkD,YAAP,IAAuBlD,MAAM,CAACkD,YAAP,CAAoBC,mBAA3C,GAAiE,WAAjE,GAA+E,cAH/D,EAIhBxC,OAJgB,CAAZ,CAAN,CAL2C,CAW3C;;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD,KAbD,CA7F8D,CA4G9D;AACA;AACA;;;AACA,QAAIvB,KAAK,CAACgE,oBAAN,EAAJ,EAAkC;AAChC;AACA,UAAIC,SAAS,GAAG,CAACrD,MAAM,CAACsD,eAAP,IAA0B3D,eAAe,CAACyB,QAAD,CAA1C,KAAyDpB,MAAM,CAACuD,cAAhE,GACdhE,OAAO,CAACiE,IAAR,CAAaxD,MAAM,CAACuD,cAApB,CADc,GAEdE,SAFF;;AAIA,UAAIJ,SAAJ,EAAe;AACb9C,QAAAA,cAAc,CAACP,MAAM,CAAC0D,cAAR,CAAd,GAAwCL,SAAxC;AACD;AACF,KAxH6D,CA0H9D;;;AACA,QAAI,sBAAsB1C,OAA1B,EAAmC;AACjCvB,MAAAA,KAAK,CAACuE,OAAN,CAAcpD,cAAd,EAA8B,SAASqD,gBAAT,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AAChE,YAAI,OAAOzD,WAAP,KAAuB,WAAvB,IAAsCyD,GAAG,CAACC,WAAJ,OAAsB,cAAhE,EAAgF;AAC9E;AACA,iBAAOxD,cAAc,CAACuD,GAAD,CAArB;AACD,SAHD,MAGO;AACL;AACAnD,UAAAA,OAAO,CAACiD,gBAAR,CAAyBE,GAAzB,EAA8BD,GAA9B;AACD;AACF,OARD;AASD,KArI6D,CAuI9D;;;AACA,QAAI,CAACzE,KAAK,CAAC4E,WAAN,CAAkBhE,MAAM,CAACsD,eAAzB,CAAL,EAAgD;AAC9C3C,MAAAA,OAAO,CAAC2C,eAAR,GAA0B,CAAC,CAACtD,MAAM,CAACsD,eAAnC;AACD,KA1I6D,CA4I9D;;;AACA,QAAI7C,YAAY,IAAIA,YAAY,KAAK,MAArC,EAA6C;AAC3CE,MAAAA,OAAO,CAACF,YAAR,GAAuBT,MAAM,CAACS,YAA9B;AACD,KA/I6D,CAiJ9D;;;AACA,QAAI,OAAOT,MAAM,CAACiE,kBAAd,KAAqC,UAAzC,EAAqD;AACnDtD,MAAAA,OAAO,CAACuD,gBAAR,CAAyB,UAAzB,EAAqClE,MAAM,CAACiE,kBAA5C;AACD,KApJ6D,CAsJ9D;;;AACA,QAAI,OAAOjE,MAAM,CAACmE,gBAAd,KAAmC,UAAnC,IAAiDxD,OAAO,CAACyD,MAA7D,EAAqE;AACnEzD,MAAAA,OAAO,CAACyD,MAAR,CAAeF,gBAAf,CAAgC,UAAhC,EAA4ClE,MAAM,CAACmE,gBAAnD;AACD;;AAED,QAAInE,MAAM,CAACqE,WAAX,EAAwB;AACtB;AACArE,MAAAA,MAAM,CAACqE,WAAP,CAAmBC,OAAnB,CAA2BC,IAA3B,CAAgC,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAC1D,YAAI,CAAC9D,OAAL,EAAc;AACZ;AACD;;AAEDA,QAAAA,OAAO,CAAC+D,KAAR;AACAtE,QAAAA,MAAM,CAACqE,MAAD,CAAN,CAN0D,CAO1D;;AACA9D,QAAAA,OAAO,GAAG,IAAV;AACD,OATD;AAUD;;AAED,QAAI,CAACN,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAG,IAAd;AACD,KA3K6D,CA6K9D;;;AACAM,IAAAA,OAAO,CAACgE,IAAR,CAAatE,WAAb;AACD,GA/KM,CAAP;AAgLD,CAjLD","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}