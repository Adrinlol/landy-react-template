{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nexport default (function (rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities) {\n  return React.useMemo(function () {\n    var checkedKeys = rawLabeledValues.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    var halfCheckedKeys = rawHalfCheckedValues.map(function (_ref2) {\n      var value = _ref2.value;\n      return value;\n    });\n    var missingValues = checkedKeys.filter(function (key) {\n      return !keyEntities[key];\n    });\n\n    if (treeConduction) {\n      var _conductCheck = conductCheck(checkedKeys, true, keyEntities);\n\n      checkedKeys = _conductCheck.checkedKeys;\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\n    }\n\n    return [// Checked keys should fill with missing keys which should de-duplicated\n    Array.from(new Set([].concat(_toConsumableArray(missingValues), _toConsumableArray(checkedKeys)))), // Half checked keys\n    halfCheckedKeys];\n  }, [rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities]);\n});","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-tree-select/es/hooks/useCheckedKeys.js"],"names":["_toConsumableArray","React","conductCheck","rawLabeledValues","rawHalfCheckedValues","treeConduction","keyEntities","useMemo","checkedKeys","map","_ref","value","halfCheckedKeys","_ref2","missingValues","filter","key","_conductCheck","Array","from","Set","concat"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,gBAAgB,UAAUC,gBAAV,EAA4BC,oBAA5B,EAAkDC,cAAlD,EAAkEC,WAAlE,EAA+E;AAC7F,SAAOL,KAAK,CAACM,OAAN,CAAc,YAAY;AAC/B,QAAIC,WAAW,GAAGL,gBAAgB,CAACM,GAAjB,CAAqB,UAAUC,IAAV,EAAgB;AACrD,UAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AACA,aAAOA,KAAP;AACD,KAHiB,CAAlB;AAIA,QAAIC,eAAe,GAAGR,oBAAoB,CAACK,GAArB,CAAyB,UAAUI,KAAV,EAAiB;AAC9D,UAAIF,KAAK,GAAGE,KAAK,CAACF,KAAlB;AACA,aAAOA,KAAP;AACD,KAHqB,CAAtB;AAIA,QAAIG,aAAa,GAAGN,WAAW,CAACO,MAAZ,CAAmB,UAAUC,GAAV,EAAe;AACpD,aAAO,CAACV,WAAW,CAACU,GAAD,CAAnB;AACD,KAFmB,CAApB;;AAIA,QAAIX,cAAJ,EAAoB;AAClB,UAAIY,aAAa,GAAGf,YAAY,CAACM,WAAD,EAAc,IAAd,EAAoBF,WAApB,CAAhC;;AAEAE,MAAAA,WAAW,GAAGS,aAAa,CAACT,WAA5B;AACAI,MAAAA,eAAe,GAAGK,aAAa,CAACL,eAAhC;AACD;;AAED,WAAO,CAAC;AACRM,IAAAA,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,GAAGC,MAAH,CAAUrB,kBAAkB,CAACc,aAAD,CAA5B,EAA6Cd,kBAAkB,CAACQ,WAAD,CAA/D,CAAR,CAAX,CADO,EAC6F;AACpGI,IAAAA,eAFO,CAAP;AAGD,GAvBM,EAuBJ,CAACT,gBAAD,EAAmBC,oBAAnB,EAAyCC,cAAzC,EAAyDC,WAAzD,CAvBI,CAAP;AAwBD,CAzBD","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nexport default (function (rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities) {\n  return React.useMemo(function () {\n    var checkedKeys = rawLabeledValues.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    var halfCheckedKeys = rawHalfCheckedValues.map(function (_ref2) {\n      var value = _ref2.value;\n      return value;\n    });\n    var missingValues = checkedKeys.filter(function (key) {\n      return !keyEntities[key];\n    });\n\n    if (treeConduction) {\n      var _conductCheck = conductCheck(checkedKeys, true, keyEntities);\n\n      checkedKeys = _conductCheck.checkedKeys;\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\n    }\n\n    return [// Checked keys should fill with missing keys which should de-duplicated\n    Array.from(new Set([].concat(_toConsumableArray(missingValues), _toConsumableArray(checkedKeys)))), // Half checked keys\n    halfCheckedKeys];\n  }, [rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities]);\n});"]},"metadata":{},"sourceType":"module"}