{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { toArray } from '../utils/commonUtil';\nimport { injectPropsWithOption } from '../utils/valueUtil';\n\nfunction includes(test, search) {\n  return toArray(test).join('').toUpperCase().includes(search);\n}\n\nexport default (function (options, fieldNames, searchValue, filterOption, optionFilterProp) {\n  return React.useMemo(function () {\n    if (!searchValue || filterOption === false) {\n      return options;\n    }\n\n    var fieldOptions = fieldNames.options,\n        fieldLabel = fieldNames.label,\n        fieldValue = fieldNames.value;\n    var filteredOptions = [];\n    var customizeFilter = typeof filterOption === 'function';\n    var upperSearch = searchValue.toUpperCase();\n    var filterFunc = customizeFilter ? filterOption : function (_, option) {\n      // Use provided `optionFilterProp`\n      if (optionFilterProp) {\n        return includes(option[optionFilterProp], upperSearch);\n      } // Auto select `label` or `value` by option type\n\n\n      if (option[fieldOptions]) {\n        // hack `fieldLabel` since `OptionGroup` children is not `label`\n        return includes(option[fieldLabel !== 'children' ? fieldLabel : 'label'], upperSearch);\n      }\n\n      return includes(option[fieldValue], upperSearch);\n    };\n    var wrapOption = customizeFilter ? function (opt) {\n      return injectPropsWithOption(opt);\n    } : function (opt) {\n      return opt;\n    };\n    options.forEach(function (item) {\n      // Group should check child options\n      if (item[fieldOptions]) {\n        // Check group first\n        var matchGroup = filterFunc(searchValue, wrapOption(item));\n\n        if (matchGroup) {\n          filteredOptions.push(item);\n        } else {\n          // Check option\n          var subOptions = item[fieldOptions].filter(function (subItem) {\n            return filterFunc(searchValue, wrapOption(subItem));\n          });\n\n          if (subOptions.length) {\n            filteredOptions.push(_objectSpread(_objectSpread({}, item), {}, _defineProperty({}, fieldOptions, subOptions)));\n          }\n        }\n\n        return;\n      }\n\n      if (filterFunc(searchValue, wrapOption(item))) {\n        filteredOptions.push(item);\n      }\n    });\n    return filteredOptions;\n  }, [options, filterOption, optionFilterProp, searchValue, fieldNames]);\n});","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-select/es/hooks/useFilterOptions.js"],"names":["_defineProperty","_objectSpread","React","toArray","injectPropsWithOption","includes","test","search","join","toUpperCase","options","fieldNames","searchValue","filterOption","optionFilterProp","useMemo","fieldOptions","fieldLabel","label","fieldValue","value","filteredOptions","customizeFilter","upperSearch","filterFunc","_","option","wrapOption","opt","forEach","item","matchGroup","push","subOptions","filter","subItem","length"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { toArray } from '../utils/commonUtil';\nimport { injectPropsWithOption } from '../utils/valueUtil';\n\nfunction includes(test, search) {\n  return toArray(test).join('').toUpperCase().includes(search);\n}\n\nexport default (function (options, fieldNames, searchValue, filterOption, optionFilterProp) {\n  return React.useMemo(function () {\n    if (!searchValue || filterOption === false) {\n      return options;\n    }\n\n    var fieldOptions = fieldNames.options,\n        fieldLabel = fieldNames.label,\n        fieldValue = fieldNames.value;\n    var filteredOptions = [];\n    var customizeFilter = typeof filterOption === 'function';\n    var upperSearch = searchValue.toUpperCase();\n    var filterFunc = customizeFilter ? filterOption : function (_, option) {\n      // Use provided `optionFilterProp`\n      if (optionFilterProp) {\n        return includes(option[optionFilterProp], upperSearch);\n      } // Auto select `label` or `value` by option type\n\n\n      if (option[fieldOptions]) {\n        // hack `fieldLabel` since `OptionGroup` children is not `label`\n        return includes(option[fieldLabel !== 'children' ? fieldLabel : 'label'], upperSearch);\n      }\n\n      return includes(option[fieldValue], upperSearch);\n    };\n    var wrapOption = customizeFilter ? function (opt) {\n      return injectPropsWithOption(opt);\n    } : function (opt) {\n      return opt;\n    };\n    options.forEach(function (item) {\n      // Group should check child options\n      if (item[fieldOptions]) {\n        // Check group first\n        var matchGroup = filterFunc(searchValue, wrapOption(item));\n\n        if (matchGroup) {\n          filteredOptions.push(item);\n        } else {\n          // Check option\n          var subOptions = item[fieldOptions].filter(function (subItem) {\n            return filterFunc(searchValue, wrapOption(subItem));\n          });\n\n          if (subOptions.length) {\n            filteredOptions.push(_objectSpread(_objectSpread({}, item), {}, _defineProperty({}, fieldOptions, subOptions)));\n          }\n        }\n\n        return;\n      }\n\n      if (filterFunc(searchValue, wrapOption(item))) {\n        filteredOptions.push(item);\n      }\n    });\n    return filteredOptions;\n  }, [options, filterOption, optionFilterProp, searchValue, fieldNames]);\n});"]},"metadata":{},"sourceType":"module"}