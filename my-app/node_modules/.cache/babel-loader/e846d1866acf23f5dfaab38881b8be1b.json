{"ast":null,"code":"import React from 'react';\nimport { isFragment } from 'react-is';\nexport default function toArray(children) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ret = [];\n  React.Children.forEach(children, function (child) {\n    if ((child === undefined || child === null) && !option.keepEmpty) {\n      return;\n    }\n\n    if (Array.isArray(child)) {\n      ret = ret.concat(toArray(child));\n    } else if (isFragment(child) && child.props) {\n      ret = ret.concat(toArray(child.props.children, option));\n    } else {\n      ret.push(child);\n    }\n  });\n  return ret;\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-util/es/Children/toArray.js"],"names":["React","isFragment","toArray","children","option","arguments","length","undefined","ret","Children","forEach","child","keepEmpty","Array","isArray","concat","props","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,eAAe,SAASC,OAAT,CAAiBC,QAAjB,EAA2B;AACxC,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAjF;AACA,MAAIG,GAAG,GAAG,EAAV;AACAR,EAAAA,KAAK,CAACS,QAAN,CAAeC,OAAf,CAAuBP,QAAvB,EAAiC,UAAUQ,KAAV,EAAiB;AAChD,QAAI,CAACA,KAAK,KAAKJ,SAAV,IAAuBI,KAAK,KAAK,IAAlC,KAA2C,CAACP,MAAM,CAACQ,SAAvD,EAAkE;AAChE;AACD;;AAED,QAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxBH,MAAAA,GAAG,GAAGA,GAAG,CAACO,MAAJ,CAAWb,OAAO,CAACS,KAAD,CAAlB,CAAN;AACD,KAFD,MAEO,IAAIV,UAAU,CAACU,KAAD,CAAV,IAAqBA,KAAK,CAACK,KAA/B,EAAsC;AAC3CR,MAAAA,GAAG,GAAGA,GAAG,CAACO,MAAJ,CAAWb,OAAO,CAACS,KAAK,CAACK,KAAN,CAAYb,QAAb,EAAuBC,MAAvB,CAAlB,CAAN;AACD,KAFM,MAEA;AACLI,MAAAA,GAAG,CAACS,IAAJ,CAASN,KAAT;AACD;AACF,GAZD;AAaA,SAAOH,GAAP;AACD","sourcesContent":["import React from 'react';\nimport { isFragment } from 'react-is';\nexport default function toArray(children) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ret = [];\n  React.Children.forEach(children, function (child) {\n    if ((child === undefined || child === null) && !option.keepEmpty) {\n      return;\n    }\n\n    if (Array.isArray(child)) {\n      ret = ret.concat(toArray(child));\n    } else if (isFragment(child) && child.props) {\n      ret = ret.concat(toArray(child.props.children, option));\n    } else {\n      ret.push(child);\n    }\n  });\n  return ret;\n}"]},"metadata":{},"sourceType":"module"}