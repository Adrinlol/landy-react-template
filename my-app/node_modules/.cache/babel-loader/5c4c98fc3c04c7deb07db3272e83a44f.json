{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      renderIndex = props.renderIndex,\n      rowKey = props.rowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // ======================== Expandable =========================\n\n  var onExpandRef = React.useRef(onTriggerExpand);\n  onExpandRef.current = onTriggerExpand;\n\n  var onInternalTriggerExpand = function onInternalTriggerExpand() {\n    onExpandRef.current.apply(onExpandRef, arguments);\n  }; // =========================== onRow ===========================\n\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    var _additionalProps, _additionalProps$onCl;\n\n    if (expandRowByClick && mergedExpandable) {\n      onInternalTriggerExpand(record, event);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_additionalProps = additionalProps) === null || _additionalProps === void 0 ? void 0 : (_additionalProps$onCl = _additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [_additionalProps, event].concat(args));\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onInternalTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      renderIndex: renderIndex,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate,\n      expanded: appendCellNode && expanded\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      component: RowComponent,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: false\n    }, expandContent);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-table/es/Body/BodyRow.js"],"names":["_extends","_objectSpread","_slicedToArray","React","classNames","Cell","TableContext","BodyContext","getColumnsKey","ExpandedRow","BodyRow","props","className","style","record","index","renderIndex","rowKey","rowExpandable","expandedKeys","onRow","_props$indent","indent","RowComponent","rowComponent","cellComponent","childrenColumnName","_React$useContext","useContext","prefixCls","fixedInfoList","_React$useContext2","flattenColumns","expandableType","expandRowByClick","onTriggerExpand","rowClassName","expandedRowClassName","indentSize","expandIcon","expandedRowRender","expandIconColumnIndex","_React$useState","useState","_React$useState2","expandRended","setExpandRended","expanded","has","recordKey","useEffect","rowSupportExpand","nestExpandable","hasNestChildren","mergedExpandable","onExpandRef","useRef","current","onInternalTriggerExpand","apply","arguments","additionalProps","onClick","event","_additionalProps","_additionalProps$onCl","_len","length","args","Array","_key","call","concat","computeRowClassName","columnsKey","baseRowNode","createElement","map","column","colIndex","render","dataIndex","columnClassName","key","fixedInfo","appendCellNode","Fragment","paddingLeft","expandable","onExpand","additionalCellProps","onCell","ellipsis","align","component","shouldCellUpdate","appendNode","expandRowNode","expandContent","computedExpandedRowClassName","colSpan","isEmpty","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      renderIndex = props.renderIndex,\n      rowKey = props.rowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // ======================== Expandable =========================\n\n  var onExpandRef = React.useRef(onTriggerExpand);\n  onExpandRef.current = onTriggerExpand;\n\n  var onInternalTriggerExpand = function onInternalTriggerExpand() {\n    onExpandRef.current.apply(onExpandRef, arguments);\n  }; // =========================== onRow ===========================\n\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    var _additionalProps, _additionalProps$onCl;\n\n    if (expandRowByClick && mergedExpandable) {\n      onInternalTriggerExpand(record, event);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_additionalProps = additionalProps) === null || _additionalProps === void 0 ? void 0 : (_additionalProps$onCl = _additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [_additionalProps, event].concat(args));\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onInternalTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      renderIndex: renderIndex,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate,\n      expanded: appendCellNode && expanded\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      component: RowComponent,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: false\n    }, expandContent);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;"]},"metadata":{},"sourceType":"module"}