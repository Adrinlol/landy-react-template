{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { YEAR_DECADE_COUNT } from '.';\nimport useCellClassName from '../../hooks/useCellClassName';\nimport { formatValue, isSameYear } from '../../utils/dateUtil';\nimport RangeContext from '../../RangeContext';\nimport PanelBody from '../PanelBody';\nexport var YEAR_COL_COUNT = 3;\nvar YEAR_ROW_COUNT = 4;\n\nfunction YearBody(props) {\n  var prefixCls = props.prefixCls,\n      value = props.value,\n      viewDate = props.viewDate,\n      locale = props.locale,\n      generateConfig = props.generateConfig;\n\n  var _React$useContext = React.useContext(RangeContext),\n      rangedValue = _React$useContext.rangedValue,\n      hoverRangedValue = _React$useContext.hoverRangedValue;\n\n  var yearPrefixCls = \"\".concat(prefixCls, \"-cell\"); // =============================== Year ===============================\n\n  var yearNumber = generateConfig.getYear(viewDate);\n  var startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;\n  var endYear = startYear + YEAR_DECADE_COUNT - 1;\n  var baseYear = generateConfig.setYear(viewDate, startYear - Math.ceil((YEAR_COL_COUNT * YEAR_ROW_COUNT - YEAR_DECADE_COUNT) / 2));\n\n  var isInView = function isInView(date) {\n    var currentYearNumber = generateConfig.getYear(date);\n    return startYear <= currentYearNumber && currentYearNumber <= endYear;\n  };\n\n  var getCellClassName = useCellClassName({\n    cellPrefixCls: yearPrefixCls,\n    value: value,\n    generateConfig: generateConfig,\n    rangedValue: rangedValue,\n    hoverRangedValue: hoverRangedValue,\n    isSameCell: function isSameCell(current, target) {\n      return isSameYear(generateConfig, current, target);\n    },\n    isInView: isInView,\n    offsetCell: function offsetCell(date, offset) {\n      return generateConfig.addYear(date, offset);\n    }\n  });\n  return /*#__PURE__*/React.createElement(PanelBody, _extends({}, props, {\n    rowNum: YEAR_ROW_COUNT,\n    colNum: YEAR_COL_COUNT,\n    baseDate: baseYear,\n    getCellText: generateConfig.getYear,\n    getCellClassName: getCellClassName,\n    getCellDate: generateConfig.addYear,\n    titleCell: function titleCell(date) {\n      return formatValue(date, {\n        locale: locale,\n        format: 'YYYY',\n        generateConfig: generateConfig\n      });\n    }\n  }));\n}\n\nexport default YearBody;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-picker/es/panels/YearPanel/YearBody.js"],"names":["_extends","React","YEAR_DECADE_COUNT","useCellClassName","formatValue","isSameYear","RangeContext","PanelBody","YEAR_COL_COUNT","YEAR_ROW_COUNT","YearBody","props","prefixCls","value","viewDate","locale","generateConfig","_React$useContext","useContext","rangedValue","hoverRangedValue","yearPrefixCls","concat","yearNumber","getYear","startYear","Math","floor","endYear","baseYear","setYear","ceil","isInView","date","currentYearNumber","getCellClassName","cellPrefixCls","isSameCell","current","target","offsetCell","offset","addYear","createElement","rowNum","colNum","baseDate","getCellText","getCellDate","titleCell","format"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { YEAR_DECADE_COUNT } from '.';\nimport useCellClassName from '../../hooks/useCellClassName';\nimport { formatValue, isSameYear } from '../../utils/dateUtil';\nimport RangeContext from '../../RangeContext';\nimport PanelBody from '../PanelBody';\nexport var YEAR_COL_COUNT = 3;\nvar YEAR_ROW_COUNT = 4;\n\nfunction YearBody(props) {\n  var prefixCls = props.prefixCls,\n      value = props.value,\n      viewDate = props.viewDate,\n      locale = props.locale,\n      generateConfig = props.generateConfig;\n\n  var _React$useContext = React.useContext(RangeContext),\n      rangedValue = _React$useContext.rangedValue,\n      hoverRangedValue = _React$useContext.hoverRangedValue;\n\n  var yearPrefixCls = \"\".concat(prefixCls, \"-cell\"); // =============================== Year ===============================\n\n  var yearNumber = generateConfig.getYear(viewDate);\n  var startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;\n  var endYear = startYear + YEAR_DECADE_COUNT - 1;\n  var baseYear = generateConfig.setYear(viewDate, startYear - Math.ceil((YEAR_COL_COUNT * YEAR_ROW_COUNT - YEAR_DECADE_COUNT) / 2));\n\n  var isInView = function isInView(date) {\n    var currentYearNumber = generateConfig.getYear(date);\n    return startYear <= currentYearNumber && currentYearNumber <= endYear;\n  };\n\n  var getCellClassName = useCellClassName({\n    cellPrefixCls: yearPrefixCls,\n    value: value,\n    generateConfig: generateConfig,\n    rangedValue: rangedValue,\n    hoverRangedValue: hoverRangedValue,\n    isSameCell: function isSameCell(current, target) {\n      return isSameYear(generateConfig, current, target);\n    },\n    isInView: isInView,\n    offsetCell: function offsetCell(date, offset) {\n      return generateConfig.addYear(date, offset);\n    }\n  });\n  return /*#__PURE__*/React.createElement(PanelBody, _extends({}, props, {\n    rowNum: YEAR_ROW_COUNT,\n    colNum: YEAR_COL_COUNT,\n    baseDate: baseYear,\n    getCellText: generateConfig.getYear,\n    getCellClassName: getCellClassName,\n    getCellDate: generateConfig.addYear,\n    titleCell: function titleCell(date) {\n      return formatValue(date, {\n        locale: locale,\n        format: 'YYYY',\n        generateConfig: generateConfig\n      });\n    }\n  }));\n}\n\nexport default YearBody;"]},"metadata":{},"sourceType":"module"}