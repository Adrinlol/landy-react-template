{"ast":null,"code":"'use strict';\n\nmodule.exports = ansiHTML; // Reference to https://github.com/sindresorhus/ansi-regex\n\nvar _regANSI = /(?:(?:\\u001b\\[)|\\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\\u001b[A-M]/;\nvar _defColors = {\n  reset: ['fff', '000'],\n  // [FOREGROUD_COLOR, BACKGROUND_COLOR]\n  black: '000',\n  red: 'ff0000',\n  green: '209805',\n  yellow: 'e8bf03',\n  blue: '0000ff',\n  magenta: 'ff00ff',\n  cyan: '00ffee',\n  lightgrey: 'f0f0f0',\n  darkgrey: '888'\n};\nvar _styles = {\n  30: 'black',\n  31: 'red',\n  32: 'green',\n  33: 'yellow',\n  34: 'blue',\n  35: 'magenta',\n  36: 'cyan',\n  37: 'lightgrey'\n};\nvar _openTags = {\n  '1': 'font-weight:bold',\n  // bold\n  '2': 'opacity:0.5',\n  // dim\n  '3': '<i>',\n  // italic\n  '4': '<u>',\n  // underscore\n  '8': 'display:none',\n  // hidden\n  '9': '<del>' // delete\n\n};\nvar _closeTags = {\n  '23': '</i>',\n  // reset italic\n  '24': '</u>',\n  // reset underscore\n  '29': '</del>' // reset delete\n\n};\n[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {\n  _closeTags[n] = '</span>';\n});\n/**\n * Converts text with ANSI color codes to HTML markup.\n * @param {String} text\n * @returns {*}\n */\n\nfunction ansiHTML(text) {\n  // Returns the text if the string has no ANSI escape code.\n  if (!_regANSI.test(text)) {\n    return text;\n  } // Cache opened sequence.\n\n\n  var ansiCodes = []; // Replace with markup.\n\n  var ret = text.replace(/\\033\\[(\\d+)m/g, function (match, seq) {\n    var ot = _openTags[seq];\n\n    if (ot) {\n      // If current sequence has been opened, close it.\n      if (!!~ansiCodes.indexOf(seq)) {\n        // eslint-disable-line no-extra-boolean-cast\n        ansiCodes.pop();\n        return '</span>';\n      } // Open tag.\n\n\n      ansiCodes.push(seq);\n      return ot[0] === '<' ? ot : '<span style=\"' + ot + ';\">';\n    }\n\n    var ct = _closeTags[seq];\n\n    if (ct) {\n      // Pop sequence\n      ansiCodes.pop();\n      return ct;\n    }\n\n    return '';\n  }); // Make sure tags are closed.\n\n  var l = ansiCodes.length;\n  l > 0 && (ret += Array(l + 1).join('</span>'));\n  return ret;\n}\n/**\n * Customize colors.\n * @param {Object} colors reference to _defColors\n */\n\n\nansiHTML.setColors = function (colors) {\n  if (typeof colors !== 'object') {\n    throw new Error('`colors` parameter must be an Object.');\n  }\n\n  var _finalColors = {};\n\n  for (var key in _defColors) {\n    var hex = colors.hasOwnProperty(key) ? colors[key] : null;\n\n    if (!hex) {\n      _finalColors[key] = _defColors[key];\n      continue;\n    }\n\n    if ('reset' === key) {\n      if (typeof hex === 'string') {\n        hex = [hex];\n      }\n\n      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {\n        return typeof h !== 'string';\n      })) {\n        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000');\n      }\n\n      var defHexColor = _defColors[key];\n\n      if (!hex[0]) {\n        hex[0] = defHexColor[0];\n      }\n\n      if (hex.length === 1 || !hex[1]) {\n        hex = [hex[0]];\n        hex.push(defHexColor[1]);\n      }\n\n      hex = hex.slice(0, 2);\n    } else if (typeof hex !== 'string') {\n      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000');\n    }\n\n    _finalColors[key] = hex;\n  }\n\n  _setTags(_finalColors);\n};\n/**\n * Reset colors.\n */\n\n\nansiHTML.reset = function () {\n  _setTags(_defColors);\n};\n/**\n * Expose tags, including open and close.\n * @type {Object}\n */\n\n\nansiHTML.tags = {};\n\nif (Object.defineProperty) {\n  Object.defineProperty(ansiHTML.tags, 'open', {\n    get: function () {\n      return _openTags;\n    }\n  });\n  Object.defineProperty(ansiHTML.tags, 'close', {\n    get: function () {\n      return _closeTags;\n    }\n  });\n} else {\n  ansiHTML.tags.open = _openTags;\n  ansiHTML.tags.close = _closeTags;\n}\n\nfunction _setTags(colors) {\n  // reset all\n  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]; // inverse\n\n  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]; // dark grey\n\n  _openTags['90'] = 'color:#' + colors.darkgrey;\n\n  for (var code in _styles) {\n    var color = _styles[code];\n    var oriColor = colors[color] || '000';\n    _openTags[code] = 'color:#' + oriColor;\n    code = parseInt(code);\n    _openTags[(code + 10).toString()] = 'background:#' + oriColor;\n  }\n}\n\nansiHTML.reset();","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/ansi-html-community/index.js"],"names":["module","exports","ansiHTML","_regANSI","_defColors","reset","black","red","green","yellow","blue","magenta","cyan","lightgrey","darkgrey","_styles","_openTags","_closeTags","forEach","n","text","test","ansiCodes","ret","replace","match","seq","ot","indexOf","pop","push","ct","l","length","Array","join","setColors","colors","Error","_finalColors","key","hex","hasOwnProperty","isArray","some","h","defHexColor","slice","_setTags","tags","Object","defineProperty","get","open","close","code","color","oriColor","parseInt","toString"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = ansiHTML\n\n// Reference to https://github.com/sindresorhus/ansi-regex\nvar _regANSI = /(?:(?:\\u001b\\[)|\\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\\u001b[A-M]/\n\nvar _defColors = {\n  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]\n  black: '000',\n  red: 'ff0000',\n  green: '209805',\n  yellow: 'e8bf03',\n  blue: '0000ff',\n  magenta: 'ff00ff',\n  cyan: '00ffee',\n  lightgrey: 'f0f0f0',\n  darkgrey: '888'\n}\nvar _styles = {\n  30: 'black',\n  31: 'red',\n  32: 'green',\n  33: 'yellow',\n  34: 'blue',\n  35: 'magenta',\n  36: 'cyan',\n  37: 'lightgrey'\n}\nvar _openTags = {\n  '1': 'font-weight:bold', // bold\n  '2': 'opacity:0.5', // dim\n  '3': '<i>', // italic\n  '4': '<u>', // underscore\n  '8': 'display:none', // hidden\n  '9': '<del>' // delete\n}\nvar _closeTags = {\n  '23': '</i>', // reset italic\n  '24': '</u>', // reset underscore\n  '29': '</del>' // reset delete\n}\n\n;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {\n  _closeTags[n] = '</span>'\n})\n\n/**\n * Converts text with ANSI color codes to HTML markup.\n * @param {String} text\n * @returns {*}\n */\nfunction ansiHTML (text) {\n  // Returns the text if the string has no ANSI escape code.\n  if (!_regANSI.test(text)) {\n    return text\n  }\n\n  // Cache opened sequence.\n  var ansiCodes = []\n  // Replace with markup.\n  var ret = text.replace(/\\033\\[(\\d+)m/g, function (match, seq) {\n    var ot = _openTags[seq]\n    if (ot) {\n      // If current sequence has been opened, close it.\n      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast\n        ansiCodes.pop()\n        return '</span>'\n      }\n      // Open tag.\n      ansiCodes.push(seq)\n      return ot[0] === '<' ? ot : '<span style=\"' + ot + ';\">'\n    }\n\n    var ct = _closeTags[seq]\n    if (ct) {\n      // Pop sequence\n      ansiCodes.pop()\n      return ct\n    }\n    return ''\n  })\n\n  // Make sure tags are closed.\n  var l = ansiCodes.length\n  ;(l > 0) && (ret += Array(l + 1).join('</span>'))\n\n  return ret\n}\n\n/**\n * Customize colors.\n * @param {Object} colors reference to _defColors\n */\nansiHTML.setColors = function (colors) {\n  if (typeof colors !== 'object') {\n    throw new Error('`colors` parameter must be an Object.')\n  }\n\n  var _finalColors = {}\n  for (var key in _defColors) {\n    var hex = colors.hasOwnProperty(key) ? colors[key] : null\n    if (!hex) {\n      _finalColors[key] = _defColors[key]\n      continue\n    }\n    if ('reset' === key) {\n      if (typeof hex === 'string') {\n        hex = [hex]\n      }\n      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {\n        return typeof h !== 'string'\n      })) {\n        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')\n      }\n      var defHexColor = _defColors[key]\n      if (!hex[0]) {\n        hex[0] = defHexColor[0]\n      }\n      if (hex.length === 1 || !hex[1]) {\n        hex = [hex[0]]\n        hex.push(defHexColor[1])\n      }\n\n      hex = hex.slice(0, 2)\n    } else if (typeof hex !== 'string') {\n      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')\n    }\n    _finalColors[key] = hex\n  }\n  _setTags(_finalColors)\n}\n\n/**\n * Reset colors.\n */\nansiHTML.reset = function () {\n  _setTags(_defColors)\n}\n\n/**\n * Expose tags, including open and close.\n * @type {Object}\n */\nansiHTML.tags = {}\n\nif (Object.defineProperty) {\n  Object.defineProperty(ansiHTML.tags, 'open', {\n    get: function () { return _openTags }\n  })\n  Object.defineProperty(ansiHTML.tags, 'close', {\n    get: function () { return _closeTags }\n  })\n} else {\n  ansiHTML.tags.open = _openTags\n  ansiHTML.tags.close = _closeTags\n}\n\nfunction _setTags (colors) {\n  // reset all\n  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]\n  // inverse\n  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]\n  // dark grey\n  _openTags['90'] = 'color:#' + colors.darkgrey\n\n  for (var code in _styles) {\n    var color = _styles[code]\n    var oriColor = colors[color] || '000'\n    _openTags[code] = 'color:#' + oriColor\n    code = parseInt(code)\n    _openTags[(code + 10).toString()] = 'background:#' + oriColor\n  }\n}\n\nansiHTML.reset()\n"]},"metadata":{},"sourceType":"script"}