{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n/* eslint no-console:0 */\n\n\nvar formatRegExp = /%[sdj%]/g;\n\nvar warning = function warning() {}; // don't print warning message when in production env or node runtime\n\n\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {\n  warning = function warning(type, errors) {\n    if (typeof console !== 'undefined' && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === 'undefined') {\n      if (errors.every(function (e) {\n        return typeof e === 'string';\n      })) {\n        console.warn(type, errors);\n      }\n    }\n  };\n}\n\nfunction convertFieldsError(errors) {\n  if (!errors || !errors.length) return null;\n  var fields = {};\n  errors.forEach(function (error) {\n    var field = error.field;\n    fields[field] = fields[field] || [];\n    fields[field].push(error);\n  });\n  return fields;\n}\n\nfunction format(template) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  var i = 0;\n  var len = args.length;\n\n  if (typeof template === 'function') {\n    return template.apply(null, args);\n  }\n\n  if (typeof template === 'string') {\n    var str = template.replace(formatRegExp, function (x) {\n      if (x === '%%') {\n        return '%';\n      }\n\n      if (i >= len) {\n        return x;\n      }\n\n      switch (x) {\n        case '%s':\n          return String(args[i++]);\n\n        case '%d':\n          return Number(args[i++]);\n\n        case '%j':\n          try {\n            return JSON.stringify(args[i++]);\n          } catch (_) {\n            return '[Circular]';\n          }\n\n          break;\n\n        default:\n          return x;\n      }\n    });\n    return str;\n  }\n\n  return template;\n}\n\nfunction isNativeStringType(type) {\n  return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'date' || type === 'pattern';\n}\n\nfunction isEmptyValue(value, type) {\n  if (value === undefined || value === null) {\n    return true;\n  }\n\n  if (type === 'array' && Array.isArray(value) && !value.length) {\n    return true;\n  }\n\n  if (isNativeStringType(type) && typeof value === 'string' && !value) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction asyncParallelArray(arr, func, callback) {\n  var results = [];\n  var total = 0;\n  var arrLength = arr.length;\n\n  function count(errors) {\n    results.push.apply(results, errors || []);\n    total++;\n\n    if (total === arrLength) {\n      callback(results);\n    }\n  }\n\n  arr.forEach(function (a) {\n    func(a, count);\n  });\n}\n\nfunction asyncSerialArray(arr, func, callback) {\n  var index = 0;\n  var arrLength = arr.length;\n\n  function next(errors) {\n    if (errors && errors.length) {\n      callback(errors);\n      return;\n    }\n\n    var original = index;\n    index = index + 1;\n\n    if (original < arrLength) {\n      func(arr[original], next);\n    } else {\n      callback([]);\n    }\n  }\n\n  next([]);\n}\n\nfunction flattenObjArr(objArr) {\n  var ret = [];\n  Object.keys(objArr).forEach(function (k) {\n    ret.push.apply(ret, objArr[k] || []);\n  });\n  return ret;\n}\n\nvar AsyncValidationError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(AsyncValidationError, _Error);\n\n  function AsyncValidationError(errors, fields) {\n    var _this;\n\n    _this = _Error.call(this, 'Async Validation Error') || this;\n    _this.errors = errors;\n    _this.fields = fields;\n    return _this;\n  }\n\n  return AsyncValidationError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction asyncMap(objArr, option, func, callback, source) {\n  if (option.first) {\n    var _pending = new Promise(function (resolve, reject) {\n      var next = function next(errors) {\n        callback(errors);\n        return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);\n      };\n\n      var flattenArr = flattenObjArr(objArr);\n      asyncSerialArray(flattenArr, func, next);\n    });\n\n    _pending[\"catch\"](function (e) {\n      return e;\n    });\n\n    return _pending;\n  }\n\n  var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];\n  var objArrKeys = Object.keys(objArr);\n  var objArrLength = objArrKeys.length;\n  var total = 0;\n  var results = [];\n  var pending = new Promise(function (resolve, reject) {\n    var next = function next(errors) {\n      results.push.apply(results, errors);\n      total++;\n\n      if (total === objArrLength) {\n        callback(results);\n        return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);\n      }\n    };\n\n    if (!objArrKeys.length) {\n      callback(results);\n      resolve(source);\n    }\n\n    objArrKeys.forEach(function (key) {\n      var arr = objArr[key];\n\n      if (firstFields.indexOf(key) !== -1) {\n        asyncSerialArray(arr, func, next);\n      } else {\n        asyncParallelArray(arr, func, next);\n      }\n    });\n  });\n  pending[\"catch\"](function (e) {\n    return e;\n  });\n  return pending;\n}\n\nfunction isErrorObj(obj) {\n  return !!(obj && obj.message !== undefined);\n}\n\nfunction getValue(value, path) {\n  var v = value;\n\n  for (var i = 0; i < path.length; i++) {\n    if (v == undefined) {\n      return v;\n    }\n\n    v = v[path[i]];\n  }\n\n  return v;\n}\n\nfunction complementError(rule, source) {\n  return function (oe) {\n    var fieldValue;\n\n    if (rule.fullFields) {\n      fieldValue = getValue(source, rule.fullFields);\n    } else {\n      fieldValue = source[oe.field || rule.fullField];\n    }\n\n    if (isErrorObj(oe)) {\n      oe.field = oe.field || rule.fullField;\n      oe.fieldValue = fieldValue;\n      return oe;\n    }\n\n    return {\n      message: typeof oe === 'function' ? oe() : oe,\n      fieldValue: fieldValue,\n      field: oe.field || rule.fullField\n    };\n  };\n}\n\nfunction deepMerge(target, source) {\n  if (source) {\n    for (var s in source) {\n      if (source.hasOwnProperty(s)) {\n        var value = source[s];\n\n        if (typeof value === 'object' && typeof target[s] === 'object') {\n          target[s] = _extends({}, target[s], value);\n        } else {\n          target[s] = value;\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nvar required$1 = function required(rule, value, source, errors, options, type) {\n  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type || rule.type))) {\n    errors.push(format(options.messages.required, rule.fullField));\n  }\n};\n/**\n *  Rule for validating whitespace.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nvar whitespace = function whitespace(rule, value, source, errors, options) {\n  if (/^\\s+$/.test(value) || value === '') {\n    errors.push(format(options.messages.whitespace, rule.fullField));\n  }\n};\n/* eslint max-len:0 */\n\n\nvar pattern$2 = {\n  // http://emailregex.com/\n  email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+\\.)+[a-zA-Z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}))$/,\n  url: new RegExp(\"^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$\", 'i'),\n  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i\n};\nvar types = {\n  integer: function integer(value) {\n    return types.number(value) && parseInt(value, 10) === value;\n  },\n  \"float\": function float(value) {\n    return types.number(value) && !types.integer(value);\n  },\n  array: function array(value) {\n    return Array.isArray(value);\n  },\n  regexp: function regexp(value) {\n    if (value instanceof RegExp) {\n      return true;\n    }\n\n    try {\n      return !!new RegExp(value);\n    } catch (e) {\n      return false;\n    }\n  },\n  date: function date(value) {\n    return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function' && !isNaN(value.getTime());\n  },\n  number: function number(value) {\n    if (isNaN(value)) {\n      return false;\n    }\n\n    return typeof value === 'number';\n  },\n  object: function object(value) {\n    return typeof value === 'object' && !types.array(value);\n  },\n  method: function method(value) {\n    return typeof value === 'function';\n  },\n  email: function email(value) {\n    return typeof value === 'string' && value.length <= 320 && !!value.match(pattern$2.email);\n  },\n  url: function url(value) {\n    return typeof value === 'string' && value.length <= 2048 && !!value.match(pattern$2.url);\n  },\n  hex: function hex(value) {\n    return typeof value === 'string' && !!value.match(pattern$2.hex);\n  }\n};\n\nvar type$1 = function type(rule, value, source, errors, options) {\n  if (rule.required && value === undefined) {\n    required$1(rule, value, source, errors, options);\n    return;\n  }\n\n  var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];\n  var ruleType = rule.type;\n\n  if (custom.indexOf(ruleType) > -1) {\n    if (!types[ruleType](value)) {\n      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));\n    } // straight typeof check\n\n  } else if (ruleType && typeof value !== rule.type) {\n    errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));\n  }\n};\n\nvar range = function range(rule, value, source, errors, options) {\n  var len = typeof rule.len === 'number';\n  var min = typeof rule.min === 'number';\n  var max = typeof rule.max === 'number'; // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）\n\n  var spRegexp = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n  var val = value;\n  var key = null;\n  var num = typeof value === 'number';\n  var str = typeof value === 'string';\n  var arr = Array.isArray(value);\n\n  if (num) {\n    key = 'number';\n  } else if (str) {\n    key = 'string';\n  } else if (arr) {\n    key = 'array';\n  } // if the value is not of a supported type for range validation\n  // the validation rule rule should use the\n  // type property to also test for a particular type\n\n\n  if (!key) {\n    return false;\n  }\n\n  if (arr) {\n    val = value.length;\n  }\n\n  if (str) {\n    // 处理码点大于U+010000的文字length属性不准确的bug，如\"𠮷𠮷𠮷\".lenght !== 3\n    val = value.replace(spRegexp, '_').length;\n  }\n\n  if (len) {\n    if (val !== rule.len) {\n      errors.push(format(options.messages[key].len, rule.fullField, rule.len));\n    }\n  } else if (min && !max && val < rule.min) {\n    errors.push(format(options.messages[key].min, rule.fullField, rule.min));\n  } else if (max && !min && val > rule.max) {\n    errors.push(format(options.messages[key].max, rule.fullField, rule.max));\n  } else if (min && max && (val < rule.min || val > rule.max)) {\n    errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));\n  }\n};\n\nvar ENUM$1 = 'enum';\n\nvar enumerable$1 = function enumerable(rule, value, source, errors, options) {\n  rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];\n\n  if (rule[ENUM$1].indexOf(value) === -1) {\n    errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(', ')));\n  }\n};\n\nvar pattern$1 = function pattern(rule, value, source, errors, options) {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n\n      if (!rule.pattern.test(value)) {\n        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    } else if (typeof rule.pattern === 'string') {\n      var _pattern = new RegExp(rule.pattern);\n\n      if (!_pattern.test(value)) {\n        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    }\n  }\n};\n\nvar rules = {\n  required: required$1,\n  whitespace: whitespace,\n  type: type$1,\n  range: range,\n  \"enum\": enumerable$1,\n  pattern: pattern$1\n};\n\nvar string = function string(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value, 'string') && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options, 'string');\n\n    if (!isEmptyValue(value, 'string')) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n      rules.pattern(rule, value, source, errors, options);\n\n      if (rule.whitespace === true) {\n        rules.whitespace(rule, value, source, errors, options);\n      }\n    }\n  }\n\n  callback(errors);\n};\n\nvar method = function method(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar number = function number(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (value === '') {\n      value = undefined;\n    }\n\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar _boolean = function _boolean(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar regexp = function regexp(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (!isEmptyValue(value)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar integer = function integer(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar floatFn = function floatFn(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar array = function array(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if ((value === undefined || value === null) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options, 'array');\n\n    if (value !== undefined && value !== null) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar object = function object(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar ENUM = 'enum';\n\nvar enumerable = function enumerable(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules[ENUM](rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar pattern = function pattern(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value, 'string') && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (!isEmptyValue(value, 'string')) {\n      rules.pattern(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar date = function date(rule, value, callback, source, options) {\n  // console.log('integer rule called %j', rule);\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field); // console.log('validate on %s value', value);\n\n  if (validate) {\n    if (isEmptyValue(value, 'date') && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (!isEmptyValue(value, 'date')) {\n      var dateObject;\n\n      if (value instanceof Date) {\n        dateObject = value;\n      } else {\n        dateObject = new Date(value);\n      }\n\n      rules.type(rule, dateObject, source, errors, options);\n\n      if (dateObject) {\n        rules.range(rule, dateObject.getTime(), source, errors, options);\n      }\n    }\n  }\n\n  callback(errors);\n};\n\nvar required = function required(rule, value, callback, source, options) {\n  var errors = [];\n  var type = Array.isArray(value) ? 'array' : typeof value;\n  rules.required(rule, value, source, errors, options, type);\n  callback(errors);\n};\n\nvar type = function type(rule, value, callback, source, options) {\n  var ruleType = rule.type;\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value, ruleType) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options, ruleType);\n\n    if (!isEmptyValue(value, ruleType)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n};\n\nvar any = function any(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n  }\n\n  callback(errors);\n};\n\nvar validators = {\n  string: string,\n  method: method,\n  number: number,\n  \"boolean\": _boolean,\n  regexp: regexp,\n  integer: integer,\n  \"float\": floatFn,\n  array: array,\n  object: object,\n  \"enum\": enumerable,\n  pattern: pattern,\n  date: date,\n  url: type,\n  hex: type,\n  email: type,\n  required: required,\n  any: any\n};\n\nfunction newMessages() {\n  return {\n    \"default\": 'Validation error on field %s',\n    required: '%s is required',\n    \"enum\": '%s must be one of %s',\n    whitespace: '%s cannot be empty',\n    date: {\n      format: '%s date %s is invalid for format %s',\n      parse: '%s date could not be parsed, %s is invalid ',\n      invalid: '%s date %s is invalid'\n    },\n    types: {\n      string: '%s is not a %s',\n      method: '%s is not a %s (function)',\n      array: '%s is not an %s',\n      object: '%s is not an %s',\n      number: '%s is not a %s',\n      date: '%s is not a %s',\n      \"boolean\": '%s is not a %s',\n      integer: '%s is not an %s',\n      \"float\": '%s is not a %s',\n      regexp: '%s is not a valid %s',\n      email: '%s is not a valid %s',\n      url: '%s is not a valid %s',\n      hex: '%s is not a valid %s'\n    },\n    string: {\n      len: '%s must be exactly %s characters',\n      min: '%s must be at least %s characters',\n      max: '%s cannot be longer than %s characters',\n      range: '%s must be between %s and %s characters'\n    },\n    number: {\n      len: '%s must equal %s',\n      min: '%s cannot be less than %s',\n      max: '%s cannot be greater than %s',\n      range: '%s must be between %s and %s'\n    },\n    array: {\n      len: '%s must be exactly %s in length',\n      min: '%s cannot be less than %s in length',\n      max: '%s cannot be greater than %s in length',\n      range: '%s must be between %s and %s in length'\n    },\n    pattern: {\n      mismatch: '%s value %s does not match pattern %s'\n    },\n    clone: function clone() {\n      var cloned = JSON.parse(JSON.stringify(this));\n      cloned.clone = this.clone;\n      return cloned;\n    }\n  };\n}\n\nvar messages = newMessages();\n/**\n *  Encapsulates a validation schema.\n *\n *  @param descriptor An object declaring validation rules\n *  for this schema.\n */\n\nvar Schema = /*#__PURE__*/function () {\n  // ========================= Static =========================\n  // ======================== Instance ========================\n  function Schema(descriptor) {\n    this.rules = null;\n    this._messages = messages;\n    this.define(descriptor);\n  }\n\n  var _proto = Schema.prototype;\n\n  _proto.define = function define(rules) {\n    var _this = this;\n\n    if (!rules) {\n      throw new Error('Cannot configure a schema with no rules');\n    }\n\n    if (typeof rules !== 'object' || Array.isArray(rules)) {\n      throw new Error('Rules must be an object');\n    }\n\n    this.rules = {};\n    Object.keys(rules).forEach(function (name) {\n      var item = rules[name];\n      _this.rules[name] = Array.isArray(item) ? item : [item];\n    });\n  };\n\n  _proto.messages = function messages(_messages) {\n    if (_messages) {\n      this._messages = deepMerge(newMessages(), _messages);\n    }\n\n    return this._messages;\n  };\n\n  _proto.validate = function validate(source_, o, oc) {\n    var _this2 = this;\n\n    if (o === void 0) {\n      o = {};\n    }\n\n    if (oc === void 0) {\n      oc = function oc() {};\n    }\n\n    var source = source_;\n    var options = o;\n    var callback = oc;\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (!this.rules || Object.keys(this.rules).length === 0) {\n      if (callback) {\n        callback(null, source);\n      }\n\n      return Promise.resolve(source);\n    }\n\n    function complete(results) {\n      var errors = [];\n      var fields = {};\n\n      function add(e) {\n        if (Array.isArray(e)) {\n          var _errors;\n\n          errors = (_errors = errors).concat.apply(_errors, e);\n        } else {\n          errors.push(e);\n        }\n      }\n\n      for (var i = 0; i < results.length; i++) {\n        add(results[i]);\n      }\n\n      if (!errors.length) {\n        callback(null, source);\n      } else {\n        fields = convertFieldsError(errors);\n        callback(errors, fields);\n      }\n    }\n\n    if (options.messages) {\n      var messages$1 = this.messages();\n\n      if (messages$1 === messages) {\n        messages$1 = newMessages();\n      }\n\n      deepMerge(messages$1, options.messages);\n      options.messages = messages$1;\n    } else {\n      options.messages = this.messages();\n    }\n\n    var series = {};\n    var keys = options.keys || Object.keys(this.rules);\n    keys.forEach(function (z) {\n      var arr = _this2.rules[z];\n      var value = source[z];\n      arr.forEach(function (r) {\n        var rule = r;\n\n        if (typeof rule.transform === 'function') {\n          if (source === source_) {\n            source = _extends({}, source);\n          }\n\n          value = source[z] = rule.transform(value);\n        }\n\n        if (typeof rule === 'function') {\n          rule = {\n            validator: rule\n          };\n        } else {\n          rule = _extends({}, rule);\n        } // Fill validator. Skip if nothing need to validate\n\n\n        rule.validator = _this2.getValidationMethod(rule);\n\n        if (!rule.validator) {\n          return;\n        }\n\n        rule.field = z;\n        rule.fullField = rule.fullField || z;\n        rule.type = _this2.getType(rule);\n        series[z] = series[z] || [];\n        series[z].push({\n          rule: rule,\n          value: value,\n          source: source,\n          field: z\n        });\n      });\n    });\n    var errorFields = {};\n    return asyncMap(series, options, function (data, doIt) {\n      var rule = data.rule;\n      var deep = (rule.type === 'object' || rule.type === 'array') && (typeof rule.fields === 'object' || typeof rule.defaultField === 'object');\n      deep = deep && (rule.required || !rule.required && data.value);\n      rule.field = data.field;\n\n      function addFullField(key, schema) {\n        return _extends({}, schema, {\n          fullField: rule.fullField + \".\" + key,\n          fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]\n        });\n      }\n\n      function cb(e) {\n        if (e === void 0) {\n          e = [];\n        }\n\n        var errorList = Array.isArray(e) ? e : [e];\n\n        if (!options.suppressWarning && errorList.length) {\n          Schema.warning('async-validator:', errorList);\n        }\n\n        if (errorList.length && rule.message !== undefined) {\n          errorList = [].concat(rule.message);\n        } // Fill error info\n\n\n        var filledErrors = errorList.map(complementError(rule, source));\n\n        if (options.first && filledErrors.length) {\n          errorFields[rule.field] = 1;\n          return doIt(filledErrors);\n        }\n\n        if (!deep) {\n          doIt(filledErrors);\n        } else {\n          // if rule is required but the target object\n          // does not exist fail at the rule level and don't\n          // go deeper\n          if (rule.required && !data.value) {\n            if (rule.message !== undefined) {\n              filledErrors = [].concat(rule.message).map(complementError(rule, source));\n            } else if (options.error) {\n              filledErrors = [options.error(rule, format(options.messages.required, rule.field))];\n            }\n\n            return doIt(filledErrors);\n          }\n\n          var fieldsSchema = {};\n\n          if (rule.defaultField) {\n            Object.keys(data.value).map(function (key) {\n              fieldsSchema[key] = rule.defaultField;\n            });\n          }\n\n          fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);\n          var paredFieldsSchema = {};\n          Object.keys(fieldsSchema).forEach(function (field) {\n            var fieldSchema = fieldsSchema[field];\n            var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];\n            paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));\n          });\n          var schema = new Schema(paredFieldsSchema);\n          schema.messages(options.messages);\n\n          if (data.rule.options) {\n            data.rule.options.messages = options.messages;\n            data.rule.options.error = options.error;\n          }\n\n          schema.validate(data.value, data.rule.options || options, function (errs) {\n            var finalErrors = [];\n\n            if (filledErrors && filledErrors.length) {\n              finalErrors.push.apply(finalErrors, filledErrors);\n            }\n\n            if (errs && errs.length) {\n              finalErrors.push.apply(finalErrors, errs);\n            }\n\n            doIt(finalErrors.length ? finalErrors : null);\n          });\n        }\n      }\n\n      var res;\n\n      if (rule.asyncValidator) {\n        res = rule.asyncValidator(rule, data.value, cb, data.source, options);\n      } else if (rule.validator) {\n        res = rule.validator(rule, data.value, cb, data.source, options);\n\n        if (res === true) {\n          cb();\n        } else if (res === false) {\n          cb(typeof rule.message === 'function' ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + \" fails\");\n        } else if (res instanceof Array) {\n          cb(res);\n        } else if (res instanceof Error) {\n          cb(res.message);\n        }\n      }\n\n      if (res && res.then) {\n        res.then(function () {\n          return cb();\n        }, function (e) {\n          return cb(e);\n        });\n      }\n    }, function (results) {\n      complete(results);\n    }, source);\n  };\n\n  _proto.getType = function getType(rule) {\n    if (rule.type === undefined && rule.pattern instanceof RegExp) {\n      rule.type = 'pattern';\n    }\n\n    if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) {\n      throw new Error(format('Unknown rule type %s', rule.type));\n    }\n\n    return rule.type || 'string';\n  };\n\n  _proto.getValidationMethod = function getValidationMethod(rule) {\n    if (typeof rule.validator === 'function') {\n      return rule.validator;\n    }\n\n    var keys = Object.keys(rule);\n    var messageIndex = keys.indexOf('message');\n\n    if (messageIndex !== -1) {\n      keys.splice(messageIndex, 1);\n    }\n\n    if (keys.length === 1 && keys[0] === 'required') {\n      return validators.required;\n    }\n\n    return validators[this.getType(rule)] || undefined;\n  };\n\n  return Schema;\n}();\n\nSchema.register = function register(type, validator) {\n  if (typeof validator !== 'function') {\n    throw new Error('Cannot register a validator by type, validator is not a function');\n  }\n\n  validators[type] = validator;\n};\n\nSchema.warning = warning;\nSchema.messages = messages;\nSchema.validators = validators;\nexport { Schema as default };","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/util.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/rule/required.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/rule/whitespace.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/rule/type.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/rule/range.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/rule/enum.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/rule/pattern.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/rule/index.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/string.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/method.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/number.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/boolean.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/regexp.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/integer.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/float.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/array.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/object.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/enum.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/pattern.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/date.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/required.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/type.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/any.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/validator/index.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/messages.ts","/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/src/index.ts"],"names":["formatRegExp","warning","process","console","errors","fields","field","error","args","i","len","template","str","x","String","Number","JSON","type","value","Array","isNativeStringType","results","total","arrLength","arr","callback","func","index","original","next","ret","Object","objArr","AsyncValidationError","option","pending","reject","convertFieldsError","resolve","flattenArr","flattenObjArr","asyncSerialArray","firstFields","objArrKeys","objArrLength","asyncParallelArray","obj","v","path","rule","fieldValue","getValue","source","oe","isErrorObj","message","fullField","target","required","isEmptyValue","format","options","whitespace","pattern","email","url","hex","types","integer","parseInt","array","regexp","date","isNaN","number","object","method","custom","ruleType","range","min","max","spRegexp","val","key","num","ENUM","enumerable","_pattern","string","validate","rules","boolean","floatFn","dateObject","any","parse","invalid","mismatch","clone","cloned","messages","newMessages","Schema","register","validators","defaultMessages","_messages","define","item","deepMerge","o","oc","Promise","add","series","keys","validator","z","errorFields","asyncMap","data","deep","fullFields","e","errorList","filledErrors","complementError","doIt","fieldsSchema","paredFieldsSchema","fieldSchema","fieldSchemaList","addFullField","schema","finalErrors","errs","res","cb","complete","getType","getValidationMethod","messageIndex"],"mappings":"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","sourcesContent":["/* eslint no-console:0 */\n\nimport {\n  ValidateError,\n  ValidateOption,\n  RuleValuePackage,\n  InternalRuleItem,\n  SyncErrorType,\n  RuleType,\n  Value,\n  Values,\n} from './interface';\n\nconst formatRegExp = /%[sdj%]/g;\n\ndeclare var ASYNC_VALIDATOR_NO_WARNING;\n\nexport let warning: (type: string, errors: SyncErrorType[]) => void = () => { };\n\n// don't print warning message when in production env or node runtime\nif (\n  typeof process !== 'undefined' &&\n  process.env &&\n  process.env.NODE_ENV !== 'production' &&\n  typeof window !== 'undefined' &&\n  typeof document !== 'undefined'\n) {\n  warning = (type, errors) => {\n    if (typeof console !== 'undefined' && console.warn &&\n      typeof ASYNC_VALIDATOR_NO_WARNING === 'undefined'\n    ) {\n      if (errors.every(e => typeof e === 'string')) {\n        console.warn(type, errors);\n      }\n    }\n  };\n}\n\nexport function convertFieldsError(\n  errors: ValidateError[],\n): Record<string, ValidateError[]> {\n  if (!errors || !errors.length) return null;\n  const fields = {};\n  errors.forEach(error => {\n    const field = error.field;\n    fields[field] = fields[field] || [];\n    fields[field].push(error);\n  });\n  return fields;\n}\n\nexport function format(\n  template: ((...args: any[]) => string) | string,\n  ...args: any[]\n): string {\n  let i = 0;\n  const len = args.length;\n  if (typeof template === 'function') {\n    return template.apply(null, args);\n  }\n  if (typeof template === 'string') {\n    let str = template.replace(formatRegExp, x => {\n      if (x === '%%') {\n        return '%';\n      }\n      if (i >= len) {\n        return x;\n      }\n      switch (x) {\n        case '%s':\n          return String(args[i++]);\n        case '%d':\n          return (Number(args[i++]) as unknown) as string;\n        case '%j':\n          try {\n            return JSON.stringify(args[i++]);\n          } catch (_) {\n            return '[Circular]';\n          }\n          break;\n        default:\n          return x;\n      }\n    });\n    return str;\n  }\n  return template;\n}\n\nfunction isNativeStringType(type: string) {\n  return (\n    type === 'string' ||\n    type === 'url' ||\n    type === 'hex' ||\n    type === 'email' ||\n    type === 'date' ||\n    type === 'pattern'\n  );\n}\n\nexport function isEmptyValue(value: Value, type?: string) {\n  if (value === undefined || value === null) {\n    return true;\n  }\n  if (type === 'array' && Array.isArray(value) && !value.length) {\n    return true;\n  }\n  if (isNativeStringType(type) && typeof value === 'string' && !value) {\n    return true;\n  }\n  return false;\n}\n\nexport function isEmptyObject(obj: object) {\n  return Object.keys(obj).length === 0;\n}\n\nfunction asyncParallelArray(\n  arr: RuleValuePackage[],\n  func: ValidateFunc,\n  callback: (errors: ValidateError[]) => void,\n) {\n  const results: ValidateError[] = [];\n  let total = 0;\n  const arrLength = arr.length;\n\n  function count(errors: ValidateError[]) {\n    results.push(...(errors || []));\n    total++;\n    if (total === arrLength) {\n      callback(results);\n    }\n  }\n\n  arr.forEach(a => {\n    func(a, count);\n  });\n}\n\nfunction asyncSerialArray(\n  arr: RuleValuePackage[],\n  func: ValidateFunc,\n  callback: (errors: ValidateError[]) => void,\n) {\n  let index = 0;\n  const arrLength = arr.length;\n\n  function next(errors: ValidateError[]) {\n    if (errors && errors.length) {\n      callback(errors);\n      return;\n    }\n    const original = index;\n    index = index + 1;\n    if (original < arrLength) {\n      func(arr[original], next);\n    } else {\n      callback([]);\n    }\n  }\n\n  next([]);\n}\n\nfunction flattenObjArr(objArr: Record<string, RuleValuePackage[]>) {\n  const ret: RuleValuePackage[] = [];\n  Object.keys(objArr).forEach(k => {\n    ret.push(...(objArr[k] || []));\n  });\n  return ret;\n}\n\nexport class AsyncValidationError extends Error {\n  errors: ValidateError[];\n  fields: Record<string, ValidateError[]>;\n\n  constructor(\n    errors: ValidateError[],\n    fields: Record<string, ValidateError[]>,\n  ) {\n    super('Async Validation Error');\n    this.errors = errors;\n    this.fields = fields;\n  }\n}\n\ntype ValidateFunc = (\n  data: RuleValuePackage,\n  doIt: (errors: ValidateError[]) => void,\n) => void;\n\nexport function asyncMap(\n  objArr: Record<string, RuleValuePackage[]>,\n  option: ValidateOption,\n  func: ValidateFunc,\n  callback: (errors: ValidateError[]) => void,\n  source: Values,\n): Promise<Values> {\n  if (option.first) {\n    const pending = new Promise<Values>((resolve, reject) => {\n      const next = (errors: ValidateError[]) => {\n        callback(errors);\n        return errors.length\n          ? reject(new AsyncValidationError(errors, convertFieldsError(errors)))\n          : resolve(source);\n      };\n      const flattenArr = flattenObjArr(objArr);\n      asyncSerialArray(flattenArr, func, next);\n    });\n    pending.catch(e => e);\n    return pending;\n  }\n  const firstFields =\n    option.firstFields === true\n      ? Object.keys(objArr)\n      : option.firstFields || [];\n\n  const objArrKeys = Object.keys(objArr);\n  const objArrLength = objArrKeys.length;\n  let total = 0;\n  const results: ValidateError[] = [];\n  const pending = new Promise<Values>((resolve, reject) => {\n    const next = (errors: ValidateError[]) => {\n      results.push.apply(results, errors);\n      total++;\n      if (total === objArrLength) {\n        callback(results);\n        return results.length\n          ? reject(\n            new AsyncValidationError(results, convertFieldsError(results)),\n          )\n          : resolve(source);\n      }\n    };\n    if (!objArrKeys.length) {\n      callback(results);\n      resolve(source);\n    }\n    objArrKeys.forEach(key => {\n      const arr = objArr[key];\n      if (firstFields.indexOf(key) !== -1) {\n        asyncSerialArray(arr, func, next);\n      } else {\n        asyncParallelArray(arr, func, next);\n      }\n    });\n  });\n  pending.catch(e => e);\n  return pending;\n}\n\nfunction isErrorObj(\n  obj: ValidateError | string | (() => string),\n): obj is ValidateError {\n  return !!(obj && (obj as ValidateError).message !== undefined);\n}\n\nfunction getValue(value: Values, path: string[]) {\n  let v = value;\n  for (let i = 0; i < path.length; i++) {\n    if (v == undefined) {\n      return v;\n    }\n    v = v[path[i]];\n  }\n  return v;\n}\n\nexport function complementError(rule: InternalRuleItem, source: Values) {\n  return (oe: ValidateError | (() => string) | string): ValidateError => {\n    let fieldValue;\n    if (rule.fullFields) {\n      fieldValue = getValue(source, rule.fullFields);\n    } else {\n      fieldValue = source[(oe as any).field || rule.fullField];\n    }\n    if (isErrorObj(oe)) {\n      oe.field = oe.field || rule.fullField;\n      oe.fieldValue = fieldValue;\n      return oe;\n    }\n    return {\n      message: typeof oe === 'function' ? oe() : oe,\n      fieldValue,\n      field: ((oe as unknown) as ValidateError).field || rule.fullField,\n    };\n  };\n}\n\nexport function deepMerge<T extends object>(target: T, source: Partial<T>): T {\n  if (source) {\n    for (const s in source) {\n      if (source.hasOwnProperty(s)) {\n        const value = source[s];\n        if (typeof value === 'object' && typeof target[s] === 'object') {\n          target[s] = {\n            ...target[s],\n            ...value,\n          };\n        } else {\n          target[s] = value;\n        }\n      }\n    }\n  }\n  return target;\n}\n","import { ExecuteRule } from '../interface';\nimport { format, isEmptyValue } from '../util';\n\nconst required: ExecuteRule = (rule, value, source, errors, options, type) => {\n  if (\n    rule.required &&\n    (!source.hasOwnProperty(rule.field) ||\n      isEmptyValue(value, type || rule.type))\n  ) {\n    errors.push(format(options.messages.required, rule.fullField));\n  }\n};\n\nexport default required;\n","import { ExecuteRule } from '../interface';\nimport { format } from '../util';\n\n/**\n *  Rule for validating whitespace.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nconst whitespace: ExecuteRule = (rule, value, source, errors, options) => {\n  if (/^\\s+$/.test(value) || value === '') {\n    errors.push(format(options.messages.whitespace, rule.fullField));\n  }\n};\n\nexport default whitespace;\n","import { ExecuteRule, Value } from '../interface';\nimport { format } from '../util';\nimport required from './required';\n\n/* eslint max-len:0 */\n\nconst pattern = {\n  // http://emailregex.com/\n  email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+\\.)+[a-zA-Z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}))$/,\n  url: new RegExp(\n    '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$',\n    'i',\n  ),\n  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,\n};\n\nconst types = {\n  integer(value: Value) {\n    return types.number(value) && parseInt(value, 10) === value;\n  },\n  float(value: Value) {\n    return types.number(value) && !types.integer(value);\n  },\n  array(value: Value) {\n    return Array.isArray(value);\n  },\n  regexp(value: Value) {\n    if (value instanceof RegExp) {\n      return true;\n    }\n    try {\n      return !!new RegExp(value);\n    } catch (e) {\n      return false;\n    }\n  },\n  date(value: Value) {\n    return (\n      typeof value.getTime === 'function' &&\n      typeof value.getMonth === 'function' &&\n      typeof value.getYear === 'function' &&\n      !isNaN(value.getTime())\n    );\n  },\n  number(value: Value) {\n    if (isNaN(value)) {\n      return false;\n    }\n    return typeof value === 'number';\n  },\n  object(value: Value) {\n    return typeof value === 'object' && !types.array(value);\n  },\n  method(value: Value) {\n    return typeof value === 'function';\n  },\n  email(value: Value) {\n    return (\n      typeof value === 'string' &&\n      value.length <= 320 &&\n      !!value.match(pattern.email)\n    );\n  },\n  url(value: Value) {\n    return (\n      typeof value === 'string' &&\n      value.length <= 2048 &&\n      !!value.match(pattern.url)\n    );\n  },\n  hex(value: Value) {\n    return typeof value === 'string' && !!value.match(pattern.hex);\n  },\n};\n\nconst type: ExecuteRule = (rule, value, source, errors, options) => {\n  if (rule.required && value === undefined) {\n    required(rule, value, source, errors, options);\n    return;\n  }\n  const custom = [\n    'integer',\n    'float',\n    'array',\n    'regexp',\n    'object',\n    'method',\n    'email',\n    'number',\n    'date',\n    'url',\n    'hex',\n  ];\n  const ruleType = rule.type;\n  if (custom.indexOf(ruleType) > -1) {\n    if (!types[ruleType](value)) {\n      errors.push(\n        format(options.messages.types[ruleType], rule.fullField, rule.type),\n      );\n    }\n    // straight typeof check\n  } else if (ruleType && typeof value !== rule.type) {\n    errors.push(\n      format(options.messages.types[ruleType], rule.fullField, rule.type),\n    );\n  }\n};\n\nexport default type;\n","import { ExecuteRule } from '../interface';\nimport { format } from '../util';\n\nconst range: ExecuteRule = (rule, value, source, errors, options) => {\n  const len = typeof rule.len === 'number';\n  const min = typeof rule.min === 'number';\n  const max = typeof rule.max === 'number';\n  // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）\n  const spRegexp = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n  let val = value;\n  let key = null;\n  const num = typeof value === 'number';\n  const str = typeof value === 'string';\n  const arr = Array.isArray(value);\n  if (num) {\n    key = 'number';\n  } else if (str) {\n    key = 'string';\n  } else if (arr) {\n    key = 'array';\n  }\n  // if the value is not of a supported type for range validation\n  // the validation rule rule should use the\n  // type property to also test for a particular type\n  if (!key) {\n    return false;\n  }\n  if (arr) {\n    val = value.length;\n  }\n  if (str) {\n    // 处理码点大于U+010000的文字length属性不准确的bug，如\"𠮷𠮷𠮷\".lenght !== 3\n    val = value.replace(spRegexp, '_').length;\n  }\n  if (len) {\n    if (val !== rule.len) {\n      errors.push(format(options.messages[key].len, rule.fullField, rule.len));\n    }\n  } else if (min && !max && val < rule.min) {\n    errors.push(format(options.messages[key].min, rule.fullField, rule.min));\n  } else if (max && !min && val > rule.max) {\n    errors.push(format(options.messages[key].max, rule.fullField, rule.max));\n  } else if (min && max && (val < rule.min || val > rule.max)) {\n    errors.push(\n      format(options.messages[key].range, rule.fullField, rule.min, rule.max),\n    );\n  }\n};\n\nexport default range;\n","import { ExecuteRule } from '../interface';\nimport { format } from '../util';\n\nconst ENUM = 'enum' as const;\n\nconst enumerable: ExecuteRule = (rule, value, source, errors, options) => {\n  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];\n  if (rule[ENUM].indexOf(value) === -1) {\n    errors.push(\n      format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')),\n    );\n  }\n};\n\nexport default enumerable;\n","import { ExecuteRule } from '../interface';\nimport { format } from '../util';\n\nconst pattern: ExecuteRule = (rule, value, source, errors, options) => {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n      if (!rule.pattern.test(value)) {\n        errors.push(\n          format(\n            options.messages.pattern.mismatch,\n            rule.fullField,\n            value,\n            rule.pattern,\n          ),\n        );\n      }\n    } else if (typeof rule.pattern === 'string') {\n      const _pattern = new RegExp(rule.pattern);\n      if (!_pattern.test(value)) {\n        errors.push(\n          format(\n            options.messages.pattern.mismatch,\n            rule.fullField,\n            value,\n            rule.pattern,\n          ),\n        );\n      }\n    }\n  }\n};\n\nexport default pattern;\n","import required from './required';\nimport whitespace from './whitespace';\nimport type from './type';\nimport range from './range';\nimport enumRule from './enum';\nimport pattern from './pattern';\n\nexport default {\n  required,\n  whitespace,\n  type,\n  range,\n  enum: enumRule,\n  pattern,\n};\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst string: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value, 'string') && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options, 'string');\n    if (!isEmptyValue(value, 'string')) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n      rules.pattern(rule, value, source, errors, options);\n      if (rule.whitespace === true) {\n        rules.whitespace(rule, value, source, errors, options);\n      }\n    }\n  }\n  callback(errors);\n};\n\nexport default string;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst method: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default method;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst number: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (value === '') {\n      value = undefined;\n    }\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default number;\n","import { isEmptyValue } from '../util';\nimport rules from '../rule';\nimport { ExecuteValidator } from '../interface';\n\nconst boolean: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default boolean;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst regexp: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (!isEmptyValue(value)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default regexp;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst integer: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default integer;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst floatFn: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default floatFn;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule/index';\n\nconst array: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if ((value === undefined || value === null) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options, 'array');\n    if (value !== undefined && value !== null) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default array;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst object: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default object;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst ENUM = 'enum' as const;\n\nconst enumerable: ExecuteValidator = (\n  rule,\n  value,\n  callback,\n  source,\n  options,\n) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules[ENUM](rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default enumerable;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst pattern: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value, 'string') && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (!isEmptyValue(value, 'string')) {\n      rules.pattern(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default pattern;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst date: ExecuteValidator = (rule, value, callback, source, options) => {\n  // console.log('integer rule called %j', rule);\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  // console.log('validate on %s value', value);\n  if (validate) {\n    if (isEmptyValue(value, 'date') && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (!isEmptyValue(value, 'date')) {\n      let dateObject;\n\n      if (value instanceof Date) {\n        dateObject = value;\n      } else {\n        dateObject = new Date(value);\n      }\n\n      rules.type(rule, dateObject, source, errors, options);\n      if (dateObject) {\n        rules.range(rule, dateObject.getTime(), source, errors, options);\n      }\n    }\n  }\n  callback(errors);\n};\n\nexport default date;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\n\nconst required: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const type = Array.isArray(value) ? 'array' : typeof value;\n  rules.required(rule, value, source, errors, options, type);\n  callback(errors);\n};\n\nexport default required;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst type: ExecuteValidator = (rule, value, callback, source, options) => {\n  const ruleType = rule.type;\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value, ruleType) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options, ruleType);\n    if (!isEmptyValue(value, ruleType)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n};\n\nexport default type;\n","import { ExecuteValidator } from '../interface';\nimport rules from '../rule';\nimport { isEmptyValue } from '../util';\n\nconst any: ExecuteValidator = (rule, value, callback, source, options) => {\n  const errors: string[] = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n  }\n  callback(errors);\n};\n\nexport default any;\n","import string from './string';\nimport method from './method';\nimport number from './number';\nimport boolean from './boolean';\nimport regexp from './regexp';\nimport integer from './integer';\nimport float from './float';\nimport array from './array';\nimport object from './object';\nimport enumValidator from './enum';\nimport pattern from './pattern';\nimport date from './date';\nimport required from './required';\nimport type from './type';\nimport any from './any';\n\nexport default {\n  string,\n  method,\n  number,\n  boolean,\n  regexp,\n  integer,\n  float,\n  array,\n  object,\n  enum: enumValidator,\n  pattern,\n  date,\n  url: type,\n  hex: type,\n  email: type,\n  required,\n  any,\n};\n","import { InternalValidateMessages } from './interface';\n\nexport function newMessages(): InternalValidateMessages {\n  return {\n    default: 'Validation error on field %s',\n    required: '%s is required',\n    enum: '%s must be one of %s',\n    whitespace: '%s cannot be empty',\n    date: {\n      format: '%s date %s is invalid for format %s',\n      parse: '%s date could not be parsed, %s is invalid ',\n      invalid: '%s date %s is invalid',\n    },\n    types: {\n      string: '%s is not a %s',\n      method: '%s is not a %s (function)',\n      array: '%s is not an %s',\n      object: '%s is not an %s',\n      number: '%s is not a %s',\n      date: '%s is not a %s',\n      boolean: '%s is not a %s',\n      integer: '%s is not an %s',\n      float: '%s is not a %s',\n      regexp: '%s is not a valid %s',\n      email: '%s is not a valid %s',\n      url: '%s is not a valid %s',\n      hex: '%s is not a valid %s',\n    },\n    string: {\n      len: '%s must be exactly %s characters',\n      min: '%s must be at least %s characters',\n      max: '%s cannot be longer than %s characters',\n      range: '%s must be between %s and %s characters',\n    },\n    number: {\n      len: '%s must equal %s',\n      min: '%s cannot be less than %s',\n      max: '%s cannot be greater than %s',\n      range: '%s must be between %s and %s',\n    },\n    array: {\n      len: '%s must be exactly %s in length',\n      min: '%s cannot be less than %s in length',\n      max: '%s cannot be greater than %s in length',\n      range: '%s must be between %s and %s in length',\n    },\n    pattern: {\n      mismatch: '%s value %s does not match pattern %s',\n    },\n    clone() {\n      const cloned = JSON.parse(JSON.stringify(this));\n      cloned.clone = this.clone;\n      return cloned;\n    },\n  };\n}\n\nexport const messages = newMessages();\n","import {\n  format,\n  complementError,\n  asyncMap,\n  warning,\n  deepMerge,\n  convertFieldsError,\n} from './util';\nimport validators from './validator/index';\nimport { messages as defaultMessages, newMessages } from './messages';\nimport {\n  InternalRuleItem,\n  InternalValidateMessages,\n  Rule,\n  RuleItem,\n  Rules,\n  ValidateCallback,\n  ValidateMessages,\n  ValidateOption,\n  Values,\n  RuleValuePackage,\n  ValidateError,\n  ValidateFieldsError,\n  SyncErrorType,\n  ValidateResult,\n} from './interface';\n\nexport * from './interface';\n\n/**\n *  Encapsulates a validation schema.\n *\n *  @param descriptor An object declaring validation rules\n *  for this schema.\n */\nclass Schema {\n  // ========================= Static =========================\n  static register = function register(type: string, validator) {\n    if (typeof validator !== 'function') {\n      throw new Error(\n        'Cannot register a validator by type, validator is not a function',\n      );\n    }\n    validators[type] = validator;\n  };\n\n  static warning = warning;\n\n  static messages = defaultMessages;\n\n  static validators = validators;\n\n  // ======================== Instance ========================\n  rules: Record<string, RuleItem[]> = null;\n  _messages: InternalValidateMessages = defaultMessages;\n\n  constructor(descriptor: Rules) {\n    this.define(descriptor);\n  }\n\n  define(rules: Rules) {\n    if (!rules) {\n      throw new Error('Cannot configure a schema with no rules');\n    }\n    if (typeof rules !== 'object' || Array.isArray(rules)) {\n      throw new Error('Rules must be an object');\n    }\n    this.rules = {};\n\n    Object.keys(rules).forEach(name => {\n      const item: Rule = rules[name];\n      this.rules[name] = Array.isArray(item) ? item : [item];\n    });\n  }\n\n  messages(messages?: ValidateMessages) {\n    if (messages) {\n      this._messages = deepMerge(newMessages(), messages);\n    }\n    return this._messages;\n  }\n\n  validate(\n    source: Values,\n    option?: ValidateOption,\n    callback?: ValidateCallback,\n  ): Promise<Values>;\n  validate(source: Values, callback: ValidateCallback): Promise<Values>;\n  validate(source: Values): Promise<Values>;\n\n  validate(source_: Values, o: any = {}, oc: any = () => {}): Promise<Values> {\n    let source: Values = source_;\n    let options: ValidateOption = o;\n    let callback: ValidateCallback = oc;\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!this.rules || Object.keys(this.rules).length === 0) {\n      if (callback) {\n        callback(null, source);\n      }\n      return Promise.resolve(source);\n    }\n\n    function complete(results: (ValidateError | ValidateError[])[]) {\n      let errors: ValidateError[] = [];\n      let fields: ValidateFieldsError = {};\n\n      function add(e: ValidateError | ValidateError[]) {\n        if (Array.isArray(e)) {\n          errors = errors.concat(...e);\n        } else {\n          errors.push(e);\n        }\n      }\n\n      for (let i = 0; i < results.length; i++) {\n        add(results[i]);\n      }\n      if (!errors.length) {\n        callback(null, source);\n      } else {\n        fields = convertFieldsError(errors);\n        (callback as (\n          errors: ValidateError[],\n          fields: ValidateFieldsError,\n        ) => void)(errors, fields);\n      }\n    }\n\n    if (options.messages) {\n      let messages = this.messages();\n      if (messages === defaultMessages) {\n        messages = newMessages();\n      }\n      deepMerge(messages, options.messages);\n      options.messages = messages;\n    } else {\n      options.messages = this.messages();\n    }\n\n    const series: Record<string, RuleValuePackage[]> = {};\n    const keys = options.keys || Object.keys(this.rules);\n    keys.forEach(z => {\n      const arr = this.rules[z];\n      let value = source[z];\n      arr.forEach(r => {\n        let rule: InternalRuleItem = r;\n        if (typeof rule.transform === 'function') {\n          if (source === source_) {\n            source = { ...source };\n          }\n          value = source[z] = rule.transform(value);\n        }\n        if (typeof rule === 'function') {\n          rule = {\n            validator: rule,\n          };\n        } else {\n          rule = { ...rule };\n        }\n\n        // Fill validator. Skip if nothing need to validate\n        rule.validator = this.getValidationMethod(rule);\n        if (!rule.validator) {\n          return;\n        }\n\n        rule.field = z;\n        rule.fullField = rule.fullField || z;\n        rule.type = this.getType(rule);\n        series[z] = series[z] || [];\n        series[z].push({\n          rule,\n          value,\n          source,\n          field: z,\n        });\n      });\n    });\n    const errorFields = {};\n    return asyncMap(\n      series,\n      options,\n      (data, doIt) => {\n        const rule = data.rule;\n        let deep =\n          (rule.type === 'object' || rule.type === 'array') &&\n          (typeof rule.fields === 'object' ||\n            typeof rule.defaultField === 'object');\n        deep = deep && (rule.required || (!rule.required && data.value));\n        rule.field = data.field;\n\n        function addFullField(key: string, schema: RuleItem) {\n          return {\n            ...schema,\n            fullField: `${rule.fullField}.${key}`,\n            fullFields: rule.fullFields ? [...rule.fullFields, key] : [key],\n          };\n        }\n\n        function cb(e: SyncErrorType | SyncErrorType[] = []) {\n          let errorList = Array.isArray(e) ? e : [e];\n          if (!options.suppressWarning && errorList.length) {\n            Schema.warning('async-validator:', errorList);\n          }\n          if (errorList.length && rule.message !== undefined) {\n            errorList = [].concat(rule.message);\n          }\n\n          // Fill error info\n          let filledErrors = errorList.map(complementError(rule, source));\n\n          if (options.first && filledErrors.length) {\n            errorFields[rule.field] = 1;\n            return doIt(filledErrors);\n          }\n          if (!deep) {\n            doIt(filledErrors);\n          } else {\n            // if rule is required but the target object\n            // does not exist fail at the rule level and don't\n            // go deeper\n            if (rule.required && !data.value) {\n              if (rule.message !== undefined) {\n                filledErrors = []\n                  .concat(rule.message)\n                  .map(complementError(rule, source));\n              } else if (options.error) {\n                filledErrors = [\n                  options.error(\n                    rule,\n                    format(options.messages.required, rule.field),\n                  ),\n                ];\n              }\n              return doIt(filledErrors);\n            }\n\n            let fieldsSchema: Record<string, Rule> = {};\n            if (rule.defaultField) {\n              Object.keys(data.value).map(key => {\n                fieldsSchema[key] = rule.defaultField;\n              });\n            }\n            fieldsSchema = {\n              ...fieldsSchema,\n              ...data.rule.fields,\n            };\n\n            const paredFieldsSchema: Record<string, RuleItem[]> = {};\n\n            Object.keys(fieldsSchema).forEach(field => {\n              const fieldSchema = fieldsSchema[field];\n              const fieldSchemaList = Array.isArray(fieldSchema)\n                ? fieldSchema\n                : [fieldSchema];\n              paredFieldsSchema[field] = fieldSchemaList.map(\n                addFullField.bind(null, field),\n              );\n            });\n            const schema = new Schema(paredFieldsSchema);\n            schema.messages(options.messages);\n            if (data.rule.options) {\n              data.rule.options.messages = options.messages;\n              data.rule.options.error = options.error;\n            }\n            schema.validate(data.value, data.rule.options || options, errs => {\n              const finalErrors = [];\n              if (filledErrors && filledErrors.length) {\n                finalErrors.push(...filledErrors);\n              }\n              if (errs && errs.length) {\n                finalErrors.push(...errs);\n              }\n              doIt(finalErrors.length ? finalErrors : null);\n            });\n          }\n        }\n\n        let res: ValidateResult;\n        if (rule.asyncValidator) {\n          res = rule.asyncValidator(rule, data.value, cb, data.source, options);\n        } else if (rule.validator) {\n          res = rule.validator(rule, data.value, cb, data.source, options);\n          if (res === true) {\n            cb();\n          } else if (res === false) {\n            cb(\n              typeof rule.message === 'function'\n                ? rule.message(rule.fullField || rule.field)\n                : rule.message || `${rule.fullField || rule.field} fails`,\n            );\n          } else if (res instanceof Array) {\n            cb(res);\n          } else if (res instanceof Error) {\n            cb(res.message);\n          }\n        }\n        if (res && (res as Promise<void>).then) {\n          (res as Promise<void>).then(\n            () => cb(),\n            e => cb(e),\n          );\n        }\n      },\n      results => {\n        complete(results);\n      },\n      source,\n    );\n  }\n\n  getType(rule: InternalRuleItem) {\n    if (rule.type === undefined && rule.pattern instanceof RegExp) {\n      rule.type = 'pattern';\n    }\n    if (\n      typeof rule.validator !== 'function' &&\n      rule.type &&\n      !validators.hasOwnProperty(rule.type)\n    ) {\n      throw new Error(format('Unknown rule type %s', rule.type));\n    }\n    return rule.type || 'string';\n  }\n\n  getValidationMethod(rule: InternalRuleItem) {\n    if (typeof rule.validator === 'function') {\n      return rule.validator;\n    }\n    const keys = Object.keys(rule);\n    const messageIndex = keys.indexOf('message');\n    if (messageIndex !== -1) {\n      keys.splice(messageIndex, 1);\n    }\n    if (keys.length === 1 && keys[0] === 'required') {\n      return validators.required;\n    }\n    return validators[this.getType(rule)] || undefined;\n  }\n}\n\nexport default Schema;\n"]},"metadata":{},"sourceType":"module"}