{"ast":null,"code":"export function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var mergedValue = value || 'value';\n  return {\n    _title: label ? [label] : ['title', 'label'],\n    value: mergedValue,\n    key: mergedValue,\n    children: children || 'children'\n  };\n}\nexport function isCheckDisabled(node) {\n  return !node || node.disabled || node.disableCheckbox || node.checkable === false;\n}\n/** Loop fetch all the keys exist in the tree */\n\nexport function getAllKeys(treeData, fieldNames) {\n  var keys = [];\n\n  function dig(list) {\n    list.forEach(function (item) {\n      keys.push(item[fieldNames.value]);\n      var children = item[fieldNames.children];\n\n      if (children) {\n        dig(children);\n      }\n    });\n  }\n\n  dig(treeData);\n  return keys;\n}\nexport function isNil(val) {\n  return val === null || val === undefined;\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-tree-select/es/utils/valueUtil.js"],"names":["toArray","value","Array","isArray","undefined","fillFieldNames","fieldNames","_ref","label","children","mergedValue","_title","key","isCheckDisabled","node","disabled","disableCheckbox","checkable","getAllKeys","treeData","keys","dig","list","forEach","item","push","isNil","val"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B,MAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxB,WAAOA,KAAP;AACD;;AAED,SAAOA,KAAK,KAAKG,SAAV,GAAsB,CAACH,KAAD,CAAtB,GAAgC,EAAvC;AACD;AACD,OAAO,SAASI,cAAT,CAAwBC,UAAxB,EAAoC;AACzC,MAAIC,IAAI,GAAGD,UAAU,IAAI,EAAzB;AAAA,MACIE,KAAK,GAAGD,IAAI,CAACC,KADjB;AAAA,MAEIP,KAAK,GAAGM,IAAI,CAACN,KAFjB;AAAA,MAGIQ,QAAQ,GAAGF,IAAI,CAACE,QAHpB;;AAKA,MAAIC,WAAW,GAAGT,KAAK,IAAI,OAA3B;AACA,SAAO;AACLU,IAAAA,MAAM,EAAEH,KAAK,GAAG,CAACA,KAAD,CAAH,GAAa,CAAC,OAAD,EAAU,OAAV,CADrB;AAELP,IAAAA,KAAK,EAAES,WAFF;AAGLE,IAAAA,GAAG,EAAEF,WAHA;AAILD,IAAAA,QAAQ,EAAEA,QAAQ,IAAI;AAJjB,GAAP;AAMD;AACD,OAAO,SAASI,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAO,CAACA,IAAD,IAASA,IAAI,CAACC,QAAd,IAA0BD,IAAI,CAACE,eAA/B,IAAkDF,IAAI,CAACG,SAAL,KAAmB,KAA5E;AACD;AACD;;AAEA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8Bb,UAA9B,EAA0C;AAC/C,MAAIc,IAAI,GAAG,EAAX;;AAEA,WAASC,GAAT,CAAaC,IAAb,EAAmB;AACjBA,IAAAA,IAAI,CAACC,OAAL,CAAa,UAAUC,IAAV,EAAgB;AAC3BJ,MAAAA,IAAI,CAACK,IAAL,CAAUD,IAAI,CAAClB,UAAU,CAACL,KAAZ,CAAd;AACA,UAAIQ,QAAQ,GAAGe,IAAI,CAAClB,UAAU,CAACG,QAAZ,CAAnB;;AAEA,UAAIA,QAAJ,EAAc;AACZY,QAAAA,GAAG,CAACZ,QAAD,CAAH;AACD;AACF,KAPD;AAQD;;AAEDY,EAAAA,GAAG,CAACF,QAAD,CAAH;AACA,SAAOC,IAAP;AACD;AACD,OAAO,SAASM,KAAT,CAAeC,GAAf,EAAoB;AACzB,SAAOA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKvB,SAA/B;AACD","sourcesContent":["export function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var mergedValue = value || 'value';\n  return {\n    _title: label ? [label] : ['title', 'label'],\n    value: mergedValue,\n    key: mergedValue,\n    children: children || 'children'\n  };\n}\nexport function isCheckDisabled(node) {\n  return !node || node.disabled || node.disableCheckbox || node.checkable === false;\n}\n/** Loop fetch all the keys exist in the tree */\n\nexport function getAllKeys(treeData, fieldNames) {\n  var keys = [];\n\n  function dig(list) {\n    list.forEach(function (item) {\n      keys.push(item[fieldNames.value]);\n      var children = item[fieldNames.children];\n\n      if (children) {\n        dig(children);\n      }\n    });\n  }\n\n  dig(treeData);\n  return keys;\n}\nexport function isNil(val) {\n  return val === null || val === undefined;\n}"]},"metadata":{},"sourceType":"module"}