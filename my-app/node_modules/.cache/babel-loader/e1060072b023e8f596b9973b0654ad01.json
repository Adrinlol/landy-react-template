{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { composeRef, supportRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport { observe, unobserve } from '../utils/observerUtil';\nimport DomWrapper from './DomWrapper';\nimport { CollectionContext } from '../Collection';\nexport default function SingleObserver(props) {\n  var children = props.children,\n      disabled = props.disabled;\n  var elementRef = React.useRef(null);\n  var wrapperRef = React.useRef(null);\n  var onCollectionResize = React.useContext(CollectionContext); // =========================== Children ===========================\n\n  var isRenderProps = typeof children === 'function';\n  var mergedChildren = isRenderProps ? children(elementRef) : children; // ============================= Size =============================\n\n  var sizeRef = React.useRef({\n    width: -1,\n    height: -1,\n    offsetWidth: -1,\n    offsetHeight: -1\n  }); // ============================= Ref ==============================\n\n  var canRef = !isRenderProps && /*#__PURE__*/React.isValidElement(mergedChildren) && supportRef(mergedChildren);\n  var originRef = canRef ? mergedChildren.ref : null;\n  var mergedRef = React.useMemo(function () {\n    return composeRef(originRef, elementRef);\n  }, [originRef, elementRef]); // =========================== Observe ============================\n\n  var propsRef = React.useRef(props);\n  propsRef.current = props; // Handler\n\n  var onInternalResize = React.useCallback(function (target) {\n    var _propsRef$current = propsRef.current,\n        onResize = _propsRef$current.onResize,\n        data = _propsRef$current.data;\n\n    var _target$getBoundingCl = target.getBoundingClientRect(),\n        width = _target$getBoundingCl.width,\n        height = _target$getBoundingCl.height;\n\n    var offsetWidth = target.offsetWidth,\n        offsetHeight = target.offsetHeight;\n    /**\n     * Resize observer trigger when content size changed.\n     * In most case we just care about element size,\n     * let's use `boundary` instead of `contentRect` here to avoid shaking.\n     */\n\n    var fixedWidth = Math.floor(width);\n    var fixedHeight = Math.floor(height);\n\n    if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {\n      var size = {\n        width: fixedWidth,\n        height: fixedHeight,\n        offsetWidth: offsetWidth,\n        offsetHeight: offsetHeight\n      };\n      sizeRef.current = size; // IE is strange, right?\n\n      var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;\n      var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;\n\n      var sizeInfo = _objectSpread(_objectSpread({}, size), {}, {\n        offsetWidth: mergedOffsetWidth,\n        offsetHeight: mergedOffsetHeight\n      }); // Let collection know what happened\n\n\n      onCollectionResize === null || onCollectionResize === void 0 ? void 0 : onCollectionResize(sizeInfo, target, data);\n\n      if (onResize) {\n        // defer the callback but not defer to next frame\n        Promise.resolve().then(function () {\n          onResize(sizeInfo, target);\n        });\n      }\n    }\n  }, []); // Dynamic observe\n\n  React.useEffect(function () {\n    var currentElement = findDOMNode(elementRef.current) || findDOMNode(wrapperRef.current);\n\n    if (currentElement && !disabled) {\n      observe(currentElement, onInternalResize);\n    }\n\n    return function () {\n      return unobserve(currentElement, onInternalResize);\n    };\n  }, [elementRef.current, disabled]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(DomWrapper, {\n    ref: wrapperRef\n  }, canRef ? /*#__PURE__*/React.cloneElement(mergedChildren, {\n    ref: mergedRef\n  }) : mergedChildren);\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-resize-observer/es/SingleObserver/index.js"],"names":["_objectSpread","composeRef","supportRef","React","findDOMNode","observe","unobserve","DomWrapper","CollectionContext","SingleObserver","props","children","disabled","elementRef","useRef","wrapperRef","onCollectionResize","useContext","isRenderProps","mergedChildren","sizeRef","width","height","offsetWidth","offsetHeight","canRef","isValidElement","originRef","ref","mergedRef","useMemo","propsRef","current","onInternalResize","useCallback","target","_propsRef$current","onResize","data","_target$getBoundingCl","getBoundingClientRect","fixedWidth","Math","floor","fixedHeight","size","mergedOffsetWidth","round","mergedOffsetHeight","sizeInfo","Promise","resolve","then","useEffect","currentElement","createElement","cloneElement"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { composeRef, supportRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport { observe, unobserve } from '../utils/observerUtil';\nimport DomWrapper from './DomWrapper';\nimport { CollectionContext } from '../Collection';\nexport default function SingleObserver(props) {\n  var children = props.children,\n      disabled = props.disabled;\n  var elementRef = React.useRef(null);\n  var wrapperRef = React.useRef(null);\n  var onCollectionResize = React.useContext(CollectionContext); // =========================== Children ===========================\n\n  var isRenderProps = typeof children === 'function';\n  var mergedChildren = isRenderProps ? children(elementRef) : children; // ============================= Size =============================\n\n  var sizeRef = React.useRef({\n    width: -1,\n    height: -1,\n    offsetWidth: -1,\n    offsetHeight: -1\n  }); // ============================= Ref ==============================\n\n  var canRef = !isRenderProps && /*#__PURE__*/React.isValidElement(mergedChildren) && supportRef(mergedChildren);\n  var originRef = canRef ? mergedChildren.ref : null;\n  var mergedRef = React.useMemo(function () {\n    return composeRef(originRef, elementRef);\n  }, [originRef, elementRef]); // =========================== Observe ============================\n\n  var propsRef = React.useRef(props);\n  propsRef.current = props; // Handler\n\n  var onInternalResize = React.useCallback(function (target) {\n    var _propsRef$current = propsRef.current,\n        onResize = _propsRef$current.onResize,\n        data = _propsRef$current.data;\n\n    var _target$getBoundingCl = target.getBoundingClientRect(),\n        width = _target$getBoundingCl.width,\n        height = _target$getBoundingCl.height;\n\n    var offsetWidth = target.offsetWidth,\n        offsetHeight = target.offsetHeight;\n    /**\n     * Resize observer trigger when content size changed.\n     * In most case we just care about element size,\n     * let's use `boundary` instead of `contentRect` here to avoid shaking.\n     */\n\n    var fixedWidth = Math.floor(width);\n    var fixedHeight = Math.floor(height);\n\n    if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {\n      var size = {\n        width: fixedWidth,\n        height: fixedHeight,\n        offsetWidth: offsetWidth,\n        offsetHeight: offsetHeight\n      };\n      sizeRef.current = size; // IE is strange, right?\n\n      var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;\n      var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;\n\n      var sizeInfo = _objectSpread(_objectSpread({}, size), {}, {\n        offsetWidth: mergedOffsetWidth,\n        offsetHeight: mergedOffsetHeight\n      }); // Let collection know what happened\n\n\n      onCollectionResize === null || onCollectionResize === void 0 ? void 0 : onCollectionResize(sizeInfo, target, data);\n\n      if (onResize) {\n        // defer the callback but not defer to next frame\n        Promise.resolve().then(function () {\n          onResize(sizeInfo, target);\n        });\n      }\n    }\n  }, []); // Dynamic observe\n\n  React.useEffect(function () {\n    var currentElement = findDOMNode(elementRef.current) || findDOMNode(wrapperRef.current);\n\n    if (currentElement && !disabled) {\n      observe(currentElement, onInternalResize);\n    }\n\n    return function () {\n      return unobserve(currentElement, onInternalResize);\n    };\n  }, [elementRef.current, disabled]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(DomWrapper, {\n    ref: wrapperRef\n  }, canRef ? /*#__PURE__*/React.cloneElement(mergedChildren, {\n    ref: mergedRef\n  }) : mergedChildren);\n}"]},"metadata":{},"sourceType":"module"}