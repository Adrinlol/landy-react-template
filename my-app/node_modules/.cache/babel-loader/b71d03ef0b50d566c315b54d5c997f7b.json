{"ast":null,"code":"import { COMMENT, RULESET, DECLARATION } from './Enum.js';\nimport { abs, trim, from, sizeof, strlen, substr, append, replace, indexof } from './Utility.js';\nimport { node, char, prev, next, peek, caret, alloc, dealloc, delimit, whitespace, escaping, identifier, commenter } from './Tokenizer.js';\n/**\n * @param {string} value\n * @return {object[]}\n */\n\nexport function compile(value) {\n  return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value));\n}\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {string[]} rule\n * @param {string[]} rules\n * @param {string[]} rulesets\n * @param {number[]} pseudo\n * @param {number[]} points\n * @param {string[]} declarations\n * @return {object}\n */\n\nexport function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {\n  var index = 0;\n  var offset = 0;\n  var length = pseudo;\n  var atrule = 0;\n  var property = 0;\n  var previous = 0;\n  var variable = 1;\n  var scanning = 1;\n  var ampersand = 1;\n  var character = 0;\n  var type = '';\n  var props = rules;\n  var children = rulesets;\n  var reference = rule;\n  var characters = type;\n\n  while (scanning) switch (previous = character, character = next()) {\n    // (\n    case 40:\n      if (previous != 108 && characters.charCodeAt(length - 1) == 58) {\n        if (indexof(characters += replace(delimit(character), '&', '&\\f'), '&\\f') != -1) ampersand = -1;\n        break;\n      }\n\n    // \" ' [\n\n    case 34:\n    case 39:\n    case 91:\n      characters += delimit(character);\n      break;\n    // \\t \\n \\r \\s\n\n    case 9:\n    case 10:\n    case 13:\n    case 32:\n      characters += whitespace(previous);\n      break;\n    // \\\n\n    case 92:\n      characters += escaping(caret() - 1, 7);\n      continue;\n    // /\n\n    case 47:\n      switch (peek()) {\n        case 42:\n        case 47:\n          append(comment(commenter(next(), caret()), root, parent), declarations);\n          break;\n\n        default:\n          characters += '/';\n      }\n\n      break;\n    // {\n\n    case 123 * variable:\n      points[index++] = strlen(characters) * ampersand;\n    // } ; \\0\n\n    case 125 * variable:\n    case 59:\n    case 0:\n      switch (character) {\n        // \\0 }\n        case 0:\n        case 125:\n          scanning = 0;\n        // ;\n\n        case 59 + offset:\n          if (property > 0 && strlen(characters) - length) append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);\n          break;\n        // @ ;\n\n        case 59:\n          characters += ';';\n        // { rule/at-rule\n\n        default:\n          append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);\n          if (character === 123) if (offset === 0) parse(characters, root, reference, reference, props, rulesets, length, points, children);else switch (atrule) {\n            // d m s\n            case 100:\n            case 109:\n            case 115:\n              parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);\n              break;\n\n            default:\n              parse(characters, reference, reference, reference, [''], children, 0, points, children);\n          }\n      }\n\n      index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;\n      break;\n    // :\n\n    case 58:\n      length = 1 + strlen(characters), property = previous;\n\n    default:\n      if (variable < 1) if (character == 123) --variable;else if (character == 125 && variable++ == 0 && prev() == 125) continue;\n\n      switch (characters += from(character), character * variable) {\n        // &\n        case 38:\n          ampersand = offset > 0 ? 1 : (characters += '\\f', -1);\n          break;\n        // ,\n\n        case 44:\n          points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;\n          break;\n        // @\n\n        case 64:\n          // -\n          if (peek() === 45) characters += delimit(next());\n          atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;\n          break;\n        // -\n\n        case 45:\n          if (previous === 45 && strlen(characters) == 2) variable = 0;\n      }\n\n  }\n\n  return rulesets;\n}\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} index\n * @param {number} offset\n * @param {string[]} rules\n * @param {number[]} points\n * @param {string} type\n * @param {string[]} props\n * @param {string[]} children\n * @param {number} length\n * @return {object}\n */\n\nexport function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length) {\n  var post = offset - 1;\n  var rule = offset === 0 ? rules : [''];\n  var size = sizeof(rule);\n\n  for (var i = 0, j = 0, k = 0; i < index; ++i) for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x) if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\\f/g, rule[x]))) props[k++] = z;\n\n  return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length);\n}\n/**\n * @param {number} value\n * @param {object} root\n * @param {object?} parent\n * @return {object}\n */\n\nexport function comment(value, root, parent) {\n  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);\n}\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} length\n * @return {object}\n */\n\nexport function declaration(value, root, parent, length) {\n  return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length);\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/stylis/src/Parser.js"],"names":["COMMENT","RULESET","DECLARATION","abs","trim","from","sizeof","strlen","substr","append","replace","indexof","node","char","prev","next","peek","caret","alloc","dealloc","delimit","whitespace","escaping","identifier","commenter","compile","value","parse","root","parent","rule","rules","rulesets","pseudo","points","declarations","index","offset","length","atrule","property","previous","variable","scanning","ampersand","character","type","props","children","reference","characters","charCodeAt","comment","declaration","ruleset","post","size","i","j","k","x","y","z"],"mappings":"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","sourcesContent":["import {COMMENT, RULESET, DECLARATION} from './Enum.js'\nimport {abs, trim, from, sizeof, strlen, substr, append, replace, indexof} from './Utility.js'\nimport {node, char, prev, next, peek, caret, alloc, dealloc, delimit, whitespace, escaping, identifier, commenter} from './Tokenizer.js'\n\n/**\n * @param {string} value\n * @return {object[]}\n */\nexport function compile (value) {\n\treturn dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {string[]} rule\n * @param {string[]} rules\n * @param {string[]} rulesets\n * @param {number[]} pseudo\n * @param {number[]} points\n * @param {string[]} declarations\n * @return {object}\n */\nexport function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {\n\tvar index = 0\n\tvar offset = 0\n\tvar length = pseudo\n\tvar atrule = 0\n\tvar property = 0\n\tvar previous = 0\n\tvar variable = 1\n\tvar scanning = 1\n\tvar ampersand = 1\n\tvar character = 0\n\tvar type = ''\n\tvar props = rules\n\tvar children = rulesets\n\tvar reference = rule\n\tvar characters = type\n\n\twhile (scanning)\n\t\tswitch (previous = character, character = next()) {\n\t\t\t// (\n\t\t\tcase 40:\n\t\t\t\tif (previous != 108 && characters.charCodeAt(length - 1) == 58) {\n\t\t\t\t\tif (indexof(characters += replace(delimit(character), '&', '&\\f'), '&\\f') != -1)\n\t\t\t\t\t\tampersand = -1\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t// \" ' [\n\t\t\tcase 34: case 39: case 91:\n\t\t\t\tcharacters += delimit(character)\n\t\t\t\tbreak\n\t\t\t// \\t \\n \\r \\s\n\t\t\tcase 9: case 10: case 13: case 32:\n\t\t\t\tcharacters += whitespace(previous)\n\t\t\t\tbreak\n\t\t\t// \\\n\t\t\tcase 92:\n\t\t\t\tcharacters += escaping(caret() - 1, 7)\n\t\t\t\tcontinue\n\t\t\t// /\n\t\t\tcase 47:\n\t\t\t\tswitch (peek()) {\n\t\t\t\t\tcase 42: case 47:\n\t\t\t\t\t\tappend(comment(commenter(next(), caret()), root, parent), declarations)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcharacters += '/'\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t// {\n\t\t\tcase 123 * variable:\n\t\t\t\tpoints[index++] = strlen(characters) * ampersand\n\t\t\t// } ; \\0\n\t\t\tcase 125 * variable: case 59: case 0:\n\t\t\t\tswitch (character) {\n\t\t\t\t\t// \\0 }\n\t\t\t\t\tcase 0: case 125: scanning = 0\n\t\t\t\t\t// ;\n\t\t\t\t\tcase 59 + offset:\n\t\t\t\t\t\tif (property > 0 && (strlen(characters) - length))\n\t\t\t\t\t\t\tappend(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// @ ;\n\t\t\t\t\tcase 59: characters += ';'\n\t\t\t\t\t// { rule/at-rule\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tappend(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets)\n\n\t\t\t\t\t\tif (character === 123)\n\t\t\t\t\t\t\tif (offset === 0)\n\t\t\t\t\t\t\t\tparse(characters, root, reference, reference, props, rulesets, length, points, children)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tswitch (atrule) {\n\t\t\t\t\t\t\t\t\t// d m s\n\t\t\t\t\t\t\t\t\tcase 100: case 109: case 115:\n\t\t\t\t\t\t\t\t\t\tparse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children)\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tparse(characters, reference, reference, reference, [''], children, 0, points, children)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tindex = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo\n\t\t\t\tbreak\n\t\t\t// :\n\t\t\tcase 58:\n\t\t\t\tlength = 1 + strlen(characters), property = previous\n\t\t\tdefault:\n\t\t\t\tif (variable < 1)\n\t\t\t\t\tif (character == 123)\n\t\t\t\t\t\t--variable\n\t\t\t\t\telse if (character == 125 && variable++ == 0 && prev() == 125)\n\t\t\t\t\t\tcontinue\n\n\t\t\t\tswitch (characters += from(character), character * variable) {\n\t\t\t\t\t// &\n\t\t\t\t\tcase 38:\n\t\t\t\t\t\tampersand = offset > 0 ? 1 : (characters += '\\f', -1)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// ,\n\t\t\t\t\tcase 44:\n\t\t\t\t\t\tpoints[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// @\n\t\t\t\t\tcase 64:\n\t\t\t\t\t\t// -\n\t\t\t\t\t\tif (peek() === 45)\n\t\t\t\t\t\t\tcharacters += delimit(next())\n\n\t\t\t\t\t\tatrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// -\n\t\t\t\t\tcase 45:\n\t\t\t\t\t\tif (previous === 45 && strlen(characters) == 2)\n\t\t\t\t\t\t\tvariable = 0\n\t\t\t\t}\n\t\t}\n\n\treturn rulesets\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} index\n * @param {number} offset\n * @param {string[]} rules\n * @param {number[]} points\n * @param {string} type\n * @param {string[]} props\n * @param {string[]} children\n * @param {number} length\n * @return {object}\n */\nexport function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {\n\tvar post = offset - 1\n\tvar rule = offset === 0 ? rules : ['']\n\tvar size = sizeof(rule)\n\n\tfor (var i = 0, j = 0, k = 0; i < index; ++i)\n\t\tfor (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)\n\t\t\tif (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\\f/g, rule[x])))\n\t\t\t\tprops[k++] = z\n\n\treturn node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)\n}\n\n/**\n * @param {number} value\n * @param {object} root\n * @param {object?} parent\n * @return {object}\n */\nexport function comment (value, root, parent) {\n\treturn node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} length\n * @return {object}\n */\nexport function declaration (value, root, parent, length) {\n\treturn node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)\n}\n"]},"metadata":{},"sourceType":"module"}