{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useRef } from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { addGlobalMouseDownEvent, getTargetFromEvent } from '../utils/uiUtil';\nexport default function usePickerInput(_ref) {\n  var open = _ref.open,\n      value = _ref.value,\n      isClickOutside = _ref.isClickOutside,\n      triggerOpen = _ref.triggerOpen,\n      forwardKeyDown = _ref.forwardKeyDown,\n      _onKeyDown = _ref.onKeyDown,\n      blurToCancel = _ref.blurToCancel,\n      onSubmit = _ref.onSubmit,\n      onCancel = _ref.onCancel,\n      _onFocus = _ref.onFocus,\n      _onBlur = _ref.onBlur;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      typing = _useState2[0],\n      setTyping = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      focused = _useState4[0],\n      setFocused = _useState4[1];\n  /**\n   * We will prevent blur to handle open event when user click outside,\n   * since this will repeat trigger `onOpenChange` event.\n   */\n\n\n  var preventBlurRef = useRef(false);\n  var valueChangedRef = useRef(false);\n  var preventDefaultRef = useRef(false);\n  var inputProps = {\n    onMouseDown: function onMouseDown() {\n      setTyping(true);\n      triggerOpen(true);\n    },\n    onKeyDown: function onKeyDown(e) {\n      var preventDefault = function preventDefault() {\n        preventDefaultRef.current = true;\n      };\n\n      _onKeyDown(e, preventDefault);\n\n      if (preventDefaultRef.current) return;\n\n      switch (e.which) {\n        case KeyCode.ENTER:\n          {\n            if (!open) {\n              triggerOpen(true);\n            } else if (onSubmit() !== false) {\n              setTyping(true);\n            }\n\n            e.preventDefault();\n            return;\n          }\n\n        case KeyCode.TAB:\n          {\n            if (typing && open && !e.shiftKey) {\n              setTyping(false);\n              e.preventDefault();\n            } else if (!typing && open) {\n              if (!forwardKeyDown(e) && e.shiftKey) {\n                setTyping(true);\n                e.preventDefault();\n              }\n            }\n\n            return;\n          }\n\n        case KeyCode.ESC:\n          {\n            setTyping(true);\n            onCancel();\n            return;\n          }\n      }\n\n      if (!open && ![KeyCode.SHIFT].includes(e.which)) {\n        triggerOpen(true);\n      } else if (!typing) {\n        // Let popup panel handle keyboard\n        forwardKeyDown(e);\n      }\n    },\n    onFocus: function onFocus(e) {\n      setTyping(true);\n      setFocused(true);\n\n      if (_onFocus) {\n        _onFocus(e);\n      }\n    },\n    onBlur: function onBlur(e) {\n      if (preventBlurRef.current || !isClickOutside(document.activeElement)) {\n        preventBlurRef.current = false;\n        return;\n      }\n\n      if (blurToCancel) {\n        setTimeout(function () {\n          var _document = document,\n              activeElement = _document.activeElement;\n\n          while (activeElement && activeElement.shadowRoot) {\n            activeElement = activeElement.shadowRoot.activeElement;\n          }\n\n          if (isClickOutside(activeElement)) {\n            onCancel();\n          }\n        }, 0);\n      } else if (open) {\n        triggerOpen(false);\n\n        if (valueChangedRef.current) {\n          onSubmit();\n        }\n      }\n\n      setFocused(false);\n\n      if (_onBlur) {\n        _onBlur(e);\n      }\n    }\n  }; // check if value changed\n\n  useEffect(function () {\n    valueChangedRef.current = false;\n  }, [open]);\n  useEffect(function () {\n    valueChangedRef.current = true;\n  }, [value]); // Global click handler\n\n  useEffect(function () {\n    return addGlobalMouseDownEvent(function (e) {\n      var target = getTargetFromEvent(e);\n\n      if (open) {\n        var clickedOutside = isClickOutside(target);\n\n        if (!clickedOutside) {\n          preventBlurRef.current = true; // Always set back in case `onBlur` prevented by user\n\n          requestAnimationFrame(function () {\n            preventBlurRef.current = false;\n          });\n        } else if (!focused || clickedOutside) {\n          triggerOpen(false);\n        }\n      }\n    });\n  });\n  return [inputProps, {\n    focused: focused,\n    typing: typing\n  }];\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-picker/es/hooks/usePickerInput.js"],"names":["_slicedToArray","useState","useEffect","useRef","KeyCode","addGlobalMouseDownEvent","getTargetFromEvent","usePickerInput","_ref","open","value","isClickOutside","triggerOpen","forwardKeyDown","_onKeyDown","onKeyDown","blurToCancel","onSubmit","onCancel","_onFocus","onFocus","_onBlur","onBlur","_useState","_useState2","typing","setTyping","_useState3","_useState4","focused","setFocused","preventBlurRef","valueChangedRef","preventDefaultRef","inputProps","onMouseDown","e","preventDefault","current","which","ENTER","TAB","shiftKey","ESC","SHIFT","includes","document","activeElement","setTimeout","_document","shadowRoot","target","clickedOutside","requestAnimationFrame"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useRef } from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { addGlobalMouseDownEvent, getTargetFromEvent } from '../utils/uiUtil';\nexport default function usePickerInput(_ref) {\n  var open = _ref.open,\n      value = _ref.value,\n      isClickOutside = _ref.isClickOutside,\n      triggerOpen = _ref.triggerOpen,\n      forwardKeyDown = _ref.forwardKeyDown,\n      _onKeyDown = _ref.onKeyDown,\n      blurToCancel = _ref.blurToCancel,\n      onSubmit = _ref.onSubmit,\n      onCancel = _ref.onCancel,\n      _onFocus = _ref.onFocus,\n      _onBlur = _ref.onBlur;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      typing = _useState2[0],\n      setTyping = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      focused = _useState4[0],\n      setFocused = _useState4[1];\n  /**\n   * We will prevent blur to handle open event when user click outside,\n   * since this will repeat trigger `onOpenChange` event.\n   */\n\n\n  var preventBlurRef = useRef(false);\n  var valueChangedRef = useRef(false);\n  var preventDefaultRef = useRef(false);\n  var inputProps = {\n    onMouseDown: function onMouseDown() {\n      setTyping(true);\n      triggerOpen(true);\n    },\n    onKeyDown: function onKeyDown(e) {\n      var preventDefault = function preventDefault() {\n        preventDefaultRef.current = true;\n      };\n\n      _onKeyDown(e, preventDefault);\n\n      if (preventDefaultRef.current) return;\n\n      switch (e.which) {\n        case KeyCode.ENTER:\n          {\n            if (!open) {\n              triggerOpen(true);\n            } else if (onSubmit() !== false) {\n              setTyping(true);\n            }\n\n            e.preventDefault();\n            return;\n          }\n\n        case KeyCode.TAB:\n          {\n            if (typing && open && !e.shiftKey) {\n              setTyping(false);\n              e.preventDefault();\n            } else if (!typing && open) {\n              if (!forwardKeyDown(e) && e.shiftKey) {\n                setTyping(true);\n                e.preventDefault();\n              }\n            }\n\n            return;\n          }\n\n        case KeyCode.ESC:\n          {\n            setTyping(true);\n            onCancel();\n            return;\n          }\n      }\n\n      if (!open && ![KeyCode.SHIFT].includes(e.which)) {\n        triggerOpen(true);\n      } else if (!typing) {\n        // Let popup panel handle keyboard\n        forwardKeyDown(e);\n      }\n    },\n    onFocus: function onFocus(e) {\n      setTyping(true);\n      setFocused(true);\n\n      if (_onFocus) {\n        _onFocus(e);\n      }\n    },\n    onBlur: function onBlur(e) {\n      if (preventBlurRef.current || !isClickOutside(document.activeElement)) {\n        preventBlurRef.current = false;\n        return;\n      }\n\n      if (blurToCancel) {\n        setTimeout(function () {\n          var _document = document,\n              activeElement = _document.activeElement;\n\n          while (activeElement && activeElement.shadowRoot) {\n            activeElement = activeElement.shadowRoot.activeElement;\n          }\n\n          if (isClickOutside(activeElement)) {\n            onCancel();\n          }\n        }, 0);\n      } else if (open) {\n        triggerOpen(false);\n\n        if (valueChangedRef.current) {\n          onSubmit();\n        }\n      }\n\n      setFocused(false);\n\n      if (_onBlur) {\n        _onBlur(e);\n      }\n    }\n  }; // check if value changed\n\n  useEffect(function () {\n    valueChangedRef.current = false;\n  }, [open]);\n  useEffect(function () {\n    valueChangedRef.current = true;\n  }, [value]); // Global click handler\n\n  useEffect(function () {\n    return addGlobalMouseDownEvent(function (e) {\n      var target = getTargetFromEvent(e);\n\n      if (open) {\n        var clickedOutside = isClickOutside(target);\n\n        if (!clickedOutside) {\n          preventBlurRef.current = true; // Always set back in case `onBlur` prevented by user\n\n          requestAnimationFrame(function () {\n            preventBlurRef.current = false;\n          });\n        } else if (!focused || clickedOutside) {\n          triggerOpen(false);\n        }\n      }\n    });\n  });\n  return [inputProps, {\n    focused: focused,\n    typing: typing\n  }];\n}"]},"metadata":{},"sourceType":"module"}