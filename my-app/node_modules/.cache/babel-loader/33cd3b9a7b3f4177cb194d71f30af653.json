{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default function usePatchElement() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      elements = _React$useState2[0],\n      setElements = _React$useState2[1];\n\n  var patchElement = React.useCallback(function (element) {\n    // append a new element to elements (and create a new ref)\n    setElements(function (originElements) {\n      return [].concat(_toConsumableArray(originElements), [element]);\n    }); // return a function that removes the new element out of elements (and create a new ref)\n    // it works a little like useEffect\n\n    return function () {\n      setElements(function (originElements) {\n        return originElements.filter(function (ele) {\n          return ele !== element;\n        });\n      });\n    };\n  }, []);\n  return [elements, patchElement];\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/antd/es/_util/hooks/usePatchElement.js"],"names":["_toConsumableArray","_slicedToArray","React","usePatchElement","_React$useState","useState","_React$useState2","elements","setElements","patchElement","useCallback","element","originElements","concat","filter","ele"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,eAAe,SAASC,eAAT,GAA2B;AACxC,MAAIC,eAAe,GAAGF,KAAK,CAACG,QAAN,CAAe,EAAf,CAAtB;AAAA,MACIC,gBAAgB,GAAGL,cAAc,CAACG,eAAD,EAAkB,CAAlB,CADrC;AAAA,MAEIG,QAAQ,GAAGD,gBAAgB,CAAC,CAAD,CAF/B;AAAA,MAGIE,WAAW,GAAGF,gBAAgB,CAAC,CAAD,CAHlC;;AAKA,MAAIG,YAAY,GAAGP,KAAK,CAACQ,WAAN,CAAkB,UAAUC,OAAV,EAAmB;AACtD;AACAH,IAAAA,WAAW,CAAC,UAAUI,cAAV,EAA0B;AACpC,aAAO,GAAGC,MAAH,CAAUb,kBAAkB,CAACY,cAAD,CAA5B,EAA8C,CAACD,OAAD,CAA9C,CAAP;AACD,KAFU,CAAX,CAFsD,CAIlD;AACJ;;AAEA,WAAO,YAAY;AACjBH,MAAAA,WAAW,CAAC,UAAUI,cAAV,EAA0B;AACpC,eAAOA,cAAc,CAACE,MAAf,CAAsB,UAAUC,GAAV,EAAe;AAC1C,iBAAOA,GAAG,KAAKJ,OAAf;AACD,SAFM,CAAP;AAGD,OAJU,CAAX;AAKD,KAND;AAOD,GAdkB,EAchB,EAdgB,CAAnB;AAeA,SAAO,CAACJ,QAAD,EAAWE,YAAX,CAAP;AACD","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default function usePatchElement() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      elements = _React$useState2[0],\n      setElements = _React$useState2[1];\n\n  var patchElement = React.useCallback(function (element) {\n    // append a new element to elements (and create a new ref)\n    setElements(function (originElements) {\n      return [].concat(_toConsumableArray(originElements), [element]);\n    }); // return a function that removes the new element out of elements (and create a new ref)\n    // it works a little like useEffect\n\n    return function () {\n      setElements(function (originElements) {\n        return originElements.filter(function (ele) {\n          return ele !== element;\n        });\n      });\n    };\n  }, []);\n  return [elements, patchElement];\n}"]},"metadata":{},"sourceType":"module"}