{"ast":null,"code":"import ResizeObserver from 'resize-observer-polyfill'; // =============================== Const ===============================\n\nvar elementListeners = new Map();\n\nfunction onResize(entities) {\n  entities.forEach(function (entity) {\n    var _elementListeners$get;\n\n    var target = entity.target;\n    (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 ? void 0 : _elementListeners$get.forEach(function (listener) {\n      return listener(target);\n    });\n  });\n} // Note: ResizeObserver polyfill not support option to measure border-box resize\n\n\nvar resizeObserver = new ResizeObserver(onResize); // Dev env only\n\nexport var _el = process.env.NODE_ENV !== 'production' ? elementListeners : null; // eslint-disable-line\n\nexport var _rs = process.env.NODE_ENV !== 'production' ? onResize : null; // eslint-disable-line\n// ============================== Observe ==============================\n\nexport function observe(element, callback) {\n  if (!elementListeners.has(element)) {\n    elementListeners.set(element, new Set());\n    resizeObserver.observe(element);\n  }\n\n  elementListeners.get(element).add(callback);\n}\nexport function unobserve(element, callback) {\n  if (elementListeners.has(element)) {\n    elementListeners.get(element).delete(callback);\n\n    if (!elementListeners.get(element).size) {\n      resizeObserver.unobserve(element);\n      elementListeners.delete(element);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-resize-observer/es/utils/observerUtil.js"],"names":["ResizeObserver","elementListeners","Map","onResize","entities","forEach","entity","_elementListeners$get","target","get","listener","resizeObserver","_el","process","env","NODE_ENV","_rs","observe","element","callback","has","set","Set","add","unobserve","delete","size"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0BAA3B,C,CAAuD;;AAEvD,IAAIC,gBAAgB,GAAG,IAAIC,GAAJ,EAAvB;;AAEA,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC1BA,EAAAA,QAAQ,CAACC,OAAT,CAAiB,UAAUC,MAAV,EAAkB;AACjC,QAAIC,qBAAJ;;AAEA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,KAACD,qBAAqB,GAAGN,gBAAgB,CAACQ,GAAjB,CAAqBD,MAArB,CAAzB,MAA2D,IAA3D,IAAmED,qBAAqB,KAAK,KAAK,CAAlG,GAAsG,KAAK,CAA3G,GAA+GA,qBAAqB,CAACF,OAAtB,CAA8B,UAAUK,QAAV,EAAoB;AAC/J,aAAOA,QAAQ,CAACF,MAAD,CAAf;AACD,KAF8G,CAA/G;AAGD,GAPD;AAQD,C,CAAC;;;AAGF,IAAIG,cAAc,GAAG,IAAIX,cAAJ,CAAmBG,QAAnB,CAArB,C,CAAmD;;AAEnD,OAAO,IAAIS,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCd,gBAAxC,GAA2D,IAArE,C,CAA2E;;AAElF,OAAO,IAAIe,GAAG,GAAGH,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,QAAxC,GAAmD,IAA7D,C,CAAmE;AAC1E;;AAEA,OAAO,SAASc,OAAT,CAAiBC,OAAjB,EAA0BC,QAA1B,EAAoC;AACzC,MAAI,CAAClB,gBAAgB,CAACmB,GAAjB,CAAqBF,OAArB,CAAL,EAAoC;AAClCjB,IAAAA,gBAAgB,CAACoB,GAAjB,CAAqBH,OAArB,EAA8B,IAAII,GAAJ,EAA9B;AACAX,IAAAA,cAAc,CAACM,OAAf,CAAuBC,OAAvB;AACD;;AAEDjB,EAAAA,gBAAgB,CAACQ,GAAjB,CAAqBS,OAArB,EAA8BK,GAA9B,CAAkCJ,QAAlC;AACD;AACD,OAAO,SAASK,SAAT,CAAmBN,OAAnB,EAA4BC,QAA5B,EAAsC;AAC3C,MAAIlB,gBAAgB,CAACmB,GAAjB,CAAqBF,OAArB,CAAJ,EAAmC;AACjCjB,IAAAA,gBAAgB,CAACQ,GAAjB,CAAqBS,OAArB,EAA8BO,MAA9B,CAAqCN,QAArC;;AAEA,QAAI,CAAClB,gBAAgB,CAACQ,GAAjB,CAAqBS,OAArB,EAA8BQ,IAAnC,EAAyC;AACvCf,MAAAA,cAAc,CAACa,SAAf,CAAyBN,OAAzB;AACAjB,MAAAA,gBAAgB,CAACwB,MAAjB,CAAwBP,OAAxB;AACD;AACF;AACF","sourcesContent":["import ResizeObserver from 'resize-observer-polyfill'; // =============================== Const ===============================\n\nvar elementListeners = new Map();\n\nfunction onResize(entities) {\n  entities.forEach(function (entity) {\n    var _elementListeners$get;\n\n    var target = entity.target;\n    (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 ? void 0 : _elementListeners$get.forEach(function (listener) {\n      return listener(target);\n    });\n  });\n} // Note: ResizeObserver polyfill not support option to measure border-box resize\n\n\nvar resizeObserver = new ResizeObserver(onResize); // Dev env only\n\nexport var _el = process.env.NODE_ENV !== 'production' ? elementListeners : null; // eslint-disable-line\n\nexport var _rs = process.env.NODE_ENV !== 'production' ? onResize : null; // eslint-disable-line\n// ============================== Observe ==============================\n\nexport function observe(element, callback) {\n  if (!elementListeners.has(element)) {\n    elementListeners.set(element, new Set());\n    resizeObserver.observe(element);\n  }\n\n  elementListeners.get(element).add(callback);\n}\nexport function unobserve(element, callback) {\n  if (elementListeners.has(element)) {\n    elementListeners.get(element).delete(callback);\n\n    if (!elementListeners.get(element).size) {\n      resizeObserver.unobserve(element);\n      elementListeners.delete(element);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}