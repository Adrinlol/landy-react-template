{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useForm as useRcForm } from 'rc-field-form';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { toArray, getFieldId } from '../util';\n\nfunction toNamePathStr(name) {\n  var namePath = toArray(name);\n  return namePath.join('_');\n}\n\nexport default function useForm(form) {\n  var _useRcForm = useRcForm(),\n      _useRcForm2 = _slicedToArray(_useRcForm, 1),\n      rcForm = _useRcForm2[0];\n\n  var itemsRef = React.useRef({});\n  var wrapForm = React.useMemo(function () {\n    return form !== null && form !== void 0 ? form : _extends(_extends({}, rcForm), {\n      __INTERNAL__: {\n        itemRef: function itemRef(name) {\n          return function (node) {\n            var namePathStr = toNamePathStr(name);\n\n            if (node) {\n              itemsRef.current[namePathStr] = node;\n            } else {\n              delete itemsRef.current[namePathStr];\n            }\n          };\n        }\n      },\n      scrollToField: function scrollToField(name) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var namePath = toArray(name);\n        var fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);\n        var node = fieldId ? document.getElementById(fieldId) : null;\n\n        if (node) {\n          scrollIntoView(node, _extends({\n            scrollMode: 'if-needed',\n            block: 'nearest'\n          }, options));\n        }\n      },\n      getFieldInstance: function getFieldInstance(name) {\n        var namePathStr = toNamePathStr(name);\n        return itemsRef.current[namePathStr];\n      }\n    });\n  }, [form, rcForm]);\n  return [wrapForm];\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/antd/es/form/hooks/useForm.js"],"names":["_extends","_slicedToArray","React","useForm","useRcForm","scrollIntoView","toArray","getFieldId","toNamePathStr","name","namePath","join","form","_useRcForm","_useRcForm2","rcForm","itemsRef","useRef","wrapForm","useMemo","__INTERNAL__","itemRef","node","namePathStr","current","scrollToField","options","arguments","length","undefined","fieldId","document","getElementById","scrollMode","block","getFieldInstance"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,eAArC;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,SAApC;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,QAAQ,GAAGJ,OAAO,CAACG,IAAD,CAAtB;AACA,SAAOC,QAAQ,CAACC,IAAT,CAAc,GAAd,CAAP;AACD;;AAED,eAAe,SAASR,OAAT,CAAiBS,IAAjB,EAAuB;AACpC,MAAIC,UAAU,GAAGT,SAAS,EAA1B;AAAA,MACIU,WAAW,GAAGb,cAAc,CAACY,UAAD,EAAa,CAAb,CADhC;AAAA,MAEIE,MAAM,GAAGD,WAAW,CAAC,CAAD,CAFxB;;AAIA,MAAIE,QAAQ,GAAGd,KAAK,CAACe,MAAN,CAAa,EAAb,CAAf;AACA,MAAIC,QAAQ,GAAGhB,KAAK,CAACiB,OAAN,CAAc,YAAY;AACvC,WAAOP,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0CZ,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKe,MAAL,CAAT,EAAuB;AAC9EK,MAAAA,YAAY,EAAE;AACZC,QAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBZ,IAAjB,EAAuB;AAC9B,iBAAO,UAAUa,IAAV,EAAgB;AACrB,gBAAIC,WAAW,GAAGf,aAAa,CAACC,IAAD,CAA/B;;AAEA,gBAAIa,IAAJ,EAAU;AACRN,cAAAA,QAAQ,CAACQ,OAAT,CAAiBD,WAAjB,IAAgCD,IAAhC;AACD,aAFD,MAEO;AACL,qBAAON,QAAQ,CAACQ,OAAT,CAAiBD,WAAjB,CAAP;AACD;AACF,WARD;AASD;AAXW,OADgE;AAc9EE,MAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBhB,IAAvB,EAA6B;AAC1C,YAAIiB,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,YAAIjB,QAAQ,GAAGJ,OAAO,CAACG,IAAD,CAAtB;AACA,YAAIqB,OAAO,GAAGvB,UAAU,CAACG,QAAD,EAAWQ,QAAQ,CAACE,YAAT,CAAsBX,IAAjC,CAAxB;AACA,YAAIa,IAAI,GAAGQ,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBF,OAAxB,CAAH,GAAsC,IAAxD;;AAEA,YAAIR,IAAJ,EAAU;AACRjB,UAAAA,cAAc,CAACiB,IAAD,EAAOtB,QAAQ,CAAC;AAC5BiC,YAAAA,UAAU,EAAE,WADgB;AAE5BC,YAAAA,KAAK,EAAE;AAFqB,WAAD,EAG1BR,OAH0B,CAAf,CAAd;AAID;AACF,OA1B6E;AA2B9ES,MAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0B1B,IAA1B,EAAgC;AAChD,YAAIc,WAAW,GAAGf,aAAa,CAACC,IAAD,CAA/B;AACA,eAAOO,QAAQ,CAACQ,OAAT,CAAiBD,WAAjB,CAAP;AACD;AA9B6E,KAAvB,CAAzD;AAgCD,GAjCc,EAiCZ,CAACX,IAAD,EAAOG,MAAP,CAjCY,CAAf;AAkCA,SAAO,CAACG,QAAD,CAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useForm as useRcForm } from 'rc-field-form';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { toArray, getFieldId } from '../util';\n\nfunction toNamePathStr(name) {\n  var namePath = toArray(name);\n  return namePath.join('_');\n}\n\nexport default function useForm(form) {\n  var _useRcForm = useRcForm(),\n      _useRcForm2 = _slicedToArray(_useRcForm, 1),\n      rcForm = _useRcForm2[0];\n\n  var itemsRef = React.useRef({});\n  var wrapForm = React.useMemo(function () {\n    return form !== null && form !== void 0 ? form : _extends(_extends({}, rcForm), {\n      __INTERNAL__: {\n        itemRef: function itemRef(name) {\n          return function (node) {\n            var namePathStr = toNamePathStr(name);\n\n            if (node) {\n              itemsRef.current[namePathStr] = node;\n            } else {\n              delete itemsRef.current[namePathStr];\n            }\n          };\n        }\n      },\n      scrollToField: function scrollToField(name) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var namePath = toArray(name);\n        var fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);\n        var node = fieldId ? document.getElementById(fieldId) : null;\n\n        if (node) {\n          scrollIntoView(node, _extends({\n            scrollMode: 'if-needed',\n            block: 'nearest'\n          }, options));\n        }\n      },\n      getFieldInstance: function getFieldInstance(name) {\n        var namePathStr = toNamePathStr(name);\n        return itemsRef.current[namePathStr];\n      }\n    });\n  }, [form, rcForm]);\n  return [wrapForm];\n}"]},"metadata":{},"sourceType":"module"}