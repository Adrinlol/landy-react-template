{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { isLeaf, toPathKey } from '../utils/commonUtil';\nimport CascaderContext from '../context';\nimport Checkbox from './Checkbox';\nimport { SEARCH_MARK } from '../hooks/useSearchOptions';\nexport default function Column(_ref) {\n  var prefixCls = _ref.prefixCls,\n      multiple = _ref.multiple,\n      options = _ref.options,\n      activeValue = _ref.activeValue,\n      prevValuePath = _ref.prevValuePath,\n      onToggleOpen = _ref.onToggleOpen,\n      onSelect = _ref.onSelect,\n      onActive = _ref.onActive,\n      checkedSet = _ref.checkedSet,\n      halfCheckedSet = _ref.halfCheckedSet,\n      loadingKeys = _ref.loadingKeys,\n      isSelectable = _ref.isSelectable;\n  var menuPrefixCls = \"\".concat(prefixCls, \"-menu\");\n  var menuItemPrefixCls = \"\".concat(prefixCls, \"-menu-item\");\n\n  var _React$useContext = React.useContext(CascaderContext),\n      fieldNames = _React$useContext.fieldNames,\n      changeOnSelect = _React$useContext.changeOnSelect,\n      expandTrigger = _React$useContext.expandTrigger,\n      expandIcon = _React$useContext.expandIcon,\n      loadingIcon = _React$useContext.loadingIcon,\n      dropdownMenuColumnStyle = _React$useContext.dropdownMenuColumnStyle;\n\n  var hoverOpen = expandTrigger === 'hover'; // ============================ Option ============================\n\n  var optionInfoList = React.useMemo(function () {\n    return options.map(function (option) {\n      var disabled = option.disabled;\n      var searchOptions = option[SEARCH_MARK];\n      var label = option[fieldNames.label];\n      var value = option[fieldNames.value];\n      var isMergedLeaf = isLeaf(option, fieldNames); // Get real value of option. Search option is different way.\n\n      var fullPath = searchOptions ? searchOptions.map(function (opt) {\n        return opt[fieldNames.value];\n      }) : [].concat(_toConsumableArray(prevValuePath), [value]);\n      var fullPathKey = toPathKey(fullPath);\n      var isLoading = loadingKeys.includes(fullPathKey); // >>>>> checked\n\n      var checked = checkedSet.has(fullPathKey); // >>>>> halfChecked\n\n      var halfChecked = halfCheckedSet.has(fullPathKey);\n      return {\n        disabled: disabled,\n        label: label,\n        value: value,\n        isLeaf: isMergedLeaf,\n        isLoading: isLoading,\n        checked: checked,\n        halfChecked: halfChecked,\n        option: option,\n        fullPath: fullPath,\n        fullPathKey: fullPathKey\n      };\n    });\n  }, [options, checkedSet, fieldNames, halfCheckedSet, loadingKeys, prevValuePath]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: menuPrefixCls,\n    role: \"menu\"\n  }, optionInfoList.map(function (_ref2) {\n    var _classNames;\n\n    var disabled = _ref2.disabled,\n        label = _ref2.label,\n        value = _ref2.value,\n        isMergedLeaf = _ref2.isLeaf,\n        isLoading = _ref2.isLoading,\n        checked = _ref2.checked,\n        halfChecked = _ref2.halfChecked,\n        option = _ref2.option,\n        fullPath = _ref2.fullPath,\n        fullPathKey = _ref2.fullPathKey; // >>>>> Open\n\n    var triggerOpenPath = function triggerOpenPath() {\n      if (!disabled && (!hoverOpen || !isMergedLeaf)) {\n        onActive(fullPath);\n      }\n    }; // >>>>> Selection\n\n\n    var triggerSelect = function triggerSelect() {\n      if (isSelectable(option)) {\n        onSelect(fullPath, isMergedLeaf);\n      }\n    }; // >>>>> Title\n\n\n    var title;\n\n    if (typeof option.title === 'string') {\n      title = option.title;\n    } else if (typeof label === 'string') {\n      title = label;\n    } // >>>>> Render\n\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fullPathKey,\n      className: classNames(menuItemPrefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-expand\"), !isMergedLeaf), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-active\"), activeValue === value), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-loading\"), isLoading), _classNames)),\n      style: dropdownMenuColumnStyle,\n      role: \"menuitemcheckbox\",\n      title: title,\n      \"aria-checked\": checked,\n      \"data-path-key\": fullPathKey,\n      onClick: function onClick() {\n        triggerOpenPath();\n\n        if (!multiple || isMergedLeaf) {\n          triggerSelect();\n        }\n      },\n      onDoubleClick: function onDoubleClick() {\n        if (changeOnSelect) {\n          onToggleOpen(false);\n        }\n      },\n      onMouseEnter: function onMouseEnter() {\n        if (hoverOpen) {\n          triggerOpenPath();\n        }\n      },\n      onMouseDown: function onMouseDown(e) {\n        // Prevent selector from blurring\n        e.preventDefault();\n      }\n    }, multiple && /*#__PURE__*/React.createElement(Checkbox, {\n      prefixCls: \"\".concat(prefixCls, \"-checkbox\"),\n      checked: checked,\n      halfChecked: halfChecked,\n      disabled: disabled,\n      onClick: function onClick(e) {\n        e.stopPropagation();\n        triggerSelect();\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-content\")\n    }, label), !isLoading && expandIcon && !isMergedLeaf && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-expand-icon\")\n    }, expandIcon), isLoading && loadingIcon && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-loading-icon\")\n    }, loadingIcon));\n  }));\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-cascader/es/OptionList/Column.js"],"names":["_defineProperty","_toConsumableArray","React","classNames","isLeaf","toPathKey","CascaderContext","Checkbox","SEARCH_MARK","Column","_ref","prefixCls","multiple","options","activeValue","prevValuePath","onToggleOpen","onSelect","onActive","checkedSet","halfCheckedSet","loadingKeys","isSelectable","menuPrefixCls","concat","menuItemPrefixCls","_React$useContext","useContext","fieldNames","changeOnSelect","expandTrigger","expandIcon","loadingIcon","dropdownMenuColumnStyle","hoverOpen","optionInfoList","useMemo","map","option","disabled","searchOptions","label","value","isMergedLeaf","fullPath","opt","fullPathKey","isLoading","includes","checked","has","halfChecked","createElement","className","role","_ref2","_classNames","triggerOpenPath","triggerSelect","title","key","style","onClick","onDoubleClick","onMouseEnter","onMouseDown","e","preventDefault","stopPropagation"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { isLeaf, toPathKey } from '../utils/commonUtil';\nimport CascaderContext from '../context';\nimport Checkbox from './Checkbox';\nimport { SEARCH_MARK } from '../hooks/useSearchOptions';\nexport default function Column(_ref) {\n  var prefixCls = _ref.prefixCls,\n      multiple = _ref.multiple,\n      options = _ref.options,\n      activeValue = _ref.activeValue,\n      prevValuePath = _ref.prevValuePath,\n      onToggleOpen = _ref.onToggleOpen,\n      onSelect = _ref.onSelect,\n      onActive = _ref.onActive,\n      checkedSet = _ref.checkedSet,\n      halfCheckedSet = _ref.halfCheckedSet,\n      loadingKeys = _ref.loadingKeys,\n      isSelectable = _ref.isSelectable;\n  var menuPrefixCls = \"\".concat(prefixCls, \"-menu\");\n  var menuItemPrefixCls = \"\".concat(prefixCls, \"-menu-item\");\n\n  var _React$useContext = React.useContext(CascaderContext),\n      fieldNames = _React$useContext.fieldNames,\n      changeOnSelect = _React$useContext.changeOnSelect,\n      expandTrigger = _React$useContext.expandTrigger,\n      expandIcon = _React$useContext.expandIcon,\n      loadingIcon = _React$useContext.loadingIcon,\n      dropdownMenuColumnStyle = _React$useContext.dropdownMenuColumnStyle;\n\n  var hoverOpen = expandTrigger === 'hover'; // ============================ Option ============================\n\n  var optionInfoList = React.useMemo(function () {\n    return options.map(function (option) {\n      var disabled = option.disabled;\n      var searchOptions = option[SEARCH_MARK];\n      var label = option[fieldNames.label];\n      var value = option[fieldNames.value];\n      var isMergedLeaf = isLeaf(option, fieldNames); // Get real value of option. Search option is different way.\n\n      var fullPath = searchOptions ? searchOptions.map(function (opt) {\n        return opt[fieldNames.value];\n      }) : [].concat(_toConsumableArray(prevValuePath), [value]);\n      var fullPathKey = toPathKey(fullPath);\n      var isLoading = loadingKeys.includes(fullPathKey); // >>>>> checked\n\n      var checked = checkedSet.has(fullPathKey); // >>>>> halfChecked\n\n      var halfChecked = halfCheckedSet.has(fullPathKey);\n      return {\n        disabled: disabled,\n        label: label,\n        value: value,\n        isLeaf: isMergedLeaf,\n        isLoading: isLoading,\n        checked: checked,\n        halfChecked: halfChecked,\n        option: option,\n        fullPath: fullPath,\n        fullPathKey: fullPathKey\n      };\n    });\n  }, [options, checkedSet, fieldNames, halfCheckedSet, loadingKeys, prevValuePath]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: menuPrefixCls,\n    role: \"menu\"\n  }, optionInfoList.map(function (_ref2) {\n    var _classNames;\n\n    var disabled = _ref2.disabled,\n        label = _ref2.label,\n        value = _ref2.value,\n        isMergedLeaf = _ref2.isLeaf,\n        isLoading = _ref2.isLoading,\n        checked = _ref2.checked,\n        halfChecked = _ref2.halfChecked,\n        option = _ref2.option,\n        fullPath = _ref2.fullPath,\n        fullPathKey = _ref2.fullPathKey;\n\n    // >>>>> Open\n    var triggerOpenPath = function triggerOpenPath() {\n      if (!disabled && (!hoverOpen || !isMergedLeaf)) {\n        onActive(fullPath);\n      }\n    }; // >>>>> Selection\n\n\n    var triggerSelect = function triggerSelect() {\n      if (isSelectable(option)) {\n        onSelect(fullPath, isMergedLeaf);\n      }\n    }; // >>>>> Title\n\n\n    var title;\n\n    if (typeof option.title === 'string') {\n      title = option.title;\n    } else if (typeof label === 'string') {\n      title = label;\n    } // >>>>> Render\n\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fullPathKey,\n      className: classNames(menuItemPrefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-expand\"), !isMergedLeaf), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-active\"), activeValue === value), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-loading\"), isLoading), _classNames)),\n      style: dropdownMenuColumnStyle,\n      role: \"menuitemcheckbox\",\n      title: title,\n      \"aria-checked\": checked,\n      \"data-path-key\": fullPathKey,\n      onClick: function onClick() {\n        triggerOpenPath();\n\n        if (!multiple || isMergedLeaf) {\n          triggerSelect();\n        }\n      },\n      onDoubleClick: function onDoubleClick() {\n        if (changeOnSelect) {\n          onToggleOpen(false);\n        }\n      },\n      onMouseEnter: function onMouseEnter() {\n        if (hoverOpen) {\n          triggerOpenPath();\n        }\n      },\n      onMouseDown: function onMouseDown(e) {\n        // Prevent selector from blurring\n        e.preventDefault();\n      }\n    }, multiple && /*#__PURE__*/React.createElement(Checkbox, {\n      prefixCls: \"\".concat(prefixCls, \"-checkbox\"),\n      checked: checked,\n      halfChecked: halfChecked,\n      disabled: disabled,\n      onClick: function onClick(e) {\n        e.stopPropagation();\n        triggerSelect();\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-content\")\n    }, label), !isLoading && expandIcon && !isMergedLeaf && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-expand-icon\")\n    }, expandIcon), isLoading && loadingIcon && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-loading-icon\")\n    }, loadingIcon));\n  }));\n}"]},"metadata":{},"sourceType":"module"}