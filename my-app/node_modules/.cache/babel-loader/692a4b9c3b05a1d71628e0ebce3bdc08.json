{"ast":null,"code":"import { inputToRGB, rgbToHex, rgbToHsv } from '@ctrl/tinycolor';\nvar hueStep = 2; // 色相阶梯\n\nvar saturationStep = 0.16; // 饱和度阶梯，浅色部分\n\nvar saturationStep2 = 0.05; // 饱和度阶梯，深色部分\n\nvar brightnessStep1 = 0.05; // 亮度阶梯，浅色部分\n\nvar brightnessStep2 = 0.15; // 亮度阶梯，深色部分\n\nvar lightColorCount = 5; // 浅色数量，主色上\n\nvar darkColorCount = 4; // 深色数量，主色下\n// 暗色主题颜色映射关系表\n\nvar darkColorMap = [{\n  index: 7,\n  opacity: 0.15\n}, {\n  index: 6,\n  opacity: 0.25\n}, {\n  index: 5,\n  opacity: 0.3\n}, {\n  index: 5,\n  opacity: 0.45\n}, {\n  index: 5,\n  opacity: 0.65\n}, {\n  index: 5,\n  opacity: 0.85\n}, {\n  index: 4,\n  opacity: 0.9\n}, {\n  index: 3,\n  opacity: 0.95\n}, {\n  index: 2,\n  opacity: 0.97\n}, {\n  index: 1,\n  opacity: 0.98\n}]; // Wrapper function ported from TinyColor.prototype.toHsv\n// Keep it here because of `hsv.h * 360`\n\nfunction toHsv(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b;\n  var hsv = rgbToHsv(r, g, b);\n  return {\n    h: hsv.h * 360,\n    s: hsv.s,\n    v: hsv.v\n  };\n} // Wrapper function ported from TinyColor.prototype.toHexString\n// Keep it here because of the prefix `#`\n\n\nfunction toHex(_ref2) {\n  var r = _ref2.r,\n      g = _ref2.g,\n      b = _ref2.b;\n  return \"#\".concat(rgbToHex(r, g, b, false));\n} // Wrapper function ported from TinyColor.prototype.mix, not treeshakable.\n// Amount in range [0, 1]\n// Assume color1 & color2 has no alpha, since the following src code did so.\n\n\nfunction mix(rgb1, rgb2, amount) {\n  var p = amount / 100;\n  var rgb = {\n    r: (rgb2.r - rgb1.r) * p + rgb1.r,\n    g: (rgb2.g - rgb1.g) * p + rgb1.g,\n    b: (rgb2.b - rgb1.b) * p + rgb1.b\n  };\n  return rgb;\n}\n\nfunction getHue(hsv, i, light) {\n  var hue; // 根据色相不同，色相转向不同\n\n  if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {\n    hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;\n  } else {\n    hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;\n  }\n\n  if (hue < 0) {\n    hue += 360;\n  } else if (hue >= 360) {\n    hue -= 360;\n  }\n\n  return hue;\n}\n\nfunction getSaturation(hsv, i, light) {\n  // grey color don't change saturation\n  if (hsv.h === 0 && hsv.s === 0) {\n    return hsv.s;\n  }\n\n  var saturation;\n\n  if (light) {\n    saturation = hsv.s - saturationStep * i;\n  } else if (i === darkColorCount) {\n    saturation = hsv.s + saturationStep;\n  } else {\n    saturation = hsv.s + saturationStep2 * i;\n  } // 边界值修正\n\n\n  if (saturation > 1) {\n    saturation = 1;\n  } // 第一格的 s 限制在 0.06-0.1 之间\n\n\n  if (light && i === lightColorCount && saturation > 0.1) {\n    saturation = 0.1;\n  }\n\n  if (saturation < 0.06) {\n    saturation = 0.06;\n  }\n\n  return Number(saturation.toFixed(2));\n}\n\nfunction getValue(hsv, i, light) {\n  var value;\n\n  if (light) {\n    value = hsv.v + brightnessStep1 * i;\n  } else {\n    value = hsv.v - brightnessStep2 * i;\n  }\n\n  if (value > 1) {\n    value = 1;\n  }\n\n  return Number(value.toFixed(2));\n}\n\nfunction generate(color) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var patterns = [];\n  var pColor = inputToRGB(color);\n\n  for (var i = lightColorCount; i > 0; i -= 1) {\n    var hsv = toHsv(pColor);\n    var colorString = toHex(inputToRGB({\n      h: getHue(hsv, i, true),\n      s: getSaturation(hsv, i, true),\n      v: getValue(hsv, i, true)\n    }));\n    patterns.push(colorString);\n  }\n\n  patterns.push(toHex(pColor));\n\n  for (var _i = 1; _i <= darkColorCount; _i += 1) {\n    var _hsv = toHsv(pColor);\n\n    var _colorString = toHex(inputToRGB({\n      h: getHue(_hsv, _i),\n      s: getSaturation(_hsv, _i),\n      v: getValue(_hsv, _i)\n    }));\n\n    patterns.push(_colorString);\n  } // dark theme patterns\n\n\n  if (opts.theme === 'dark') {\n    return darkColorMap.map(function (_ref3) {\n      var index = _ref3.index,\n          opacity = _ref3.opacity;\n      var darkColorString = toHex(mix(inputToRGB(opts.backgroundColor || '#141414'), inputToRGB(patterns[index]), opacity * 100));\n      return darkColorString;\n    });\n  }\n\n  return patterns;\n}\n\nvar presetPrimaryColors = {\n  red: '#F5222D',\n  volcano: '#FA541C',\n  orange: '#FA8C16',\n  gold: '#FAAD14',\n  yellow: '#FADB14',\n  lime: '#A0D911',\n  green: '#52C41A',\n  cyan: '#13C2C2',\n  blue: '#1890FF',\n  geekblue: '#2F54EB',\n  purple: '#722ED1',\n  magenta: '#EB2F96',\n  grey: '#666666'\n};\nvar presetPalettes = {};\nvar presetDarkPalettes = {};\nObject.keys(presetPrimaryColors).forEach(function (key) {\n  presetPalettes[key] = generate(presetPrimaryColors[key]);\n  presetPalettes[key].primary = presetPalettes[key][5]; // dark presetPalettes\n\n  presetDarkPalettes[key] = generate(presetPrimaryColors[key], {\n    theme: 'dark',\n    backgroundColor: '#141414'\n  });\n  presetDarkPalettes[key].primary = presetDarkPalettes[key][5];\n});\nvar red = presetPalettes.red;\nvar volcano = presetPalettes.volcano;\nvar gold = presetPalettes.gold;\nvar orange = presetPalettes.orange;\nvar yellow = presetPalettes.yellow;\nvar lime = presetPalettes.lime;\nvar green = presetPalettes.green;\nvar cyan = presetPalettes.cyan;\nvar blue = presetPalettes.blue;\nvar geekblue = presetPalettes.geekblue;\nvar purple = presetPalettes.purple;\nvar magenta = presetPalettes.magenta;\nvar grey = presetPalettes.grey;\nexport { blue, cyan, geekblue, generate, gold, green, grey, lime, magenta, orange, presetDarkPalettes, presetPalettes, presetPrimaryColors, purple, red, volcano, yellow };","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/@ant-design/colors/dist/index.esm.js"],"names":["inputToRGB","rgbToHex","rgbToHsv","hueStep","saturationStep","saturationStep2","brightnessStep1","brightnessStep2","lightColorCount","darkColorCount","darkColorMap","index","opacity","toHsv","_ref","r","g","b","hsv","h","s","v","toHex","_ref2","concat","mix","rgb1","rgb2","amount","p","rgb","getHue","i","light","hue","Math","round","getSaturation","saturation","Number","toFixed","getValue","value","generate","color","opts","arguments","length","undefined","patterns","pColor","colorString","push","_i","_hsv","_colorString","theme","map","_ref3","darkColorString","backgroundColor","presetPrimaryColors","red","volcano","orange","gold","yellow","lime","green","cyan","blue","geekblue","purple","magenta","grey","presetPalettes","presetDarkPalettes","Object","keys","forEach","key","primary"],"mappings":"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","sourcesContent":["import { inputToRGB, rgbToHex, rgbToHsv } from '@ctrl/tinycolor';\n\nvar hueStep = 2; // 色相阶梯\n\nvar saturationStep = 0.16; // 饱和度阶梯，浅色部分\n\nvar saturationStep2 = 0.05; // 饱和度阶梯，深色部分\n\nvar brightnessStep1 = 0.05; // 亮度阶梯，浅色部分\n\nvar brightnessStep2 = 0.15; // 亮度阶梯，深色部分\n\nvar lightColorCount = 5; // 浅色数量，主色上\n\nvar darkColorCount = 4; // 深色数量，主色下\n// 暗色主题颜色映射关系表\n\nvar darkColorMap = [{\n  index: 7,\n  opacity: 0.15\n}, {\n  index: 6,\n  opacity: 0.25\n}, {\n  index: 5,\n  opacity: 0.3\n}, {\n  index: 5,\n  opacity: 0.45\n}, {\n  index: 5,\n  opacity: 0.65\n}, {\n  index: 5,\n  opacity: 0.85\n}, {\n  index: 4,\n  opacity: 0.9\n}, {\n  index: 3,\n  opacity: 0.95\n}, {\n  index: 2,\n  opacity: 0.97\n}, {\n  index: 1,\n  opacity: 0.98\n}]; // Wrapper function ported from TinyColor.prototype.toHsv\n// Keep it here because of `hsv.h * 360`\n\nfunction toHsv(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b;\n  var hsv = rgbToHsv(r, g, b);\n  return {\n    h: hsv.h * 360,\n    s: hsv.s,\n    v: hsv.v\n  };\n} // Wrapper function ported from TinyColor.prototype.toHexString\n// Keep it here because of the prefix `#`\n\n\nfunction toHex(_ref2) {\n  var r = _ref2.r,\n      g = _ref2.g,\n      b = _ref2.b;\n  return \"#\".concat(rgbToHex(r, g, b, false));\n} // Wrapper function ported from TinyColor.prototype.mix, not treeshakable.\n// Amount in range [0, 1]\n// Assume color1 & color2 has no alpha, since the following src code did so.\n\n\nfunction mix(rgb1, rgb2, amount) {\n  var p = amount / 100;\n  var rgb = {\n    r: (rgb2.r - rgb1.r) * p + rgb1.r,\n    g: (rgb2.g - rgb1.g) * p + rgb1.g,\n    b: (rgb2.b - rgb1.b) * p + rgb1.b\n  };\n  return rgb;\n}\n\nfunction getHue(hsv, i, light) {\n  var hue; // 根据色相不同，色相转向不同\n\n  if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {\n    hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;\n  } else {\n    hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;\n  }\n\n  if (hue < 0) {\n    hue += 360;\n  } else if (hue >= 360) {\n    hue -= 360;\n  }\n\n  return hue;\n}\n\nfunction getSaturation(hsv, i, light) {\n  // grey color don't change saturation\n  if (hsv.h === 0 && hsv.s === 0) {\n    return hsv.s;\n  }\n\n  var saturation;\n\n  if (light) {\n    saturation = hsv.s - saturationStep * i;\n  } else if (i === darkColorCount) {\n    saturation = hsv.s + saturationStep;\n  } else {\n    saturation = hsv.s + saturationStep2 * i;\n  } // 边界值修正\n\n\n  if (saturation > 1) {\n    saturation = 1;\n  } // 第一格的 s 限制在 0.06-0.1 之间\n\n\n  if (light && i === lightColorCount && saturation > 0.1) {\n    saturation = 0.1;\n  }\n\n  if (saturation < 0.06) {\n    saturation = 0.06;\n  }\n\n  return Number(saturation.toFixed(2));\n}\n\nfunction getValue(hsv, i, light) {\n  var value;\n\n  if (light) {\n    value = hsv.v + brightnessStep1 * i;\n  } else {\n    value = hsv.v - brightnessStep2 * i;\n  }\n\n  if (value > 1) {\n    value = 1;\n  }\n\n  return Number(value.toFixed(2));\n}\n\nfunction generate(color) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var patterns = [];\n  var pColor = inputToRGB(color);\n\n  for (var i = lightColorCount; i > 0; i -= 1) {\n    var hsv = toHsv(pColor);\n    var colorString = toHex(inputToRGB({\n      h: getHue(hsv, i, true),\n      s: getSaturation(hsv, i, true),\n      v: getValue(hsv, i, true)\n    }));\n    patterns.push(colorString);\n  }\n\n  patterns.push(toHex(pColor));\n\n  for (var _i = 1; _i <= darkColorCount; _i += 1) {\n    var _hsv = toHsv(pColor);\n\n    var _colorString = toHex(inputToRGB({\n      h: getHue(_hsv, _i),\n      s: getSaturation(_hsv, _i),\n      v: getValue(_hsv, _i)\n    }));\n\n    patterns.push(_colorString);\n  } // dark theme patterns\n\n\n  if (opts.theme === 'dark') {\n    return darkColorMap.map(function (_ref3) {\n      var index = _ref3.index,\n          opacity = _ref3.opacity;\n      var darkColorString = toHex(mix(inputToRGB(opts.backgroundColor || '#141414'), inputToRGB(patterns[index]), opacity * 100));\n      return darkColorString;\n    });\n  }\n\n  return patterns;\n}\n\nvar presetPrimaryColors = {\n  red: '#F5222D',\n  volcano: '#FA541C',\n  orange: '#FA8C16',\n  gold: '#FAAD14',\n  yellow: '#FADB14',\n  lime: '#A0D911',\n  green: '#52C41A',\n  cyan: '#13C2C2',\n  blue: '#1890FF',\n  geekblue: '#2F54EB',\n  purple: '#722ED1',\n  magenta: '#EB2F96',\n  grey: '#666666'\n};\nvar presetPalettes = {};\nvar presetDarkPalettes = {};\nObject.keys(presetPrimaryColors).forEach(function (key) {\n  presetPalettes[key] = generate(presetPrimaryColors[key]);\n  presetPalettes[key].primary = presetPalettes[key][5]; // dark presetPalettes\n\n  presetDarkPalettes[key] = generate(presetPrimaryColors[key], {\n    theme: 'dark',\n    backgroundColor: '#141414'\n  });\n  presetDarkPalettes[key].primary = presetDarkPalettes[key][5];\n});\nvar red = presetPalettes.red;\nvar volcano = presetPalettes.volcano;\nvar gold = presetPalettes.gold;\nvar orange = presetPalettes.orange;\nvar yellow = presetPalettes.yellow;\nvar lime = presetPalettes.lime;\nvar green = presetPalettes.green;\nvar cyan = presetPalettes.cyan;\nvar blue = presetPalettes.blue;\nvar geekblue = presetPalettes.geekblue;\nvar purple = presetPalettes.purple;\nvar magenta = presetPalettes.magenta;\nvar grey = presetPalettes.grey;\n\nexport { blue, cyan, geekblue, generate, gold, green, grey, lime, magenta, orange, presetDarkPalettes, presetPalettes, presetPrimaryColors, purple, red, volcano, yellow };\n"]},"metadata":{},"sourceType":"module"}