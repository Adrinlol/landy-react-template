{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/**\n * Wrap of sub component which need use as Button capacity (like Icon component).\n *\n * This helps accessibility reader to tread as a interactive button to operation.\n */\n\n\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nvar inlineStyle = {\n  border: 0,\n  background: 'transparent',\n  padding: 0,\n  lineHeight: 'inherit',\n  display: 'inline-block'\n};\nvar TransButton = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var onKeyDown = function onKeyDown(event) {\n    var keyCode = event.keyCode;\n\n    if (keyCode === KeyCode.ENTER) {\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp(event) {\n    var keyCode = event.keyCode;\n    var onClick = props.onClick;\n\n    if (keyCode === KeyCode.ENTER && onClick) {\n      onClick();\n    }\n  };\n\n  var style = props.style,\n      noStyle = props.noStyle,\n      disabled = props.disabled,\n      restProps = __rest(props, [\"style\", \"noStyle\", \"disabled\"]);\n\n  var mergedStyle = {};\n\n  if (!noStyle) {\n    mergedStyle = _extends({}, inlineStyle);\n  }\n\n  if (disabled) {\n    mergedStyle.pointerEvents = 'none';\n  }\n\n  mergedStyle = _extends(_extends({}, mergedStyle), style);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"button\",\n    tabIndex: 0,\n    ref: ref\n  }, restProps, {\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    style: mergedStyle\n  }));\n});\nexport default TransButton;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/antd/es/_util/transButton.js"],"names":["_extends","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","KeyCode","inlineStyle","border","background","padding","lineHeight","display","TransButton","forwardRef","props","ref","onKeyDown","event","keyCode","ENTER","preventDefault","onKeyUp","onClick","style","noStyle","disabled","restProps","mergedStyle","pointerEvents","createElement","role","tabIndex"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/**\n * Wrap of sub component which need use as Button capacity (like Icon component).\n *\n * This helps accessibility reader to tread as a interactive button to operation.\n */\n\n\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nvar inlineStyle = {\n  border: 0,\n  background: 'transparent',\n  padding: 0,\n  lineHeight: 'inherit',\n  display: 'inline-block'\n};\nvar TransButton = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var onKeyDown = function onKeyDown(event) {\n    var keyCode = event.keyCode;\n\n    if (keyCode === KeyCode.ENTER) {\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp(event) {\n    var keyCode = event.keyCode;\n    var onClick = props.onClick;\n\n    if (keyCode === KeyCode.ENTER && onClick) {\n      onClick();\n    }\n  };\n\n  var style = props.style,\n      noStyle = props.noStyle,\n      disabled = props.disabled,\n      restProps = __rest(props, [\"style\", \"noStyle\", \"disabled\"]);\n\n  var mergedStyle = {};\n\n  if (!noStyle) {\n    mergedStyle = _extends({}, inlineStyle);\n  }\n\n  if (disabled) {\n    mergedStyle.pointerEvents = 'none';\n  }\n\n  mergedStyle = _extends(_extends({}, mergedStyle), style);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"button\",\n    tabIndex: 0,\n    ref: ref\n  }, restProps, {\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    style: mergedStyle\n  }));\n});\nexport default TransButton;"]},"metadata":{},"sourceType":"module"}