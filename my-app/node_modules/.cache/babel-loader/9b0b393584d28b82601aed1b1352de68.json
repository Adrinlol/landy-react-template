{"ast":null,"code":"import * as React from 'react';\nimport ResizeObserver from 'rc-resize-observer';\nimport MeasureCell from './MeasureCell';\nimport raf from \"rc-util/es/raf\";\nexport default function MeasureRow(_ref) {\n  var prefixCls = _ref.prefixCls,\n      columnsKey = _ref.columnsKey,\n      onColumnResize = _ref.onColumnResize; // delay state update while resize continuously, e.g. window resize\n\n  var resizedColumnsRef = React.useRef(new Map());\n  var rafIdRef = React.useRef(null);\n\n  var delayOnColumnResize = function delayOnColumnResize() {\n    if (rafIdRef.current === null) {\n      rafIdRef.current = raf(function () {\n        resizedColumnsRef.current.forEach(function (width, columnKey) {\n          onColumnResize(columnKey, width);\n        });\n        resizedColumnsRef.current.clear();\n        rafIdRef.current = null;\n      }, 2);\n    }\n  };\n\n  React.useEffect(function () {\n    return function () {\n      raf.cancel(rafIdRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    \"aria-hidden\": \"true\",\n    className: \"\".concat(prefixCls, \"-measure-row\"),\n    style: {\n      height: 0,\n      fontSize: 0\n    }\n  }, /*#__PURE__*/React.createElement(ResizeObserver.Collection, {\n    onBatchResize: function onBatchResize(infoList) {\n      infoList.forEach(function (_ref2) {\n        var columnKey = _ref2.data,\n            size = _ref2.size;\n        resizedColumnsRef.current.set(columnKey, size.offsetWidth);\n      });\n      delayOnColumnResize();\n    }\n  }, columnsKey.map(function (columnKey) {\n    return /*#__PURE__*/React.createElement(MeasureCell, {\n      key: columnKey,\n      columnKey: columnKey,\n      onColumnResize: onColumnResize\n    });\n  })));\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-table/es/Body/MeasureRow.js"],"names":["React","ResizeObserver","MeasureCell","raf","MeasureRow","_ref","prefixCls","columnsKey","onColumnResize","resizedColumnsRef","useRef","Map","rafIdRef","delayOnColumnResize","current","forEach","width","columnKey","clear","useEffect","cancel","createElement","className","concat","style","height","fontSize","Collection","onBatchResize","infoList","_ref2","data","size","set","offsetWidth","map","key"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,eAAe,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACvC,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;AAAA,MACIC,UAAU,GAAGF,IAAI,CAACE,UADtB;AAAA,MAEIC,cAAc,GAAGH,IAAI,CAACG,cAF1B,CADuC,CAIvC;;AACA,MAAIC,iBAAiB,GAAGT,KAAK,CAACU,MAAN,CAAa,IAAIC,GAAJ,EAAb,CAAxB;AACA,MAAIC,QAAQ,GAAGZ,KAAK,CAACU,MAAN,CAAa,IAAb,CAAf;;AAEA,MAAIG,mBAAmB,GAAG,SAASA,mBAAT,GAA+B;AACvD,QAAID,QAAQ,CAACE,OAAT,KAAqB,IAAzB,EAA+B;AAC7BF,MAAAA,QAAQ,CAACE,OAAT,GAAmBX,GAAG,CAAC,YAAY;AACjCM,QAAAA,iBAAiB,CAACK,OAAlB,CAA0BC,OAA1B,CAAkC,UAAUC,KAAV,EAAiBC,SAAjB,EAA4B;AAC5DT,UAAAA,cAAc,CAACS,SAAD,EAAYD,KAAZ,CAAd;AACD,SAFD;AAGAP,QAAAA,iBAAiB,CAACK,OAAlB,CAA0BI,KAA1B;AACAN,QAAAA,QAAQ,CAACE,OAAT,GAAmB,IAAnB;AACD,OANqB,EAMnB,CANmB,CAAtB;AAOD;AACF,GAVD;;AAYAd,EAAAA,KAAK,CAACmB,SAAN,CAAgB,YAAY;AAC1B,WAAO,YAAY;AACjBhB,MAAAA,GAAG,CAACiB,MAAJ,CAAWR,QAAQ,CAACE,OAApB;AACD,KAFD;AAGD,GAJD,EAIG,EAJH;AAKA,SAAO,aAAad,KAAK,CAACqB,aAAN,CAAoB,IAApB,EAA0B;AAC5C,mBAAe,MAD6B;AAE5CC,IAAAA,SAAS,EAAE,GAAGC,MAAH,CAAUjB,SAAV,EAAqB,cAArB,CAFiC;AAG5CkB,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,CADH;AAELC,MAAAA,QAAQ,EAAE;AAFL;AAHqC,GAA1B,EAOjB,aAAa1B,KAAK,CAACqB,aAAN,CAAoBpB,cAAc,CAAC0B,UAAnC,EAA+C;AAC7DC,IAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,QAAvB,EAAiC;AAC9CA,MAAAA,QAAQ,CAACd,OAAT,CAAiB,UAAUe,KAAV,EAAiB;AAChC,YAAIb,SAAS,GAAGa,KAAK,CAACC,IAAtB;AAAA,YACIC,IAAI,GAAGF,KAAK,CAACE,IADjB;AAEAvB,QAAAA,iBAAiB,CAACK,OAAlB,CAA0BmB,GAA1B,CAA8BhB,SAA9B,EAAyCe,IAAI,CAACE,WAA9C;AACD,OAJD;AAKArB,MAAAA,mBAAmB;AACpB;AAR4D,GAA/C,EASbN,UAAU,CAAC4B,GAAX,CAAe,UAAUlB,SAAV,EAAqB;AACrC,WAAO,aAAajB,KAAK,CAACqB,aAAN,CAAoBnB,WAApB,EAAiC;AACnDkC,MAAAA,GAAG,EAAEnB,SAD8C;AAEnDA,MAAAA,SAAS,EAAEA,SAFwC;AAGnDT,MAAAA,cAAc,EAAEA;AAHmC,KAAjC,CAApB;AAKD,GANE,CATa,CAPI,CAApB;AAuBD","sourcesContent":["import * as React from 'react';\nimport ResizeObserver from 'rc-resize-observer';\nimport MeasureCell from './MeasureCell';\nimport raf from \"rc-util/es/raf\";\nexport default function MeasureRow(_ref) {\n  var prefixCls = _ref.prefixCls,\n      columnsKey = _ref.columnsKey,\n      onColumnResize = _ref.onColumnResize;\n  // delay state update while resize continuously, e.g. window resize\n  var resizedColumnsRef = React.useRef(new Map());\n  var rafIdRef = React.useRef(null);\n\n  var delayOnColumnResize = function delayOnColumnResize() {\n    if (rafIdRef.current === null) {\n      rafIdRef.current = raf(function () {\n        resizedColumnsRef.current.forEach(function (width, columnKey) {\n          onColumnResize(columnKey, width);\n        });\n        resizedColumnsRef.current.clear();\n        rafIdRef.current = null;\n      }, 2);\n    }\n  };\n\n  React.useEffect(function () {\n    return function () {\n      raf.cancel(rafIdRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    \"aria-hidden\": \"true\",\n    className: \"\".concat(prefixCls, \"-measure-row\"),\n    style: {\n      height: 0,\n      fontSize: 0\n    }\n  }, /*#__PURE__*/React.createElement(ResizeObserver.Collection, {\n    onBatchResize: function onBatchResize(infoList) {\n      infoList.forEach(function (_ref2) {\n        var columnKey = _ref2.data,\n            size = _ref2.size;\n        resizedColumnsRef.current.set(columnKey, size.offsetWidth);\n      });\n      delayOnColumnResize();\n    }\n  }, columnsKey.map(function (columnKey) {\n    return /*#__PURE__*/React.createElement(MeasureCell, {\n      key: columnKey,\n      columnKey: columnKey,\n      onColumnResize: onColumnResize\n    });\n  })));\n}"]},"metadata":{},"sourceType":"module"}