{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport TableContext from '../context/TableContext';\nimport ExpandedRow from './ExpandedRow';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ResizeContext from '../context/ResizeContext';\nimport BodyRow from './BodyRow';\nimport useFlattenRecords from '../hooks/useFlattenRecords';\nimport HoverContext from '../context/HoverContext';\nimport MeasureRow from './MeasureRow';\n\nfunction Body(_ref) {\n  var data = _ref.data,\n      getRowKey = _ref.getRowKey,\n      measureColumnWidth = _ref.measureColumnWidth,\n      expandedKeys = _ref.expandedKeys,\n      onRow = _ref.onRow,\n      rowExpandable = _ref.rowExpandable,\n      emptyNode = _ref.emptyNode,\n      childrenColumnName = _ref.childrenColumnName;\n\n  var _React$useContext = React.useContext(ResizeContext),\n      onColumnResize = _React$useContext.onColumnResize;\n\n  var _React$useContext2 = React.useContext(TableContext),\n      prefixCls = _React$useContext2.prefixCls,\n      getComponent = _React$useContext2.getComponent;\n\n  var _React$useContext3 = React.useContext(BodyContext),\n      flattenColumns = _React$useContext3.flattenColumns;\n\n  var flattenData = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey); // ====================== Hover =======================\n\n  var _React$useState = React.useState(-1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      startRow = _React$useState2[0],\n      setStartRow = _React$useState2[1];\n\n  var _React$useState3 = React.useState(-1),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      endRow = _React$useState4[0],\n      setEndRow = _React$useState4[1];\n\n  var onHover = React.useCallback(function (start, end) {\n    setStartRow(start);\n    setEndRow(end);\n  }, []);\n  var hoverContext = React.useMemo(function () {\n    return {\n      startRow: startRow,\n      endRow: endRow,\n      onHover: onHover\n    };\n  }, [onHover, startRow, endRow]); // ====================== Render ======================\n\n  var bodyNode = React.useMemo(function () {\n    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n    var trComponent = getComponent(['body', 'row'], 'tr');\n    var tdComponent = getComponent(['body', 'cell'], 'td');\n    var rows;\n\n    if (data.length) {\n      rows = flattenData.map(function (item, idx) {\n        var record = item.record,\n            indent = item.indent,\n            renderIndex = item.index;\n        var key = getRowKey(record, idx);\n        return /*#__PURE__*/React.createElement(BodyRow, {\n          key: key,\n          rowKey: key,\n          record: record,\n          recordKey: key,\n          index: idx,\n          renderIndex: renderIndex,\n          rowComponent: trComponent,\n          cellComponent: tdComponent,\n          expandedKeys: expandedKeys,\n          onRow: onRow,\n          getRowKey: getRowKey,\n          rowExpandable: rowExpandable,\n          childrenColumnName: childrenColumnName,\n          indent: indent\n        });\n      });\n    } else {\n      rows = /*#__PURE__*/React.createElement(ExpandedRow, {\n        expanded: true,\n        className: \"\".concat(prefixCls, \"-placeholder\"),\n        prefixCls: prefixCls,\n        component: trComponent,\n        cellComponent: tdComponent,\n        colSpan: flattenColumns.length,\n        isEmpty: true\n      }, emptyNode);\n    }\n\n    var columnsKey = getColumnsKey(flattenColumns);\n    return /*#__PURE__*/React.createElement(WrapperComponent, {\n      className: \"\".concat(prefixCls, \"-tbody\")\n    }, measureColumnWidth && /*#__PURE__*/React.createElement(MeasureRow, {\n      prefixCls: prefixCls,\n      columnsKey: columnsKey,\n      onColumnResize: onColumnResize\n    }), rows);\n  }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, emptyNode, flattenColumns, childrenColumnName, onColumnResize, rowExpandable, flattenData]);\n  return /*#__PURE__*/React.createElement(HoverContext.Provider, {\n    value: hoverContext\n  }, bodyNode);\n}\n\nvar MemoBody = /*#__PURE__*/React.memo(Body);\nMemoBody.displayName = 'Body';\nexport default MemoBody;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-table/es/Body/index.js"],"names":["_slicedToArray","React","TableContext","ExpandedRow","BodyContext","getColumnsKey","ResizeContext","BodyRow","useFlattenRecords","HoverContext","MeasureRow","Body","_ref","data","getRowKey","measureColumnWidth","expandedKeys","onRow","rowExpandable","emptyNode","childrenColumnName","_React$useContext","useContext","onColumnResize","_React$useContext2","prefixCls","getComponent","_React$useContext3","flattenColumns","flattenData","_React$useState","useState","_React$useState2","startRow","setStartRow","_React$useState3","_React$useState4","endRow","setEndRow","onHover","useCallback","start","end","hoverContext","useMemo","bodyNode","WrapperComponent","trComponent","tdComponent","rows","length","map","item","idx","record","indent","renderIndex","index","key","createElement","rowKey","recordKey","rowComponent","cellComponent","expanded","className","concat","component","colSpan","isEmpty","columnsKey","Provider","value","MemoBody","memo","displayName"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport TableContext from '../context/TableContext';\nimport ExpandedRow from './ExpandedRow';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ResizeContext from '../context/ResizeContext';\nimport BodyRow from './BodyRow';\nimport useFlattenRecords from '../hooks/useFlattenRecords';\nimport HoverContext from '../context/HoverContext';\nimport MeasureRow from './MeasureRow';\n\nfunction Body(_ref) {\n  var data = _ref.data,\n      getRowKey = _ref.getRowKey,\n      measureColumnWidth = _ref.measureColumnWidth,\n      expandedKeys = _ref.expandedKeys,\n      onRow = _ref.onRow,\n      rowExpandable = _ref.rowExpandable,\n      emptyNode = _ref.emptyNode,\n      childrenColumnName = _ref.childrenColumnName;\n\n  var _React$useContext = React.useContext(ResizeContext),\n      onColumnResize = _React$useContext.onColumnResize;\n\n  var _React$useContext2 = React.useContext(TableContext),\n      prefixCls = _React$useContext2.prefixCls,\n      getComponent = _React$useContext2.getComponent;\n\n  var _React$useContext3 = React.useContext(BodyContext),\n      flattenColumns = _React$useContext3.flattenColumns;\n\n  var flattenData = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey); // ====================== Hover =======================\n\n  var _React$useState = React.useState(-1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      startRow = _React$useState2[0],\n      setStartRow = _React$useState2[1];\n\n  var _React$useState3 = React.useState(-1),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      endRow = _React$useState4[0],\n      setEndRow = _React$useState4[1];\n\n  var onHover = React.useCallback(function (start, end) {\n    setStartRow(start);\n    setEndRow(end);\n  }, []);\n  var hoverContext = React.useMemo(function () {\n    return {\n      startRow: startRow,\n      endRow: endRow,\n      onHover: onHover\n    };\n  }, [onHover, startRow, endRow]); // ====================== Render ======================\n\n  var bodyNode = React.useMemo(function () {\n    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n    var trComponent = getComponent(['body', 'row'], 'tr');\n    var tdComponent = getComponent(['body', 'cell'], 'td');\n    var rows;\n\n    if (data.length) {\n      rows = flattenData.map(function (item, idx) {\n        var record = item.record,\n            indent = item.indent,\n            renderIndex = item.index;\n        var key = getRowKey(record, idx);\n        return /*#__PURE__*/React.createElement(BodyRow, {\n          key: key,\n          rowKey: key,\n          record: record,\n          recordKey: key,\n          index: idx,\n          renderIndex: renderIndex,\n          rowComponent: trComponent,\n          cellComponent: tdComponent,\n          expandedKeys: expandedKeys,\n          onRow: onRow,\n          getRowKey: getRowKey,\n          rowExpandable: rowExpandable,\n          childrenColumnName: childrenColumnName,\n          indent: indent\n        });\n      });\n    } else {\n      rows = /*#__PURE__*/React.createElement(ExpandedRow, {\n        expanded: true,\n        className: \"\".concat(prefixCls, \"-placeholder\"),\n        prefixCls: prefixCls,\n        component: trComponent,\n        cellComponent: tdComponent,\n        colSpan: flattenColumns.length,\n        isEmpty: true\n      }, emptyNode);\n    }\n\n    var columnsKey = getColumnsKey(flattenColumns);\n    return /*#__PURE__*/React.createElement(WrapperComponent, {\n      className: \"\".concat(prefixCls, \"-tbody\")\n    }, measureColumnWidth && /*#__PURE__*/React.createElement(MeasureRow, {\n      prefixCls: prefixCls,\n      columnsKey: columnsKey,\n      onColumnResize: onColumnResize\n    }), rows);\n  }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, emptyNode, flattenColumns, childrenColumnName, onColumnResize, rowExpandable, flattenData]);\n  return /*#__PURE__*/React.createElement(HoverContext.Provider, {\n    value: hoverContext\n  }, bodyNode);\n}\n\nvar MemoBody = /*#__PURE__*/React.memo(Body);\nMemoBody.displayName = 'Body';\nexport default MemoBody;"]},"metadata":{},"sourceType":"module"}