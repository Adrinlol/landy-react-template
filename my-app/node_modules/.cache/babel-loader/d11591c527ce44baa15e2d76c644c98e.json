{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useRCNotification from \"rc-notification/es/useNotification\";\nimport { ConfigConsumer } from '../../config-provider';\nimport { attachTypeApi, getKeyThenIncreaseKey } from '..';\nexport default function createUseMessage(getRcNotificationInstance, getRCNoticeProps) {\n  var useMessage = function useMessage() {\n    // We can only get content by render\n    var getPrefixCls;\n    var getPopupContainer; // We create a proxy to handle delay created instance\n\n    var innerInstance = null;\n    var proxy = {\n      add: function add(noticeProps, holderCallback) {\n        innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);\n      }\n    };\n\n    var _useRCNotification = useRCNotification(proxy),\n        _useRCNotification2 = _slicedToArray(_useRCNotification, 2),\n        hookNotify = _useRCNotification2[0],\n        holder = _useRCNotification2[1];\n\n    function notify(args) {\n      var customizePrefixCls = args.prefixCls;\n      var mergedPrefixCls = getPrefixCls('message', customizePrefixCls);\n      var rootPrefixCls = getPrefixCls();\n      var target = args.key || getKeyThenIncreaseKey();\n      var closePromise = new Promise(function (resolve) {\n        var callback = function callback() {\n          if (typeof args.onClose === 'function') {\n            args.onClose();\n          }\n\n          return resolve(true);\n        };\n\n        getRcNotificationInstance(_extends(_extends({}, args), {\n          prefixCls: mergedPrefixCls,\n          rootPrefixCls: rootPrefixCls,\n          getPopupContainer: getPopupContainer\n        }), function (_ref) {\n          var prefixCls = _ref.prefixCls,\n              instance = _ref.instance;\n          innerInstance = instance;\n          hookNotify(getRCNoticeProps(_extends(_extends({}, args), {\n            key: target,\n            onClose: callback\n          }), prefixCls));\n        });\n      });\n\n      var result = function result() {\n        if (innerInstance) {\n          innerInstance.removeNotice(target);\n        }\n      };\n\n      result.then = function (filled, rejected) {\n        return closePromise.then(filled, rejected);\n      };\n\n      result.promise = closePromise;\n      return result;\n    } // Fill functions\n\n\n    var hookApiRef = React.useRef({});\n    hookApiRef.current.open = notify;\n    ['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {\n      return attachTypeApi(hookApiRef.current, type);\n    });\n    return [hookApiRef.current, /*#__PURE__*/React.createElement(ConfigConsumer, {\n      key: \"holder\"\n    }, function (context) {\n      getPrefixCls = context.getPrefixCls;\n      getPopupContainer = context.getPopupContainer;\n      return holder;\n    })];\n  };\n\n  return useMessage;\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/antd/es/message/hooks/useMessage.js"],"names":["_extends","_slicedToArray","React","useRCNotification","ConfigConsumer","attachTypeApi","getKeyThenIncreaseKey","createUseMessage","getRcNotificationInstance","getRCNoticeProps","useMessage","getPrefixCls","getPopupContainer","innerInstance","proxy","add","noticeProps","holderCallback","component","_useRCNotification","_useRCNotification2","hookNotify","holder","notify","args","customizePrefixCls","prefixCls","mergedPrefixCls","rootPrefixCls","target","key","closePromise","Promise","resolve","callback","onClose","_ref","instance","result","removeNotice","then","filled","rejected","promise","hookApiRef","useRef","current","open","forEach","type","createElement","context"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useRCNotification from \"rc-notification/es/useNotification\";\nimport { ConfigConsumer } from '../../config-provider';\nimport { attachTypeApi, getKeyThenIncreaseKey } from '..';\nexport default function createUseMessage(getRcNotificationInstance, getRCNoticeProps) {\n  var useMessage = function useMessage() {\n    // We can only get content by render\n    var getPrefixCls;\n    var getPopupContainer; // We create a proxy to handle delay created instance\n\n    var innerInstance = null;\n    var proxy = {\n      add: function add(noticeProps, holderCallback) {\n        innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);\n      }\n    };\n\n    var _useRCNotification = useRCNotification(proxy),\n        _useRCNotification2 = _slicedToArray(_useRCNotification, 2),\n        hookNotify = _useRCNotification2[0],\n        holder = _useRCNotification2[1];\n\n    function notify(args) {\n      var customizePrefixCls = args.prefixCls;\n      var mergedPrefixCls = getPrefixCls('message', customizePrefixCls);\n      var rootPrefixCls = getPrefixCls();\n      var target = args.key || getKeyThenIncreaseKey();\n      var closePromise = new Promise(function (resolve) {\n        var callback = function callback() {\n          if (typeof args.onClose === 'function') {\n            args.onClose();\n          }\n\n          return resolve(true);\n        };\n\n        getRcNotificationInstance(_extends(_extends({}, args), {\n          prefixCls: mergedPrefixCls,\n          rootPrefixCls: rootPrefixCls,\n          getPopupContainer: getPopupContainer\n        }), function (_ref) {\n          var prefixCls = _ref.prefixCls,\n              instance = _ref.instance;\n          innerInstance = instance;\n          hookNotify(getRCNoticeProps(_extends(_extends({}, args), {\n            key: target,\n            onClose: callback\n          }), prefixCls));\n        });\n      });\n\n      var result = function result() {\n        if (innerInstance) {\n          innerInstance.removeNotice(target);\n        }\n      };\n\n      result.then = function (filled, rejected) {\n        return closePromise.then(filled, rejected);\n      };\n\n      result.promise = closePromise;\n      return result;\n    } // Fill functions\n\n\n    var hookApiRef = React.useRef({});\n    hookApiRef.current.open = notify;\n    ['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {\n      return attachTypeApi(hookApiRef.current, type);\n    });\n    return [hookApiRef.current, /*#__PURE__*/React.createElement(ConfigConsumer, {\n      key: \"holder\"\n    }, function (context) {\n      getPrefixCls = context.getPrefixCls;\n      getPopupContainer = context.getPopupContainer;\n      return holder;\n    })];\n  };\n\n  return useMessage;\n}"]},"metadata":{},"sourceType":"module"}