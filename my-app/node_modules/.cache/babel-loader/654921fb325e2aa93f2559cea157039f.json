{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport { useBaseProps } from 'rc-select';\nimport Tree from 'rc-tree';\nimport LegacyContext from './LegacyContext';\nimport TreeSelectContext from './TreeSelectContext';\nimport { getAllKeys, isCheckDisabled } from './utils/valueUtil';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(_, ref) {\n  var _useBaseProps = useBaseProps(),\n      prefixCls = _useBaseProps.prefixCls,\n      multiple = _useBaseProps.multiple,\n      searchValue = _useBaseProps.searchValue,\n      toggleOpen = _useBaseProps.toggleOpen,\n      open = _useBaseProps.open,\n      notFoundContent = _useBaseProps.notFoundContent;\n\n  var _React$useContext = React.useContext(TreeSelectContext),\n      virtual = _React$useContext.virtual,\n      listHeight = _React$useContext.listHeight,\n      listItemHeight = _React$useContext.listItemHeight,\n      treeData = _React$useContext.treeData,\n      fieldNames = _React$useContext.fieldNames,\n      onSelect = _React$useContext.onSelect;\n\n  var _React$useContext2 = React.useContext(LegacyContext),\n      checkable = _React$useContext2.checkable,\n      checkedKeys = _React$useContext2.checkedKeys,\n      halfCheckedKeys = _React$useContext2.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext2.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext2.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext2.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext2.onTreeExpand,\n      treeIcon = _React$useContext2.treeIcon,\n      showTreeIcon = _React$useContext2.showTreeIcon,\n      switcherIcon = _React$useContext2.switcherIcon,\n      treeLine = _React$useContext2.treeLine,\n      treeNodeFilterProp = _React$useContext2.treeNodeFilterProp,\n      loadData = _React$useContext2.loadData,\n      treeLoadedKeys = _React$useContext2.treeLoadedKeys,\n      treeMotion = _React$useContext2.treeMotion,\n      onTreeLoad = _React$useContext2.onTreeLoad,\n      keyEntities = _React$useContext2.keyEntities;\n\n  var treeRef = React.useRef();\n  var memoTreeData = useMemo(function () {\n    return treeData;\n  }, [open, treeData], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  }); // ========================== Values ==========================\n\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: checkedKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [checkable, checkedKeys, halfCheckedKeys]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && checkedKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: checkedKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, treeExpandedKeys, searchValue]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(getAllKeys(treeData, fieldNames));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(__, info) {\n    var node = info.node;\n\n    if (checkable && isCheckDisabled(node)) {\n      return;\n    }\n\n    onSelect(node.key, {\n      selected: !checkedKeys.includes(node.key)\n    });\n\n    if (!multiple) {\n      toggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = keyEntities[activeKey];\n  React.useImperativeHandle(ref, function () {\n    var _treeRef$current2;\n\n    return {\n      scrollTo: (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current3;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current3 = treeRef.current) === null || _treeRef$current3 === void 0 ? void 0 : _treeRef$current3.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity) {\n                var _ref = (activeEntity === null || activeEntity === void 0 ? void 0 : activeEntity.node) || {},\n                    selectable = _ref.selectable,\n                    value = _ref.value;\n\n                if (selectable !== false) {\n                  onInternalSelect(null, {\n                    node: {\n                      key: activeKey\n                    },\n                    selected: !checkedKeys.includes(value)\n                  });\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              toggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoTreeData.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {\n    fieldNames: fieldNames\n  };\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && /*#__PURE__*/React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.node.value), /*#__PURE__*/React.createElement(Tree, _extends({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoTreeData,\n    height: listHeight,\n    itemHeight: listItemHeight,\n    virtual: virtual,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    activeKey: activeKey // We handle keys by out instead tree self\n    ,\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? checkedKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-tree-select/es/OptionList.js"],"names":["_extends","_toConsumableArray","_slicedToArray","React","KeyCode","useMemo","useBaseProps","Tree","LegacyContext","TreeSelectContext","getAllKeys","isCheckDisabled","HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","OptionList","_","ref","_useBaseProps","prefixCls","multiple","searchValue","toggleOpen","open","notFoundContent","_React$useContext","useContext","virtual","listHeight","listItemHeight","treeData","fieldNames","onSelect","_React$useContext2","checkable","checkedKeys","halfCheckedKeys","treeExpandedKeys","treeDefaultExpandAll","treeDefaultExpandedKeys","onTreeExpand","treeIcon","showTreeIcon","switcherIcon","treeLine","treeNodeFilterProp","loadData","treeLoadedKeys","treeMotion","onTreeLoad","keyEntities","treeRef","useRef","memoTreeData","prev","next","mergedCheckedKeys","checked","halfChecked","useEffect","length","_treeRef$current","current","scrollTo","key","lowerSearchValue","String","toLowerCase","filterTreeNode","treeNode","includes","_React$useState","useState","_React$useState2","expandedKeys","setExpandedKeys","_React$useState3","_React$useState4","searchExpandedKeys","setSearchExpandedKeys","mergedExpandedKeys","onInternalExpand","keys","onListMouseDown","event","preventDefault","onInternalSelect","__","info","node","selected","_React$useState5","_React$useState6","activeKey","setActiveKey","activeEntity","useImperativeHandle","_treeRef$current2","onKeyDown","_treeRef$current3","which","UP","DOWN","LEFT","RIGHT","ENTER","_ref","selectable","value","ESC","onKeyUp","createElement","role","className","concat","onMouseDown","treeProps","loadedKeys","style","focusable","itemHeight","icon","showIcon","showLine","motion","checkStrictly","selectedKeys","defaultExpandAll","onActiveChange","onCheck","onExpand","onLoad","RefOptionList","forwardRef","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport { useBaseProps } from 'rc-select';\nimport Tree from 'rc-tree';\nimport LegacyContext from './LegacyContext';\nimport TreeSelectContext from './TreeSelectContext';\nimport { getAllKeys, isCheckDisabled } from './utils/valueUtil';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(_, ref) {\n  var _useBaseProps = useBaseProps(),\n      prefixCls = _useBaseProps.prefixCls,\n      multiple = _useBaseProps.multiple,\n      searchValue = _useBaseProps.searchValue,\n      toggleOpen = _useBaseProps.toggleOpen,\n      open = _useBaseProps.open,\n      notFoundContent = _useBaseProps.notFoundContent;\n\n  var _React$useContext = React.useContext(TreeSelectContext),\n      virtual = _React$useContext.virtual,\n      listHeight = _React$useContext.listHeight,\n      listItemHeight = _React$useContext.listItemHeight,\n      treeData = _React$useContext.treeData,\n      fieldNames = _React$useContext.fieldNames,\n      onSelect = _React$useContext.onSelect;\n\n  var _React$useContext2 = React.useContext(LegacyContext),\n      checkable = _React$useContext2.checkable,\n      checkedKeys = _React$useContext2.checkedKeys,\n      halfCheckedKeys = _React$useContext2.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext2.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext2.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext2.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext2.onTreeExpand,\n      treeIcon = _React$useContext2.treeIcon,\n      showTreeIcon = _React$useContext2.showTreeIcon,\n      switcherIcon = _React$useContext2.switcherIcon,\n      treeLine = _React$useContext2.treeLine,\n      treeNodeFilterProp = _React$useContext2.treeNodeFilterProp,\n      loadData = _React$useContext2.loadData,\n      treeLoadedKeys = _React$useContext2.treeLoadedKeys,\n      treeMotion = _React$useContext2.treeMotion,\n      onTreeLoad = _React$useContext2.onTreeLoad,\n      keyEntities = _React$useContext2.keyEntities;\n\n  var treeRef = React.useRef();\n  var memoTreeData = useMemo(function () {\n    return treeData;\n  }, [open, treeData], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  }); // ========================== Values ==========================\n\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: checkedKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [checkable, checkedKeys, halfCheckedKeys]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && checkedKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: checkedKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, treeExpandedKeys, searchValue]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(getAllKeys(treeData, fieldNames));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(__, info) {\n    var node = info.node;\n\n    if (checkable && isCheckDisabled(node)) {\n      return;\n    }\n\n    onSelect(node.key, {\n      selected: !checkedKeys.includes(node.key)\n    });\n\n    if (!multiple) {\n      toggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = keyEntities[activeKey];\n  React.useImperativeHandle(ref, function () {\n    var _treeRef$current2;\n\n    return {\n      scrollTo: (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current3;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current3 = treeRef.current) === null || _treeRef$current3 === void 0 ? void 0 : _treeRef$current3.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity) {\n                var _ref = (activeEntity === null || activeEntity === void 0 ? void 0 : activeEntity.node) || {},\n                    selectable = _ref.selectable,\n                    value = _ref.value;\n\n                if (selectable !== false) {\n                  onInternalSelect(null, {\n                    node: {\n                      key: activeKey\n                    },\n                    selected: !checkedKeys.includes(value)\n                  });\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              toggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoTreeData.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {\n    fieldNames: fieldNames\n  };\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && /*#__PURE__*/React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.node.value), /*#__PURE__*/React.createElement(Tree, _extends({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoTreeData,\n    height: listHeight,\n    itemHeight: listItemHeight,\n    virtual: virtual,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    activeKey: activeKey // We handle keys by out instead tree self\n    ,\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? checkedKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;"]},"metadata":{},"sourceType":"module"}