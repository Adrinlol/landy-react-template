{"ast":null,"code":"export function formatStrategyValues(pathKeys, getKeyPathEntities) {\n  var valueSet = new Set(pathKeys);\n  var keyPathEntities = getKeyPathEntities();\n  return pathKeys.filter(function (key) {\n    var entity = keyPathEntities[key];\n    var parent = entity ? entity.parent : null;\n\n    if (parent && !parent.node.disabled && valueSet.has(parent.key)) {\n      return false;\n    }\n\n    return true;\n  });\n}\nexport function toPathOptions(valueCells, options, fieldNames) {\n  var stringMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var currentList = options;\n  var valueOptions = [];\n\n  var _loop = function _loop(i) {\n    var _currentList, _currentList2, _foundOption$fieldNam;\n\n    var valueCell = valueCells[i];\n    var foundIndex = (_currentList = currentList) === null || _currentList === void 0 ? void 0 : _currentList.findIndex(function (option) {\n      var val = option[fieldNames.value];\n      return stringMode ? String(val) === String(valueCell) : val === valueCell;\n    });\n    var foundOption = foundIndex !== -1 ? (_currentList2 = currentList) === null || _currentList2 === void 0 ? void 0 : _currentList2[foundIndex] : null;\n    valueOptions.push({\n      value: (_foundOption$fieldNam = foundOption === null || foundOption === void 0 ? void 0 : foundOption[fieldNames.value]) !== null && _foundOption$fieldNam !== void 0 ? _foundOption$fieldNam : valueCell,\n      index: foundIndex,\n      option: foundOption\n    });\n    currentList = foundOption === null || foundOption === void 0 ? void 0 : foundOption[fieldNames.children];\n  };\n\n  for (var i = 0; i < valueCells.length; i += 1) {\n    _loop(i);\n  }\n\n  return valueOptions;\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-cascader/es/utils/treeUtil.js"],"names":["formatStrategyValues","pathKeys","getKeyPathEntities","valueSet","Set","keyPathEntities","filter","key","entity","parent","node","disabled","has","toPathOptions","valueCells","options","fieldNames","stringMode","arguments","length","undefined","currentList","valueOptions","_loop","i","_currentList","_currentList2","_foundOption$fieldNam","valueCell","foundIndex","findIndex","option","val","value","String","foundOption","push","index","children"],"mappings":"AAAA,OAAO,SAASA,oBAAT,CAA8BC,QAA9B,EAAwCC,kBAAxC,EAA4D;AACjE,MAAIC,QAAQ,GAAG,IAAIC,GAAJ,CAAQH,QAAR,CAAf;AACA,MAAII,eAAe,GAAGH,kBAAkB,EAAxC;AACA,SAAOD,QAAQ,CAACK,MAAT,CAAgB,UAAUC,GAAV,EAAe;AACpC,QAAIC,MAAM,GAAGH,eAAe,CAACE,GAAD,CAA5B;AACA,QAAIE,MAAM,GAAGD,MAAM,GAAGA,MAAM,CAACC,MAAV,GAAmB,IAAtC;;AAEA,QAAIA,MAAM,IAAI,CAACA,MAAM,CAACC,IAAP,CAAYC,QAAvB,IAAmCR,QAAQ,CAACS,GAAT,CAAaH,MAAM,CAACF,GAApB,CAAvC,EAAiE;AAC/D,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GATM,CAAP;AAUD;AACD,OAAO,SAASM,aAAT,CAAuBC,UAAvB,EAAmCC,OAAnC,EAA4CC,UAA5C,EAAwD;AAC7D,MAAIC,UAAU,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAArF;AACA,MAAIG,WAAW,GAAGN,OAAlB;AACA,MAAIO,YAAY,GAAG,EAAnB;;AAEA,MAAIC,KAAK,GAAG,SAASA,KAAT,CAAeC,CAAf,EAAkB;AAC5B,QAAIC,YAAJ,EAAkBC,aAAlB,EAAiCC,qBAAjC;;AAEA,QAAIC,SAAS,GAAGd,UAAU,CAACU,CAAD,CAA1B;AACA,QAAIK,UAAU,GAAG,CAACJ,YAAY,GAAGJ,WAAhB,MAAiC,IAAjC,IAAyCI,YAAY,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,YAAY,CAACK,SAAb,CAAuB,UAAUC,MAAV,EAAkB;AACpI,UAAIC,GAAG,GAAGD,MAAM,CAACf,UAAU,CAACiB,KAAZ,CAAhB;AACA,aAAOhB,UAAU,GAAGiB,MAAM,CAACF,GAAD,CAAN,KAAgBE,MAAM,CAACN,SAAD,CAAzB,GAAuCI,GAAG,KAAKJ,SAAhE;AACD,KAH4F,CAA7F;AAIA,QAAIO,WAAW,GAAGN,UAAU,KAAK,CAAC,CAAhB,GAAoB,CAACH,aAAa,GAAGL,WAAjB,MAAkC,IAAlC,IAA0CK,aAAa,KAAK,KAAK,CAAjE,GAAqE,KAAK,CAA1E,GAA8EA,aAAa,CAACG,UAAD,CAA/G,GAA8H,IAAhJ;AACAP,IAAAA,YAAY,CAACc,IAAb,CAAkB;AAChBH,MAAAA,KAAK,EAAE,CAACN,qBAAqB,GAAGQ,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACnB,UAAU,CAACiB,KAAZ,CAA9F,MAAsH,IAAtH,IAA8HN,qBAAqB,KAAK,KAAK,CAA7J,GAAiKA,qBAAjK,GAAyLC,SADhL;AAEhBS,MAAAA,KAAK,EAAER,UAFS;AAGhBE,MAAAA,MAAM,EAAEI;AAHQ,KAAlB;AAKAd,IAAAA,WAAW,GAAGc,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACnB,UAAU,CAACsB,QAAZ,CAAnF;AACD,GAfD;;AAiBA,OAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAAU,CAACK,MAA/B,EAAuCK,CAAC,IAAI,CAA5C,EAA+C;AAC7CD,IAAAA,KAAK,CAACC,CAAD,CAAL;AACD;;AAED,SAAOF,YAAP;AACD","sourcesContent":["export function formatStrategyValues(pathKeys, getKeyPathEntities) {\n  var valueSet = new Set(pathKeys);\n  var keyPathEntities = getKeyPathEntities();\n  return pathKeys.filter(function (key) {\n    var entity = keyPathEntities[key];\n    var parent = entity ? entity.parent : null;\n\n    if (parent && !parent.node.disabled && valueSet.has(parent.key)) {\n      return false;\n    }\n\n    return true;\n  });\n}\nexport function toPathOptions(valueCells, options, fieldNames) {\n  var stringMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var currentList = options;\n  var valueOptions = [];\n\n  var _loop = function _loop(i) {\n    var _currentList, _currentList2, _foundOption$fieldNam;\n\n    var valueCell = valueCells[i];\n    var foundIndex = (_currentList = currentList) === null || _currentList === void 0 ? void 0 : _currentList.findIndex(function (option) {\n      var val = option[fieldNames.value];\n      return stringMode ? String(val) === String(valueCell) : val === valueCell;\n    });\n    var foundOption = foundIndex !== -1 ? (_currentList2 = currentList) === null || _currentList2 === void 0 ? void 0 : _currentList2[foundIndex] : null;\n    valueOptions.push({\n      value: (_foundOption$fieldNam = foundOption === null || foundOption === void 0 ? void 0 : foundOption[fieldNames.value]) !== null && _foundOption$fieldNam !== void 0 ? _foundOption$fieldNam : valueCell,\n      index: foundIndex,\n      option: foundOption\n    });\n    currentList = foundOption === null || foundOption === void 0 ? void 0 : foundOption[fieldNames.children];\n  };\n\n  for (var i = 0; i < valueCells.length; i += 1) {\n    _loop(i);\n  }\n\n  return valueOptions;\n}"]},"metadata":{},"sourceType":"module"}