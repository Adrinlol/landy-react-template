{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"fixed\"];\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { INTERNAL_COL_DEFINE } from '../utils/legacyUtil';\nimport { EXPAND_COLUMN } from '../constant';\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return /*#__PURE__*/React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n        props = _ref.props;\n\n    var nodeChildren = props.children,\n        restProps = _objectWithoutProperties(props, _excluded);\n\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n\n    return column;\n  });\n}\n\nfunction flatColumns(columns) {\n  return columns.reduce(function (list, column) {\n    var fixed = column.fixed; // Convert `fixed='true'` to `fixed='left'` instead\n\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var subColumns = column.children;\n\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({}, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\n\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n\n  var allFixRight = true;\n\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\n\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n        restProps = _objectWithoutProperties(column, _excluded2); // Convert `fixed='left'` to `fixed='right'` instead\n\n\n    var parsedFixed = fixed;\n\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n/**\n * Parse `columns` & `children` into `columns`.\n */\n\n\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n      columns = _ref2.columns,\n      children = _ref2.children,\n      expandable = _ref2.expandable,\n      expandedKeys = _ref2.expandedKeys,\n      getRowKey = _ref2.getRowKey,\n      onTriggerExpand = _ref2.onTriggerExpand,\n      expandIcon = _ref2.expandIcon,\n      rowExpandable = _ref2.rowExpandable,\n      expandIconColumnIndex = _ref2.expandIconColumnIndex,\n      direction = _ref2.direction,\n      expandRowByClick = _ref2.expandRowByClick,\n      columnWidth = _ref2.columnWidth,\n      fixed = _ref2.fixed;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]); // ========================== Expand ==========================\n\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n\n      var cloneColumns = baseColumns.slice(); // >>> Warning if use `expandIconColumnIndex`\n\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      } // >>> Insert expand column if not exist\n\n\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        var expandColIndex = expandIconColumnIndex || 0;\n\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      } // >>> Deduplicate additional expand column\n\n\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(function (c) {\n        return c === EXPAND_COLUMN;\n      }).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n\n      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter(function (column, index) {\n        return column !== EXPAND_COLUMN || index === expandColumnIndex;\n      }); // >>> Check if expand column need to fixed\n\n      var prevColumn = baseColumns[expandColumnIndex];\n      var fixedColumn;\n\n      if ((fixed === 'left' || fixed) && !expandIconColumnIndex) {\n        fixedColumn = 'left';\n      } else if ((fixed === 'right' || fixed) && expandIconColumnIndex === baseColumns.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      } // >>> Create expandable column\n\n\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\"),\n        columnType: 'EXPAND_COLUMN'\n      }), _defineProperty(_expandColumn, \"title\", ''), _defineProperty(_expandColumn, \"fixed\", fixedColumn), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"width\", columnWidth), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n\n        if (expandRowByClick) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n\n        return icon;\n      }), _expandColumn);\n      return cloneColumns.map(function (col) {\n        return col === EXPAND_COLUMN ? expandColumn : col;\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production' && baseColumns.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n\n    return baseColumns.filter(function (col) {\n      return col !== EXPAND_COLUMN;\n    });\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]); // ========================= Transform ========================\n\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    } // Always provides at least one column for table display\n\n\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]); // ========================== Flatten =========================\n\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction]); // Only check out of production since it's waste for each render\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(flattenColumns);\n  }\n\n  return [mergedColumns, flattenColumns];\n}\n\nexport default useColumns;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-table/es/hooks/useColumns.js"],"names":["_defineProperty","_toConsumableArray","_objectSpread","_objectWithoutProperties","_excluded","_excluded2","React","warning","toArray","INTERNAL_COL_DEFINE","EXPAND_COLUMN","convertChildrenToColumns","children","filter","node","isValidElement","map","_ref","key","props","nodeChildren","restProps","column","flatColumns","columns","reduce","list","fixed","parsedFixed","subColumns","length","concat","subColum","warningFixed","flattenColumns","allFixLeft","i","col","allFixRight","_i","_col","revertForRtl","useColumns","_ref2","transformColumns","prefixCls","expandable","expandedKeys","getRowKey","onTriggerExpand","expandIcon","rowExpandable","expandIconColumnIndex","direction","expandRowByClick","columnWidth","baseColumns","useMemo","withExpandColumns","_expandColumn","cloneColumns","slice","process","env","NODE_ENV","includes","expandColIndex","splice","c","expandColumnIndex","indexOf","index","prevColumn","fixedColumn","expandColumn","className","columnType","render","_","record","rowKey","expanded","has","recordExpandable","icon","onExpand","createElement","onClick","e","stopPropagation","mergedColumns","finalColumns"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"fixed\"];\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { INTERNAL_COL_DEFINE } from '../utils/legacyUtil';\nimport { EXPAND_COLUMN } from '../constant';\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return /*#__PURE__*/React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n        props = _ref.props;\n\n    var nodeChildren = props.children,\n        restProps = _objectWithoutProperties(props, _excluded);\n\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n\n    return column;\n  });\n}\n\nfunction flatColumns(columns) {\n  return columns.reduce(function (list, column) {\n    var fixed = column.fixed; // Convert `fixed='true'` to `fixed='left'` instead\n\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var subColumns = column.children;\n\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({}, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\n\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n\n  var allFixRight = true;\n\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\n\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n        restProps = _objectWithoutProperties(column, _excluded2); // Convert `fixed='left'` to `fixed='right'` instead\n\n\n    var parsedFixed = fixed;\n\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n/**\n * Parse `columns` & `children` into `columns`.\n */\n\n\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n      columns = _ref2.columns,\n      children = _ref2.children,\n      expandable = _ref2.expandable,\n      expandedKeys = _ref2.expandedKeys,\n      getRowKey = _ref2.getRowKey,\n      onTriggerExpand = _ref2.onTriggerExpand,\n      expandIcon = _ref2.expandIcon,\n      rowExpandable = _ref2.rowExpandable,\n      expandIconColumnIndex = _ref2.expandIconColumnIndex,\n      direction = _ref2.direction,\n      expandRowByClick = _ref2.expandRowByClick,\n      columnWidth = _ref2.columnWidth,\n      fixed = _ref2.fixed;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]); // ========================== Expand ==========================\n\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n\n      var cloneColumns = baseColumns.slice(); // >>> Warning if use `expandIconColumnIndex`\n\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      } // >>> Insert expand column if not exist\n\n\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        var expandColIndex = expandIconColumnIndex || 0;\n\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      } // >>> Deduplicate additional expand column\n\n\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(function (c) {\n        return c === EXPAND_COLUMN;\n      }).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n\n      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter(function (column, index) {\n        return column !== EXPAND_COLUMN || index === expandColumnIndex;\n      }); // >>> Check if expand column need to fixed\n\n      var prevColumn = baseColumns[expandColumnIndex];\n      var fixedColumn;\n\n      if ((fixed === 'left' || fixed) && !expandIconColumnIndex) {\n        fixedColumn = 'left';\n      } else if ((fixed === 'right' || fixed) && expandIconColumnIndex === baseColumns.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      } // >>> Create expandable column\n\n\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\"),\n        columnType: 'EXPAND_COLUMN'\n      }), _defineProperty(_expandColumn, \"title\", ''), _defineProperty(_expandColumn, \"fixed\", fixedColumn), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"width\", columnWidth), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n\n        if (expandRowByClick) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n\n        return icon;\n      }), _expandColumn);\n      return cloneColumns.map(function (col) {\n        return col === EXPAND_COLUMN ? expandColumn : col;\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production' && baseColumns.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n\n    return baseColumns.filter(function (col) {\n      return col !== EXPAND_COLUMN;\n    });\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]); // ========================= Transform ========================\n\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    } // Always provides at least one column for table display\n\n\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]); // ========================== Flatten =========================\n\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction]); // Only check out of production since it's waste for each render\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(flattenColumns);\n  }\n\n  return [mergedColumns, flattenColumns];\n}\n\nexport default useColumns;"]},"metadata":{},"sourceType":"module"}