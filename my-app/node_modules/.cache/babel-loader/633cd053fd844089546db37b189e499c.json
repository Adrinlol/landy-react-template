{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport isVisible from './isVisible';\n\nfunction focusable(node) {\n  var includePositive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (isVisible(node)) {\n    var nodeName = node.nodeName.toLowerCase();\n    var isFocusableElement = // Focusable element\n    ['input', 'select', 'textarea', 'button'].includes(nodeName) || // Editable element\n    node.isContentEditable || // Anchor with href element\n    nodeName === 'a' && !!node.getAttribute('href'); // Get tabIndex\n\n    var tabIndexAttr = node.getAttribute('tabindex');\n    var tabIndexNum = Number(tabIndexAttr); // Parse as number if validate\n\n    var tabIndex = null;\n\n    if (tabIndexAttr && !Number.isNaN(tabIndexNum)) {\n      tabIndex = tabIndexNum;\n    } else if (isFocusableElement && tabIndex === null) {\n      tabIndex = 0;\n    } // Block focusable if disabled\n\n\n    if (isFocusableElement && node.disabled) {\n      tabIndex = null;\n    }\n\n    return tabIndex !== null && (tabIndex >= 0 || includePositive && tabIndex < 0);\n  }\n\n  return false;\n}\n\nexport function getFocusNodeList(node) {\n  var includePositive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var res = _toConsumableArray(node.querySelectorAll('*')).filter(function (child) {\n    return focusable(child, includePositive);\n  });\n\n  if (focusable(node, includePositive)) {\n    res.unshift(node);\n  }\n\n  return res;\n}\nvar lastFocusElement = null;\n/** @deprecated Do not use since this may failed when used in async */\n\nexport function saveLastFocusNode() {\n  lastFocusElement = document.activeElement;\n}\n/** @deprecated Do not use since this may failed when used in async */\n\nexport function clearLastFocusNode() {\n  lastFocusElement = null;\n}\n/** @deprecated Do not use since this may failed when used in async */\n\nexport function backLastFocusNode() {\n  if (lastFocusElement) {\n    try {\n      // 元素可能已经被移动了\n      lastFocusElement.focus();\n      /* eslint-disable no-empty */\n    } catch (e) {// empty\n    }\n    /* eslint-enable no-empty */\n\n  }\n}\nexport function limitTabRange(node, e) {\n  if (e.keyCode === 9) {\n    var tabNodeList = getFocusNodeList(node);\n    var lastTabNode = tabNodeList[e.shiftKey ? 0 : tabNodeList.length - 1];\n    var leavingTab = lastTabNode === document.activeElement || node === document.activeElement;\n\n    if (leavingTab) {\n      var target = tabNodeList[e.shiftKey ? tabNodeList.length - 1 : 0];\n      target.focus();\n      e.preventDefault();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-util/es/Dom/focus.js"],"names":["_toConsumableArray","isVisible","focusable","node","includePositive","arguments","length","undefined","nodeName","toLowerCase","isFocusableElement","includes","isContentEditable","getAttribute","tabIndexAttr","tabIndexNum","Number","tabIndex","isNaN","disabled","getFocusNodeList","res","querySelectorAll","filter","child","unshift","lastFocusElement","saveLastFocusNode","document","activeElement","clearLastFocusNode","backLastFocusNode","focus","e","limitTabRange","keyCode","tabNodeList","lastTabNode","shiftKey","leavingTab","target","preventDefault"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport isVisible from './isVisible';\n\nfunction focusable(node) {\n  var includePositive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (isVisible(node)) {\n    var nodeName = node.nodeName.toLowerCase();\n    var isFocusableElement = // Focusable element\n    ['input', 'select', 'textarea', 'button'].includes(nodeName) || // Editable element\n    node.isContentEditable || // Anchor with href element\n    nodeName === 'a' && !!node.getAttribute('href'); // Get tabIndex\n\n    var tabIndexAttr = node.getAttribute('tabindex');\n    var tabIndexNum = Number(tabIndexAttr); // Parse as number if validate\n\n    var tabIndex = null;\n\n    if (tabIndexAttr && !Number.isNaN(tabIndexNum)) {\n      tabIndex = tabIndexNum;\n    } else if (isFocusableElement && tabIndex === null) {\n      tabIndex = 0;\n    } // Block focusable if disabled\n\n\n    if (isFocusableElement && node.disabled) {\n      tabIndex = null;\n    }\n\n    return tabIndex !== null && (tabIndex >= 0 || includePositive && tabIndex < 0);\n  }\n\n  return false;\n}\n\nexport function getFocusNodeList(node) {\n  var includePositive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var res = _toConsumableArray(node.querySelectorAll('*')).filter(function (child) {\n    return focusable(child, includePositive);\n  });\n\n  if (focusable(node, includePositive)) {\n    res.unshift(node);\n  }\n\n  return res;\n}\nvar lastFocusElement = null;\n/** @deprecated Do not use since this may failed when used in async */\n\nexport function saveLastFocusNode() {\n  lastFocusElement = document.activeElement;\n}\n/** @deprecated Do not use since this may failed when used in async */\n\nexport function clearLastFocusNode() {\n  lastFocusElement = null;\n}\n/** @deprecated Do not use since this may failed when used in async */\n\nexport function backLastFocusNode() {\n  if (lastFocusElement) {\n    try {\n      // 元素可能已经被移动了\n      lastFocusElement.focus();\n      /* eslint-disable no-empty */\n    } catch (e) {// empty\n    }\n    /* eslint-enable no-empty */\n\n  }\n}\nexport function limitTabRange(node, e) {\n  if (e.keyCode === 9) {\n    var tabNodeList = getFocusNodeList(node);\n    var lastTabNode = tabNodeList[e.shiftKey ? 0 : tabNodeList.length - 1];\n    var leavingTab = lastTabNode === document.activeElement || node === document.activeElement;\n\n    if (leavingTab) {\n      var target = tabNodeList[e.shiftKey ? tabNodeList.length - 1 : 0];\n      target.focus();\n      e.preventDefault();\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}