{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { toPathOptions } from '../utils/treeUtil';\nimport * as React from 'react';\nimport { toPathKey } from '../utils/commonUtil';\nexport default (function (rawValues, options, fieldNames, multiple, displayRender) {\n  return React.useMemo(function () {\n    var mergedDisplayRender = displayRender || // Default displayRender\n    function (labels) {\n      var mergedLabels = multiple ? labels.slice(-1) : labels;\n      var SPLIT = ' / ';\n\n      if (mergedLabels.every(function (label) {\n        return ['string', 'number'].includes(_typeof(label));\n      })) {\n        return mergedLabels.join(SPLIT);\n      } // If exist non-string value, use ReactNode instead\n\n\n      return mergedLabels.reduce(function (list, label, index) {\n        var keyedLabel = /*#__PURE__*/React.isValidElement(label) ? /*#__PURE__*/React.cloneElement(label, {\n          key: index\n        }) : label;\n\n        if (index === 0) {\n          return [keyedLabel];\n        }\n\n        return [].concat(_toConsumableArray(list), [SPLIT, keyedLabel]);\n      }, []);\n    };\n\n    return rawValues.map(function (valueCells) {\n      var valueOptions = toPathOptions(valueCells, options, fieldNames);\n      var label = mergedDisplayRender(valueOptions.map(function (_ref) {\n        var _option$fieldNames$la;\n\n        var option = _ref.option,\n            value = _ref.value;\n        return (_option$fieldNames$la = option === null || option === void 0 ? void 0 : option[fieldNames.label]) !== null && _option$fieldNames$la !== void 0 ? _option$fieldNames$la : value;\n      }), valueOptions.map(function (_ref2) {\n        var option = _ref2.option;\n        return option;\n      }));\n      return {\n        label: label,\n        value: toPathKey(valueCells),\n        valueCells: valueCells\n      };\n    });\n  }, [rawValues, options, fieldNames, displayRender, multiple]);\n});","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-cascader/es/hooks/useDisplayValues.js"],"names":["_toConsumableArray","_typeof","toPathOptions","React","toPathKey","rawValues","options","fieldNames","multiple","displayRender","useMemo","mergedDisplayRender","labels","mergedLabels","slice","SPLIT","every","label","includes","join","reduce","list","index","keyedLabel","isValidElement","cloneElement","key","concat","map","valueCells","valueOptions","_ref","_option$fieldNames$la","option","value","_ref2"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,gBAAgB,UAAUC,SAAV,EAAqBC,OAArB,EAA8BC,UAA9B,EAA0CC,QAA1C,EAAoDC,aAApD,EAAmE;AACjF,SAAON,KAAK,CAACO,OAAN,CAAc,YAAY;AAC/B,QAAIC,mBAAmB,GAAGF,aAAa,IAAI;AAC3C,cAAUG,MAAV,EAAkB;AAChB,UAAIC,YAAY,GAAGL,QAAQ,GAAGI,MAAM,CAACE,KAAP,CAAa,CAAC,CAAd,CAAH,GAAsBF,MAAjD;AACA,UAAIG,KAAK,GAAG,KAAZ;;AAEA,UAAIF,YAAY,CAACG,KAAb,CAAmB,UAAUC,KAAV,EAAiB;AACtC,eAAO,CAAC,QAAD,EAAW,QAAX,EAAqBC,QAArB,CAA8BjB,OAAO,CAACgB,KAAD,CAArC,CAAP;AACD,OAFG,CAAJ,EAEI;AACF,eAAOJ,YAAY,CAACM,IAAb,CAAkBJ,KAAlB,CAAP;AACD,OARe,CAQd;;;AAGF,aAAOF,YAAY,CAACO,MAAb,CAAoB,UAAUC,IAAV,EAAgBJ,KAAhB,EAAuBK,KAAvB,EAA8B;AACvD,YAAIC,UAAU,GAAG,aAAapB,KAAK,CAACqB,cAAN,CAAqBP,KAArB,IAA8B,aAAad,KAAK,CAACsB,YAAN,CAAmBR,KAAnB,EAA0B;AACjGS,UAAAA,GAAG,EAAEJ;AAD4F,SAA1B,CAA3C,GAEzBL,KAFL;;AAIA,YAAIK,KAAK,KAAK,CAAd,EAAiB;AACf,iBAAO,CAACC,UAAD,CAAP;AACD;;AAED,eAAO,GAAGI,MAAH,CAAU3B,kBAAkB,CAACqB,IAAD,CAA5B,EAAoC,CAACN,KAAD,EAAQQ,UAAR,CAApC,CAAP;AACD,OAVM,EAUJ,EAVI,CAAP;AAWD,KAvBD;;AAyBA,WAAOlB,SAAS,CAACuB,GAAV,CAAc,UAAUC,UAAV,EAAsB;AACzC,UAAIC,YAAY,GAAG5B,aAAa,CAAC2B,UAAD,EAAavB,OAAb,EAAsBC,UAAtB,CAAhC;AACA,UAAIU,KAAK,GAAGN,mBAAmB,CAACmB,YAAY,CAACF,GAAb,CAAiB,UAAUG,IAAV,EAAgB;AAC/D,YAAIC,qBAAJ;;AAEA,YAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB;AAAA,YACIC,KAAK,GAAGH,IAAI,CAACG,KADjB;AAEA,eAAO,CAACF,qBAAqB,GAAGC,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC1B,UAAU,CAACU,KAAZ,CAA/E,MAAuG,IAAvG,IAA+Ge,qBAAqB,KAAK,KAAK,CAA9I,GAAkJA,qBAAlJ,GAA0KE,KAAjL;AACD,OAN+B,CAAD,EAM3BJ,YAAY,CAACF,GAAb,CAAiB,UAAUO,KAAV,EAAiB;AACpC,YAAIF,MAAM,GAAGE,KAAK,CAACF,MAAnB;AACA,eAAOA,MAAP;AACD,OAHG,CAN2B,CAA/B;AAUA,aAAO;AACLhB,QAAAA,KAAK,EAAEA,KADF;AAELiB,QAAAA,KAAK,EAAE9B,SAAS,CAACyB,UAAD,CAFX;AAGLA,QAAAA,UAAU,EAAEA;AAHP,OAAP;AAKD,KAjBM,CAAP;AAkBD,GA5CM,EA4CJ,CAACxB,SAAD,EAAYC,OAAZ,EAAqBC,UAArB,EAAiCE,aAAjC,EAAgDD,QAAhD,CA5CI,CAAP;AA6CD,CA9CD","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { toPathOptions } from '../utils/treeUtil';\nimport * as React from 'react';\nimport { toPathKey } from '../utils/commonUtil';\nexport default (function (rawValues, options, fieldNames, multiple, displayRender) {\n  return React.useMemo(function () {\n    var mergedDisplayRender = displayRender || // Default displayRender\n    function (labels) {\n      var mergedLabels = multiple ? labels.slice(-1) : labels;\n      var SPLIT = ' / ';\n\n      if (mergedLabels.every(function (label) {\n        return ['string', 'number'].includes(_typeof(label));\n      })) {\n        return mergedLabels.join(SPLIT);\n      } // If exist non-string value, use ReactNode instead\n\n\n      return mergedLabels.reduce(function (list, label, index) {\n        var keyedLabel = /*#__PURE__*/React.isValidElement(label) ? /*#__PURE__*/React.cloneElement(label, {\n          key: index\n        }) : label;\n\n        if (index === 0) {\n          return [keyedLabel];\n        }\n\n        return [].concat(_toConsumableArray(list), [SPLIT, keyedLabel]);\n      }, []);\n    };\n\n    return rawValues.map(function (valueCells) {\n      var valueOptions = toPathOptions(valueCells, options, fieldNames);\n      var label = mergedDisplayRender(valueOptions.map(function (_ref) {\n        var _option$fieldNames$la;\n\n        var option = _ref.option,\n            value = _ref.value;\n        return (_option$fieldNames$la = option === null || option === void 0 ? void 0 : option[fieldNames.label]) !== null && _option$fieldNames$la !== void 0 ? _option$fieldNames$la : value;\n      }), valueOptions.map(function (_ref2) {\n        var option = _ref2.option;\n        return option;\n      }));\n      return {\n        label: label,\n        value: toPathKey(valueCells),\n        valueCells: valueCells\n      };\n    });\n  }, [rawValues, options, fieldNames, displayRender, multiple]);\n});"]},"metadata":{},"sourceType":"module"}