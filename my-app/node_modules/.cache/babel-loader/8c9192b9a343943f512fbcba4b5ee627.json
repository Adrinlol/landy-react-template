{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"value\"];\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport TreeNode from '../TreeNode';\nexport function convertChildrenToData(nodes) {\n  return toArray(nodes).map(function (node) {\n    if (! /*#__PURE__*/React.isValidElement(node) || !node.type) {\n      return null;\n    }\n\n    var key = node.key,\n        _node$props = node.props,\n        children = _node$props.children,\n        value = _node$props.value,\n        restProps = _objectWithoutProperties(_node$props, _excluded);\n\n    var data = _objectSpread({\n      key: key,\n      value: value\n    }, restProps);\n\n    var childData = convertChildrenToData(children);\n\n    if (childData.length) {\n      data.children = childData;\n    }\n\n    return data;\n  }).filter(function (data) {\n    return data;\n  });\n}\nexport function fillLegacyProps(dataNode) {\n  if (!dataNode) {\n    return dataNode;\n  }\n\n  var cloneNode = _objectSpread({}, dataNode);\n\n  if (!('props' in cloneNode)) {\n    Object.defineProperty(cloneNode, 'props', {\n      get: function get() {\n        warning(false, 'New `rc-tree-select` not support return node instance as argument anymore. Please consider to remove `props` access.');\n        return cloneNode;\n      }\n    });\n  }\n\n  return cloneNode;\n}\nexport function fillAdditionalInfo(extra, triggerValue, checkedValues, treeData, showPosition, fieldNames) {\n  var triggerNode = null;\n  var nodeList = null;\n\n  function generateMap() {\n    function dig(list) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n      var parentIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return list.map(function (option, index) {\n        var pos = \"\".concat(level, \"-\").concat(index);\n        var value = option[fieldNames.value];\n        var included = checkedValues.includes(value);\n        var children = dig(option[fieldNames.children] || [], pos, included);\n        var node = /*#__PURE__*/React.createElement(TreeNode, option, children.map(function (child) {\n          return child.node;\n        })); // Link with trigger node\n\n        if (triggerValue === value) {\n          triggerNode = node;\n        }\n\n        if (included) {\n          var checkedNode = {\n            pos: pos,\n            node: node,\n            children: children\n          };\n\n          if (!parentIncluded) {\n            nodeList.push(checkedNode);\n          }\n\n          return checkedNode;\n        }\n\n        return null;\n      }).filter(function (node) {\n        return node;\n      });\n    }\n\n    if (!nodeList) {\n      nodeList = [];\n      dig(treeData); // Sort to keep the checked node length\n\n      nodeList.sort(function (_ref, _ref2) {\n        var val1 = _ref.node.props.value;\n        var val2 = _ref2.node.props.value;\n        var index1 = checkedValues.indexOf(val1);\n        var index2 = checkedValues.indexOf(val2);\n        return index1 - index2;\n      });\n    }\n  }\n\n  Object.defineProperty(extra, 'triggerNode', {\n    get: function get() {\n      warning(false, '`triggerNode` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n      return triggerNode;\n    }\n  });\n  Object.defineProperty(extra, 'allCheckedNodes', {\n    get: function get() {\n      warning(false, '`allCheckedNodes` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n\n      if (showPosition) {\n        return nodeList;\n      }\n\n      return nodeList.map(function (_ref3) {\n        var node = _ref3.node;\n        return node;\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-tree-select/es/utils/legacyUtil.js"],"names":["_objectSpread","_objectWithoutProperties","_excluded","React","toArray","warning","TreeNode","convertChildrenToData","nodes","map","node","isValidElement","type","key","_node$props","props","children","value","restProps","data","childData","length","filter","fillLegacyProps","dataNode","cloneNode","Object","defineProperty","get","fillAdditionalInfo","extra","triggerValue","checkedValues","treeData","showPosition","fieldNames","triggerNode","nodeList","generateMap","dig","list","level","arguments","undefined","parentIncluded","option","index","pos","concat","included","includes","createElement","child","checkedNode","push","sort","_ref","_ref2","val1","val2","index1","indexOf","index2","_ref3"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"value\"];\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport TreeNode from '../TreeNode';\nexport function convertChildrenToData(nodes) {\n  return toArray(nodes).map(function (node) {\n    if (! /*#__PURE__*/React.isValidElement(node) || !node.type) {\n      return null;\n    }\n\n    var key = node.key,\n        _node$props = node.props,\n        children = _node$props.children,\n        value = _node$props.value,\n        restProps = _objectWithoutProperties(_node$props, _excluded);\n\n    var data = _objectSpread({\n      key: key,\n      value: value\n    }, restProps);\n\n    var childData = convertChildrenToData(children);\n\n    if (childData.length) {\n      data.children = childData;\n    }\n\n    return data;\n  }).filter(function (data) {\n    return data;\n  });\n}\nexport function fillLegacyProps(dataNode) {\n  if (!dataNode) {\n    return dataNode;\n  }\n\n  var cloneNode = _objectSpread({}, dataNode);\n\n  if (!('props' in cloneNode)) {\n    Object.defineProperty(cloneNode, 'props', {\n      get: function get() {\n        warning(false, 'New `rc-tree-select` not support return node instance as argument anymore. Please consider to remove `props` access.');\n        return cloneNode;\n      }\n    });\n  }\n\n  return cloneNode;\n}\nexport function fillAdditionalInfo(extra, triggerValue, checkedValues, treeData, showPosition, fieldNames) {\n  var triggerNode = null;\n  var nodeList = null;\n\n  function generateMap() {\n    function dig(list) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n      var parentIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return list.map(function (option, index) {\n        var pos = \"\".concat(level, \"-\").concat(index);\n        var value = option[fieldNames.value];\n        var included = checkedValues.includes(value);\n        var children = dig(option[fieldNames.children] || [], pos, included);\n        var node = /*#__PURE__*/React.createElement(TreeNode, option, children.map(function (child) {\n          return child.node;\n        })); // Link with trigger node\n\n        if (triggerValue === value) {\n          triggerNode = node;\n        }\n\n        if (included) {\n          var checkedNode = {\n            pos: pos,\n            node: node,\n            children: children\n          };\n\n          if (!parentIncluded) {\n            nodeList.push(checkedNode);\n          }\n\n          return checkedNode;\n        }\n\n        return null;\n      }).filter(function (node) {\n        return node;\n      });\n    }\n\n    if (!nodeList) {\n      nodeList = [];\n      dig(treeData); // Sort to keep the checked node length\n\n      nodeList.sort(function (_ref, _ref2) {\n        var val1 = _ref.node.props.value;\n        var val2 = _ref2.node.props.value;\n        var index1 = checkedValues.indexOf(val1);\n        var index2 = checkedValues.indexOf(val2);\n        return index1 - index2;\n      });\n    }\n  }\n\n  Object.defineProperty(extra, 'triggerNode', {\n    get: function get() {\n      warning(false, '`triggerNode` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n      return triggerNode;\n    }\n  });\n  Object.defineProperty(extra, 'allCheckedNodes', {\n    get: function get() {\n      warning(false, '`allCheckedNodes` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n\n      if (showPosition) {\n        return nodeList;\n      }\n\n      return nodeList.map(function (_ref3) {\n        var node = _ref3.node;\n        return node;\n      });\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}