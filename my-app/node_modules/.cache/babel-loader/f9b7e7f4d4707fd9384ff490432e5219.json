{"ast":null,"code":"function t(t) {\n  return \"object\" == typeof t && null != t && 1 === t.nodeType;\n}\n\nfunction e(t, e) {\n  return (!e || \"hidden\" !== t) && \"visible\" !== t && \"clip\" !== t;\n}\n\nfunction n(t, n) {\n  if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {\n    var r = getComputedStyle(t, null);\n    return e(r.overflowY, n) || e(r.overflowX, n) || function (t) {\n      var e = function (t) {\n        if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;\n\n        try {\n          return t.ownerDocument.defaultView.frameElement;\n        } catch (t) {\n          return null;\n        }\n      }(t);\n\n      return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);\n    }(t);\n  }\n\n  return !1;\n}\n\nfunction r(t, e, n, r, i, o, l, d) {\n  return o < t && l > e || o > t && l < e ? 0 : o <= t && d <= n || l >= e && d >= n ? o - t - r : l > e && d < n || o < t && d > n ? l - e + i : 0;\n}\n\nexport default function (e, i) {\n  var o = window,\n      l = i.scrollMode,\n      d = i.block,\n      u = i.inline,\n      h = i.boundary,\n      a = i.skipOverflowHiddenElements,\n      c = \"function\" == typeof h ? h : function (t) {\n    return t !== h;\n  };\n  if (!t(e)) throw new TypeError(\"Invalid target\");\n\n  for (var f = document.scrollingElement || document.documentElement, s = [], p = e; t(p) && c(p);) {\n    if ((p = p.parentElement) === f) {\n      s.push(p);\n      break;\n    }\n\n    null != p && p === document.body && n(p) && !n(document.documentElement) || null != p && n(p, a) && s.push(p);\n  }\n\n  for (var m = o.visualViewport ? o.visualViewport.width : innerWidth, g = o.visualViewport ? o.visualViewport.height : innerHeight, w = window.scrollX || pageXOffset, v = window.scrollY || pageYOffset, W = e.getBoundingClientRect(), b = W.height, H = W.width, y = W.top, E = W.right, M = W.bottom, V = W.left, x = \"start\" === d || \"nearest\" === d ? y : \"end\" === d ? M : y + b / 2, I = \"center\" === u ? V + H / 2 : \"end\" === u ? E : V, C = [], T = 0; T < s.length; T++) {\n    var k = s[T],\n        B = k.getBoundingClientRect(),\n        D = B.height,\n        O = B.width,\n        R = B.top,\n        X = B.right,\n        Y = B.bottom,\n        L = B.left;\n    if (\"if-needed\" === l && y >= 0 && V >= 0 && M <= g && E <= m && y >= R && M <= Y && V >= L && E <= X) return C;\n    var S = getComputedStyle(k),\n        j = parseInt(S.borderLeftWidth, 10),\n        q = parseInt(S.borderTopWidth, 10),\n        z = parseInt(S.borderRightWidth, 10),\n        A = parseInt(S.borderBottomWidth, 10),\n        F = 0,\n        G = 0,\n        J = \"offsetWidth\" in k ? k.offsetWidth - k.clientWidth - j - z : 0,\n        K = \"offsetHeight\" in k ? k.offsetHeight - k.clientHeight - q - A : 0;\n    if (f === k) F = \"start\" === d ? x : \"end\" === d ? x - g : \"nearest\" === d ? r(v, v + g, g, q, A, v + x, v + x + b, b) : x - g / 2, G = \"start\" === u ? I : \"center\" === u ? I - m / 2 : \"end\" === u ? I - m : r(w, w + m, m, j, z, w + I, w + I + H, H), F = Math.max(0, F + v), G = Math.max(0, G + w);else {\n      F = \"start\" === d ? x - R - q : \"end\" === d ? x - Y + A + K : \"nearest\" === d ? r(R, Y, D, q, A + K, x, x + b, b) : x - (R + D / 2) + K / 2, G = \"start\" === u ? I - L - j : \"center\" === u ? I - (L + O / 2) + J / 2 : \"end\" === u ? I - X + z + J : r(L, X, O, j, z + J, I, I + H, H);\n      var N = k.scrollLeft,\n          P = k.scrollTop;\n      x += P - (F = Math.max(0, Math.min(P + F, k.scrollHeight - D + K))), I += N - (G = Math.max(0, Math.min(N + G, k.scrollWidth - O + J)));\n    }\n    C.push({\n      el: k,\n      top: F,\n      left: G\n    });\n  }\n\n  return C;\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/compute-scroll-into-view/src/index.ts"],"names":["isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","ownerDocument","defaultView","frameElement","e","frame","getFrameElement","clientHeight","scrollHeight","clientWidth","scrollWidth","isScrollable","style","getComputedStyle","overflowY","overflowX","isHiddenByFrame","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","target","options","windowWithViewport","window","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","document","documentElement","frames","cursor","parentElement","push","body","viewportWidth","visualViewport","width","innerWidth","viewportHeight","height","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","targetHeight","targetWidth","top","targetTop","right","targetRight","bottom","targetBottom","left","targetLeft","getBoundingClientRect","targetBlock","targetInline","computations","index","length","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min"],"mappings":"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","sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n// add support for visualViewport object currently implemented in chrome\ninterface visualViewport {\n  height: number\n  width: number\n}\n\ntype ScrollLogicalPosition = 'start' | 'center' | 'end' | 'nearest'\n// This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\ntype ScrollMode = 'always' | 'if-needed'\n// New option that skips auto-scrolling all nodes with overflow: hidden set\n// See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\ntype SkipOverflowHiddenElements = boolean\n\ninterface Options {\n  block?: ScrollLogicalPosition\n  inline?: ScrollLogicalPosition\n  scrollMode?: ScrollMode\n  boundary?: CustomScrollBoundary\n  skipOverflowHiddenElements?: SkipOverflowHiddenElements\n}\n\n// Custom behavior, not in any spec\ntype CustomScrollBoundaryCallback = (parent: Element) => boolean\ntype CustomScrollBoundary = Element | CustomScrollBoundaryCallback | null\ninterface CustomScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nfunction isElement(el: any): el is Element {\n  return typeof el === 'object' && el != null && el.nodeType === 1\n}\n\nfunction canOverflow(\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nfunction getFrameElement(el: Element) {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nfunction isHiddenByFrame(el: Element): boolean {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nfunction isScrollable(el: Element, skipOverflowHiddenElements?: boolean) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nfunction alignNearest(\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nexport default (target: Element, options: Options): CustomScrollAction[] => {\n  //TODO: remove this hack when microbundle will support typescript >= 4.0\n  const windowWithViewport = (window as unknown) as Window & {\n    visualViewport: visualViewport\n  }\n\n  const {\n    scrollMode,\n    block,\n    inline,\n    boundary,\n    skipOverflowHiddenElements,\n  } = options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = cursor.parentElement\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.width\n    : innerWidth\n  const viewportHeight = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.height\n    : innerHeight\n\n  // Newer browsers supports scroll[X|Y], page[X|Y]Offset is\n  const viewportX = window.scrollX || pageXOffset\n  const viewportY = window.scrollY || pageYOffset\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: CustomScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const {\n      height,\n      width,\n      top,\n      right,\n      bottom,\n      left,\n    } = frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          viewportY,\n          viewportY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          viewportY + targetBlock,\n          viewportY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          viewportX,\n          viewportX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          viewportX + targetInline,\n          viewportX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + viewportY)\n      inlineScroll = Math.max(0, inlineScroll + viewportX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll,\n          frame.scrollHeight - height + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll,\n          frame.scrollWidth - width + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"]},"metadata":{},"sourceType":"module"}