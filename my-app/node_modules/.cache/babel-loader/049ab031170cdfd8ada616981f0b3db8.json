{"ast":null,"code":"import * as React from 'react';\nimport { convertChildrenToData } from '../utils/legacyUtil';\n/**\n * Parse `children` to `options` if `options` is not provided.\n * Then flatten the `options`.\n */\n\nexport default function useOptions(options, children, fieldNames) {\n  return React.useMemo(function () {\n    var mergedOptions = options;\n    var childrenAsData = !options;\n\n    if (childrenAsData) {\n      mergedOptions = convertChildrenToData(children);\n    }\n\n    var valueOptions = new Map();\n    var labelOptions = new Map();\n\n    function dig(optionList) {\n      var isChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // for loop to speed up collection speed\n\n      for (var i = 0; i < optionList.length; i += 1) {\n        var option = optionList[i];\n\n        if (!option[fieldNames.options] || isChildren) {\n          valueOptions.set(option[fieldNames.value], option);\n          labelOptions.set(option[fieldNames.label], option);\n        } else {\n          dig(option[fieldNames.options], true);\n        }\n      }\n    }\n\n    dig(mergedOptions);\n    return {\n      options: mergedOptions,\n      valueOptions: valueOptions,\n      labelOptions: labelOptions\n    };\n  }, [options, children, fieldNames]);\n}","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-select/es/hooks/useOptions.js"],"names":["React","convertChildrenToData","useOptions","options","children","fieldNames","useMemo","mergedOptions","childrenAsData","valueOptions","Map","labelOptions","dig","optionList","isChildren","arguments","length","undefined","i","option","set","value","label"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,QAA7B,EAAuCC,UAAvC,EAAmD;AAChE,SAAOL,KAAK,CAACM,OAAN,CAAc,YAAY;AAC/B,QAAIC,aAAa,GAAGJ,OAApB;AACA,QAAIK,cAAc,GAAG,CAACL,OAAtB;;AAEA,QAAIK,cAAJ,EAAoB;AAClBD,MAAAA,aAAa,GAAGN,qBAAqB,CAACG,QAAD,CAArC;AACD;;AAED,QAAIK,YAAY,GAAG,IAAIC,GAAJ,EAAnB;AACA,QAAIC,YAAY,GAAG,IAAID,GAAJ,EAAnB;;AAEA,aAASE,GAAT,CAAaC,UAAb,EAAyB;AACvB,UAAIC,UAAU,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAArF,CADuB,CAGvB;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAAU,CAACG,MAA/B,EAAuCE,CAAC,IAAI,CAA5C,EAA+C;AAC7C,YAAIC,MAAM,GAAGN,UAAU,CAACK,CAAD,CAAvB;;AAEA,YAAI,CAACC,MAAM,CAACd,UAAU,CAACF,OAAZ,CAAP,IAA+BW,UAAnC,EAA+C;AAC7CL,UAAAA,YAAY,CAACW,GAAb,CAAiBD,MAAM,CAACd,UAAU,CAACgB,KAAZ,CAAvB,EAA2CF,MAA3C;AACAR,UAAAA,YAAY,CAACS,GAAb,CAAiBD,MAAM,CAACd,UAAU,CAACiB,KAAZ,CAAvB,EAA2CH,MAA3C;AACD,SAHD,MAGO;AACLP,UAAAA,GAAG,CAACO,MAAM,CAACd,UAAU,CAACF,OAAZ,CAAP,EAA6B,IAA7B,CAAH;AACD;AACF;AACF;;AAEDS,IAAAA,GAAG,CAACL,aAAD,CAAH;AACA,WAAO;AACLJ,MAAAA,OAAO,EAAEI,aADJ;AAELE,MAAAA,YAAY,EAAEA,YAFT;AAGLE,MAAAA,YAAY,EAAEA;AAHT,KAAP;AAKD,GAjCM,EAiCJ,CAACR,OAAD,EAAUC,QAAV,EAAoBC,UAApB,CAjCI,CAAP;AAkCD","sourcesContent":["import * as React from 'react';\nimport { convertChildrenToData } from '../utils/legacyUtil';\n/**\n * Parse `children` to `options` if `options` is not provided.\n * Then flatten the `options`.\n */\n\nexport default function useOptions(options, children, fieldNames) {\n  return React.useMemo(function () {\n    var mergedOptions = options;\n    var childrenAsData = !options;\n\n    if (childrenAsData) {\n      mergedOptions = convertChildrenToData(children);\n    }\n\n    var valueOptions = new Map();\n    var labelOptions = new Map();\n\n    function dig(optionList) {\n      var isChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      // for loop to speed up collection speed\n      for (var i = 0; i < optionList.length; i += 1) {\n        var option = optionList[i];\n\n        if (!option[fieldNames.options] || isChildren) {\n          valueOptions.set(option[fieldNames.value], option);\n          labelOptions.set(option[fieldNames.label], option);\n        } else {\n          dig(option[fieldNames.options], true);\n        }\n      }\n    }\n\n    dig(mergedOptions);\n    return {\n      options: mergedOptions,\n      valueOptions: valueOptions,\n      labelOptions: labelOptions\n    };\n  }, [options, children, fieldNames]);\n}"]},"metadata":{},"sourceType":"module"}