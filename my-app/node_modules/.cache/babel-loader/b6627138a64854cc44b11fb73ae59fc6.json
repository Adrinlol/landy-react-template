{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"virtual\", \"listHeight\", \"listItemHeight\", \"onDropdownVisibleChange\", \"dropdownMatchSelectWidth\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\"];\nimport * as React from 'react';\nimport { BaseSelect } from 'rc-select';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useId from \"rc-select/es/hooks/useId\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport OptionList from './OptionList';\nimport TreeNode from './TreeNode';\nimport { formatStrategyValues, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport TreeSelectContext from './TreeSelectContext';\nimport LegacyContext from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useRefFunc from './hooks/useRefFunc';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport warning from \"rc-util/es/warning\";\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      searchValue = props.searchValue,\n      inputValue = props.inputValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      filterTreeNode = props.filterTreeNode,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_CHILD : _props$showCheckedStr,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue,\n      fieldNames = props.fieldNames,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      children = props.children,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      onTreeLoad = props.onTreeLoad,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      onTreeExpand = props.onTreeExpand,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n      treeLine = props.treeLine,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeMotion = props.treeMotion,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple; // ========================== Warning ===========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]); // =========================== Search ===========================\n\n  var _useMergedState = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearchValue = _useMergedState2[0],\n      setSearchValue = _useMergedState2[1];\n\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n  }; // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n\n\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]); // Filtered Tree\n\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  }); // =========================== Label ============================\n\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      } // Loop from fieldNames\n\n\n      var titleList = mergedFieldNames._title;\n\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================\n\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue); // Fill missing label & status\n\n      if (entity) {\n        var _rawLabel;\n\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues]); // =========================== Values ===========================\n\n  var _useMergedState3 = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      internalValue = _useMergedState4[0],\n      setInternalValue = _useMergedState4[1];\n\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]); // Split value into full check and half check\n\n  var _React$useMemo = React.useMemo(function () {\n    var fullCheckValues = [];\n    var halfCheckValues = [];\n    rawMixedLabeledValues.forEach(function (item) {\n      if (item.halfChecked) {\n        halfCheckValues.push(item);\n      } else {\n        fullCheckValues.push(item);\n      }\n    });\n    return [fullCheckValues, halfCheckValues];\n  }, [rawMixedLabeledValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rawLabeledValues = _React$useMemo2[0],\n      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);\n\n\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.\n\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values\n\n\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, showCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label\n\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key, _keyEntities$key$node2;\n\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 ? void 0 : (_keyEntities$key$node2 = _keyEntities$key.node) === null || _keyEntities$key$node2 === void 0 ? void 0 : _keyEntities$key$node2[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    });\n    var rawDisplayValues = convert2LabelValues(values);\n    var firstVal = rawDisplayValues[0];\n\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, convert2LabelValues, showCheckedStrategy, keyEntities]);\n\n  var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================\n\n\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues); // Clean up if needed\n\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    } // Generate rest parameters is costly, so only do it when necessary\n\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, showCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnRawValues = eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  }); // ========================== Options ===========================\n\n  /** Trigger by option list */\n\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n\n    var selected = _ref2.selected,\n        source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      }); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        }); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Fill back of keys\n\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    } // Trigger select event\n\n\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ====================== Display Change ========================\n\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    } // TreeSelect only have multiple mode which means display change only has remove\n\n\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  }); // ========================== Context ===========================\n\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect\n    };\n  }, [virtual, listHeight, listItemHeight, filteredTreeData, mergedFieldNames, onOptionSelect]); // ======================= Legacy Context =======================\n\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================\n\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }))));\n}); // Assign name for Debug\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\n\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;","map":{"version":3,"sources":["/Users/iflego/Documents/GitHub/landy-react-template/my-app/node_modules/rc-tree-select/es/TreeSelect.js"],"names":["_extends","_toConsumableArray","_objectSpread","_slicedToArray","_objectWithoutProperties","_typeof","_excluded","React","BaseSelect","conductCheck","useId","useMergedState","OptionList","TreeNode","formatStrategyValues","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","TreeSelectContext","LegacyContext","useTreeData","toArray","fillFieldNames","isNil","useCache","useRefFunc","useDataEntities","fillAdditionalInfo","fillLegacyProps","useCheckedKeys","useFilterTreeData","warningProps","warning","isRawValue","value","TreeSelect","forwardRef","props","ref","id","_props$prefixCls","prefixCls","defaultValue","onChange","onSelect","onDeselect","searchValue","inputValue","onSearch","_props$autoClearSearc","autoClearSearchValue","filterTreeNode","_props$treeNodeFilter","treeNodeFilterProp","_props$showCheckedStr","showCheckedStrategy","treeNodeLabelProp","multiple","treeCheckable","treeCheckStrictly","labelInValue","fieldNames","treeDataSimpleMode","treeData","children","loadData","treeLoadedKeys","onTreeLoad","treeDefaultExpandAll","treeExpandedKeys","treeDefaultExpandedKeys","onTreeExpand","virtual","_props$listHeight","listHeight","_props$listItemHeight","listItemHeight","onDropdownVisibleChange","_props$dropdownMatchS","dropdownMatchSelectWidth","treeLine","treeIcon","showTreeIcon","switcherIcon","treeMotion","restProps","mergedId","treeConduction","mergedCheckable","mergedLabelInValue","mergedMultiple","process","env","NODE_ENV","mergedFieldNames","useMemo","JSON","stringify","_useMergedState","undefined","postState","search","_useMergedState2","mergedSearchValue","setSearchValue","onInternalSearch","searchText","mergedTreeData","_useDataEntities","keyEntities","valueEntities","splitRawValues","useCallback","newRawValues","missingRawValues","existRawValues","forEach","val","has","push","filteredTreeData","getLabel","item","titleList","_title","i","length","title","toLabeledValues","draftValues","values","map","convert2LabelValues","rawLabel","label","rawValue","rawHalfChecked","halfChecked","rawDisabled","entity","get","_rawLabel","node","disabled","_useMergedState3","_useMergedState4","internalValue","setInternalValue","rawMixedLabeledValues","_React$useMemo","fullCheckValues","halfCheckValues","_React$useMemo2","rawLabeledValues","rawHalfLabeledValues","rawValues","_useCheckedKeys","_useCheckedKeys2","rawCheckedValues","rawHalfCheckedValues","displayValues","displayKeys","key","_keyEntities$key$node","_keyEntities$key","_keyEntities$key$node2","rawDisplayValues","firstVal","_item$label","_useCache","_useCache2","cachedDisplayValues","triggerChange","extra","source","labeledValues","eventValues","formattedKeyList","_ref","triggerValue","selected","returnRawValues","halfValues","filter","includes","concat","returnLabeledValues","additionalInfo","preValue","showPosition","checked","returnValues","onOptionSelect","selectedKey","_ref2","_node$mergedFieldName","selectedValue","v","_splitRawValues","keyList","checkedKeys","_conductCheck","_conductCheck2","halfCheckedKeys","onInternalDropdownVisibleChange","open","legacyParam","Object","defineProperty","onDisplayValuesChange","newValues","info","type","treeSelectContext","legacyContext","checkable","createElement","Provider","mode","emptyOptions","displayName","GenericTreeSelect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"virtual\", \"listHeight\", \"listItemHeight\", \"onDropdownVisibleChange\", \"dropdownMatchSelectWidth\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\"];\nimport * as React from 'react';\nimport { BaseSelect } from 'rc-select';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useId from \"rc-select/es/hooks/useId\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport OptionList from './OptionList';\nimport TreeNode from './TreeNode';\nimport { formatStrategyValues, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport TreeSelectContext from './TreeSelectContext';\nimport LegacyContext from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useRefFunc from './hooks/useRefFunc';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport warning from \"rc-util/es/warning\";\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      searchValue = props.searchValue,\n      inputValue = props.inputValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      filterTreeNode = props.filterTreeNode,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_CHILD : _props$showCheckedStr,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue,\n      fieldNames = props.fieldNames,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      children = props.children,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      onTreeLoad = props.onTreeLoad,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      onTreeExpand = props.onTreeExpand,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n      treeLine = props.treeLine,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeMotion = props.treeMotion,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple; // ========================== Warning ===========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]); // =========================== Search ===========================\n\n  var _useMergedState = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearchValue = _useMergedState2[0],\n      setSearchValue = _useMergedState2[1];\n\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n  }; // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n\n\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]); // Filtered Tree\n\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  }); // =========================== Label ============================\n\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      } // Loop from fieldNames\n\n\n      var titleList = mergedFieldNames._title;\n\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================\n\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue); // Fill missing label & status\n\n      if (entity) {\n        var _rawLabel;\n\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues]); // =========================== Values ===========================\n\n  var _useMergedState3 = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      internalValue = _useMergedState4[0],\n      setInternalValue = _useMergedState4[1];\n\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]); // Split value into full check and half check\n\n  var _React$useMemo = React.useMemo(function () {\n    var fullCheckValues = [];\n    var halfCheckValues = [];\n    rawMixedLabeledValues.forEach(function (item) {\n      if (item.halfChecked) {\n        halfCheckValues.push(item);\n      } else {\n        fullCheckValues.push(item);\n      }\n    });\n    return [fullCheckValues, halfCheckValues];\n  }, [rawMixedLabeledValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rawLabeledValues = _React$useMemo2[0],\n      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);\n\n\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.\n\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values\n\n\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, showCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label\n\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key, _keyEntities$key$node2;\n\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 ? void 0 : (_keyEntities$key$node2 = _keyEntities$key.node) === null || _keyEntities$key$node2 === void 0 ? void 0 : _keyEntities$key$node2[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    });\n    var rawDisplayValues = convert2LabelValues(values);\n    var firstVal = rawDisplayValues[0];\n\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, convert2LabelValues, showCheckedStrategy, keyEntities]);\n\n  var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================\n\n\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues); // Clean up if needed\n\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    } // Generate rest parameters is costly, so only do it when necessary\n\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, showCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnRawValues = eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  }); // ========================== Options ===========================\n\n  /** Trigger by option list */\n\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n\n    var selected = _ref2.selected,\n        source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      }); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        }); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Fill back of keys\n\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    } // Trigger select event\n\n\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ====================== Display Change ========================\n\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    } // TreeSelect only have multiple mode which means display change only has remove\n\n\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  }); // ========================== Context ===========================\n\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect\n    };\n  }, [virtual, listHeight, listItemHeight, filteredTreeData, mergedFieldNames, onOptionSelect]); // ======================= Legacy Context =======================\n\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================\n\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }))));\n}); // Assign name for Debug\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\n\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;"]},"metadata":{},"sourceType":"module"}